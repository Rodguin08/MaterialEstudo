{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst fs = require('@npmcli/fs');\n\nconst fsm = require('fs-minipass');\n\nconst ssri = require('ssri');\n\nconst contentPath = require('./path');\n\nconst Pipeline = require('minipass-pipeline');\n\nmodule.exports = read;\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024;\n\nfunction read(_x, _x2) {\n  return _read.apply(this, arguments);\n}\n\nfunction _read() {\n  _read = _asyncToGenerator(function* (cache, integrity, opts = {}) {\n    const {\n      size\n    } = opts;\n    const {\n      stat,\n      cpath,\n      sri\n    } = yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (cpath, sri) {\n        // get size\n        const stat = yield fs.stat(cpath);\n        return {\n          stat,\n          cpath,\n          sri\n        };\n      });\n\n      return function (_x10, _x11) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    if (typeof size === 'number' && stat.size !== size) {\n      throw sizeError(size, stat.size);\n    }\n\n    if (stat.size > MAX_SINGLE_READ_SIZE) {\n      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat();\n    }\n\n    const data = yield fs.readFile(cpath, {\n      encoding: null\n    });\n\n    if (!ssri.checkData(data, sri)) {\n      throw integrityError(sri, cpath);\n    }\n\n    return data;\n  });\n  return _read.apply(this, arguments);\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(new fsm.ReadStream(cpath, {\n    size,\n    readSize: MAX_SINGLE_READ_SIZE\n  }), ssri.integrityStream({\n    integrity: sri,\n    size\n  }));\n  return stream;\n};\n\nmodule.exports.sync = readSync;\n\nfunction readSync(cache, integrity, opts = {}) {\n  const {\n    size\n  } = opts;\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath, {\n      encoding: null\n    });\n\n    if (typeof size === 'number' && size !== data.length) {\n      throw sizeError(size, data.length);\n    }\n\n    if (ssri.checkData(data, sri)) {\n      return data;\n    }\n\n    throw integrityError(sri, cpath);\n  });\n}\n\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\n\nfunction readStream(cache, integrity, opts = {}) {\n  const {\n    size\n  } = opts;\n  const stream = new Pipeline(); // Set all this up to run on the stream and then just return the stream\n\n  Promise.resolve().then( /*#__PURE__*/_asyncToGenerator(function* () {\n    const {\n      stat,\n      cpath,\n      sri\n    } = yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (cpath, sri) {\n        // just stat to ensure it exists\n        const stat = yield fs.stat(cpath);\n        return {\n          stat,\n          cpath,\n          sri\n        };\n      });\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size));\n    }\n\n    return readPipeline(cpath, stat.size, sri, stream);\n  })).catch(err => stream.emit('error', err));\n  return stream;\n}\n\nmodule.exports.copy = copy;\nmodule.exports.copy.sync = copySync;\n\nfunction copy(cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest);\n  });\n}\n\nfunction copySync(cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\n\nmodule.exports.hasContent = hasContent;\n\nfunction hasContent(_x5, _x6) {\n  return _hasContent.apply(this, arguments);\n}\n\nfunction _hasContent() {\n  _hasContent = _asyncToGenerator(function* (cache, integrity) {\n    if (!integrity) {\n      return false;\n    }\n\n    try {\n      return yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (cpath, sri) {\n          const stat = yield fs.stat(cpath);\n          return {\n            size: stat.size,\n            sri,\n            stat\n          };\n        });\n\n        return function (_x12, _x13) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n  return _hasContent.apply(this, arguments);\n}\n\nmodule.exports.hasContent.sync = hasContentSync;\n\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) {\n    return false;\n  }\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.statSync(cpath);\n      return {\n        size: stat.size,\n        sri,\n        stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n}\n\nfunction withContentSri(_x7, _x8, _x9) {\n  return _withContentSri.apply(this, arguments);\n}\n\nfunction _withContentSri() {\n  _withContentSri = _asyncToGenerator(function* (cache, integrity, fn) {\n    const sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n\n    const algo = sri.pickAlgorithm();\n    const digests = sri[algo];\n\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      const results = yield Promise.all(digests.map( /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator(function* (meta) {\n          try {\n            return yield withContentSri(cache, meta, fn);\n          } catch (err) {\n            if (err.code === 'ENOENT') {\n              return Object.assign(new Error('No matching content found for ' + sri.toString()), {\n                code: 'ENOENT'\n              });\n            }\n\n            return err;\n          }\n        });\n\n        return function (_x14) {\n          return _ref5.apply(this, arguments);\n        };\n      }())); // Return the first non error if it is found\n\n      const result = results.find(r => !(r instanceof Error));\n\n      if (result) {\n        return result;\n      } // Throw the No matching content found error\n\n\n      const enoentError = results.find(r => r.code === 'ENOENT');\n\n      if (enoentError) {\n        throw enoentError;\n      } // Throw generic error\n\n\n      throw results.find(r => r instanceof Error);\n    }\n  });\n  return _withContentSri.apply(this, arguments);\n}\n\nfunction withContentSriSync(cache, integrity, fn) {\n  const sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n\n  const algo = sri.pickAlgorithm();\n  const digests = sri[algo];\n\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    let lastErr = null;\n\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn);\n      } catch (err) {\n        lastErr = err;\n      }\n    }\n\n    throw lastErr;\n  }\n}\n\nfunction sizeError(expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\n\nfunction integrityError(sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`);\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":null,"metadata":{},"sourceType":"script"}