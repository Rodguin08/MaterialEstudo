{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst makeSpawnArgs = require('./make-spawn-args.js');\n\nconst promiseSpawn = require('@npmcli/promise-spawn');\n\nconst packageEnvs = require('./package-envs.js');\n\nconst {\n  isNodeGypPackage,\n  defaultGypInstallScript\n} = require('@npmcli/node-gyp');\n\nconst signalManager = require('./signal-manager.js');\n\nconst isServerPackage = require('./is-server-package.js'); // you wouldn't like me when I'm angry...\n\n\nconst bruce = (id, event, cmd, args) => {\n  let banner = id ? `\\n> ${id} ${event}\\n` : `\\n> ${event}\\n`;\n  banner += `> ${cmd.trim().replace(/\\n/g, '\\n> ')}`;\n\n  if (args.length) {\n    banner += ` ${args.join(' ')}`;\n  }\n\n  banner += '\\n';\n  return banner;\n};\n\nconst runScriptPkg = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (options) {\n    const {\n      event,\n      path,\n      scriptShell,\n      binPaths = false,\n      env = {},\n      stdio = 'pipe',\n      pkg,\n      args = [],\n      stdioString = false,\n      // note: only used when stdio:inherit\n      banner = true,\n      // how long to wait for a process.kill signal\n      // only exposed here so that we can make the test go a bit faster.\n      signalTimeout = 500\n    } = options;\n    const {\n      scripts = {},\n      gypfile\n    } = pkg;\n    let cmd = null;\n\n    if (options.cmd) {\n      cmd = options.cmd;\n    } else if (pkg.scripts && pkg.scripts[event]) {\n      cmd = pkg.scripts[event];\n    } else if ( // If there is no preinstall or install script, default to rebuilding node-gyp packages.\n    event === 'install' && !scripts.install && !scripts.preinstall && gypfile !== false && (yield isNodeGypPackage(path))) {\n      cmd = defaultGypInstallScript;\n    } else if (event === 'start' && (yield isServerPackage(path))) {\n      cmd = 'node server.js';\n    }\n\n    if (!cmd) {\n      return {\n        code: 0,\n        signal: null\n      };\n    }\n\n    if (stdio === 'inherit' && banner !== false) {\n      // we're dumping to the parent's stdout, so print the banner\n      console.log(bruce(pkg._id, event, cmd, args));\n    }\n\n    const [spawnShell, spawnArgs, spawnOpts] = makeSpawnArgs({\n      event,\n      path,\n      scriptShell,\n      binPaths,\n      env: packageEnvs(env, pkg),\n      stdio,\n      cmd,\n      args,\n      stdioString\n    });\n    const p = promiseSpawn(spawnShell, spawnArgs, spawnOpts, {\n      event,\n      script: cmd,\n      pkgid: pkg._id,\n      path\n    });\n\n    if (stdio === 'inherit') {\n      signalManager.add(p.process);\n    }\n\n    if (p.stdin) {\n      p.stdin.end();\n    }\n\n    return p.catch(er => {\n      const {\n        signal\n      } = er;\n\n      if (stdio === 'inherit' && signal) {\n        process.kill(process.pid, signal); // just in case we don't die, reject after 500ms\n        // this also keeps the node process open long enough to actually\n        // get the signal, rather than terminating gracefully.\n\n        return new Promise((res, rej) => setTimeout(() => rej(er), signalTimeout));\n      } else {\n        throw er;\n      }\n    });\n  });\n\n  return function runScriptPkg(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = runScriptPkg;","map":null,"metadata":{},"sourceType":"script"}