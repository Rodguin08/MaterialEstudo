{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = /*#__PURE__*/require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RunCommandModule = void 0;\n\nconst path_1 = /*#__PURE__*/require(\"path\");\n\nconst architect_base_command_module_1 = /*#__PURE__*/require(\"../../command-builder/architect-base-command-module\");\n\nconst command_module_1 = /*#__PURE__*/require(\"../../command-builder/command-module\");\n\nclass RunCommandModule extends architect_base_command_module_1.ArchitectBaseCommandModule {\n  constructor() {\n    super(...arguments);\n    this.scope = command_module_1.CommandScope.In;\n    this.command = 'run <target>';\n    this.describe = 'Runs an Architect target with an optional custom builder configuration defined in your project.';\n    this.longDescriptionPath = (0, path_1.join)(__dirname, 'long-description.md');\n  }\n\n  builder(argv) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        jsonHelp,\n        getYargsCompletions,\n        help\n      } = _this.context.args.options;\n      const localYargs = argv.positional('target', {\n        describe: 'The Architect target to run.',\n        type: 'string',\n        demandOption: true,\n        // Show only in when using --help and auto completion because otherwise comma seperated configuration values will be invalid.\n        // Also, hide choices from JSON help so that we don't display them in AIO.\n        choices: (getYargsCompletions || help) && !jsonHelp ? _this.getTargetChoices() : undefined\n      }).middleware(args => {\n        // TODO: remove in version 15.\n        const {\n          configuration,\n          target\n        } = args;\n\n        if (typeof configuration === 'string' && target) {\n          const targetWithConfig = target.split(':', 2);\n          targetWithConfig.push(configuration);\n          throw new command_module_1.CommandModuleError('Unknown argument: configuration.\\n' + `Provide the configuration as part of the target 'ng run ${targetWithConfig.join(':')}'.`);\n        }\n      }, true).strict();\n\n      const target = _this.makeTargetSpecifier();\n\n      if (!target) {\n        return localYargs;\n      }\n\n      const schemaOptions = yield _this.getArchitectTargetOptions(target);\n      return _this.addSchemaOptionsToCommand(localYargs, schemaOptions);\n    })();\n  }\n\n  run(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const target = _this2.makeTargetSpecifier(options);\n\n      const {\n        target: _target,\n        ...extraOptions\n      } = options;\n\n      if (!target) {\n        throw new command_module_1.CommandModuleError('Cannot determine project or target.');\n      }\n\n      return _this2.runSingleTarget(target, extraOptions);\n    })();\n  }\n\n  makeTargetSpecifier(options) {\n    var _a;\n\n    const architectTarget = (_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : this.context.args.positional[1];\n\n    if (!architectTarget) {\n      return undefined;\n    }\n\n    const [project = '', target = '', configuration] = architectTarget.split(':');\n    return {\n      project,\n      target,\n      configuration\n    };\n  }\n  /** @returns a sorted list of target specifiers to be used for auto completion. */\n\n\n  getTargetChoices() {\n    if (!this.context.workspace) {\n      return;\n    }\n\n    const targets = [];\n\n    for (const [projectName, project] of this.context.workspace.projects) {\n      for (const [targetName, target] of project.targets) {\n        const currentTarget = `${projectName}:${targetName}`;\n        targets.push(currentTarget);\n\n        if (!target.configurations) {\n          continue;\n        }\n\n        for (const configName of Object.keys(target.configurations)) {\n          targets.push(`${currentTarget}:${configName}`);\n        }\n      }\n    }\n\n    return targets.sort();\n  }\n\n}\n\nexports.RunCommandModule = RunCommandModule;","map":null,"metadata":{},"sourceType":"script"}