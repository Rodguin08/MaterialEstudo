{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst fs = require('@npmcli/fs');\n\nconst move = require('@npmcli/move-file');\n\nconst pinflight = require('promise-inflight');\n\nmodule.exports = moveFile;\n\nfunction moveFile(_x, _x2) {\n  return _moveFile.apply(this, arguments);\n}\n\nfunction _moveFile() {\n  _moveFile = _asyncToGenerator(function* (src, dest) {\n    const isWindows = process.platform === 'win32'; // This isn't quite an fs.rename -- the assumption is that\n    // if `dest` already exists, and we get certain errors while\n    // trying to move it, we should just not bother.\n    //\n    // In the case of cache corruption, users will receive an\n    // EINTEGRITY error elsewhere, and can remove the offending\n    // content their own way.\n    //\n    // Note that, as the name suggests, this strictly only supports file moves.\n\n    try {\n      yield fs.link(src, dest);\n    } catch (err) {\n      if (isWindows && err.code === 'EPERM') {// XXX This is a really weird way to handle this situation, as it\n        // results in the src file being deleted even though the dest\n        // might not exist.  Since we pretty much always write files to\n        // deterministic locations based on content hash, this is likely\n        // ok (or at worst, just ends in a future cache miss).  But it would\n        // be worth investigating at some time in the future if this is\n        // really what we want to do here.\n      } else if (err.code === 'EEXIST' || err.code === 'EBUSY') {// file already exists, so whatever\n      } else {\n        throw err;\n      }\n    }\n\n    try {\n      yield Promise.all([fs.unlink(src), !isWindows && fs.chmod(dest, '0444')]);\n    } catch (e) {\n      return pinflight('cacache-move-file:' + dest, /*#__PURE__*/_asyncToGenerator(function* () {\n        yield fs.stat(dest).catch(err => {\n          if (err.code !== 'ENOENT') {\n            // Something else is wrong here. Bail bail bail\n            throw err;\n          }\n        }); // file doesn't already exist! let's try a rename -> copy fallback\n        // only delete if it successfully copies\n\n        return move(src, dest);\n      }));\n    }\n  });\n  return _moveFile.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}