{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\n\nconst handler = {\n  get: function (target, prop, receiver) {\n    if (typeof target[prop] !== 'function') {\n      return target[prop];\n    }\n\n    if (target[prop][promisify.custom]) {\n      return function () {\n        return Reflect.get(target, prop, receiver)[promisify.custom].apply(target, arguments);\n      };\n    }\n\n    return function () {\n      return new Promise((resolve, reject) => {\n        Reflect.get(target, prop, receiver).apply(target, [...arguments, function (err, result) {\n          if (err) {\n            return reject(err);\n          }\n\n          resolve(result);\n        }]);\n      });\n    };\n  }\n};\n\nmodule.exports = function (thingToPromisify) {\n  if (typeof thingToPromisify === 'function') {\n    return promisify(thingToPromisify);\n  }\n\n  if (typeof thingToPromisify === 'object') {\n    return new Proxy(thingToPromisify, handler);\n  }\n\n  throw new TypeError('Can only promisify functions or objects');\n};","map":null,"metadata":{},"sourceType":"script"}