{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\n// this file is a modified version of the code in node core >=14.14.0\n// which is, in turn, a modified version of the rimraf module on npm\n// node core changes:\n// - Use of the assert module has been replaced with core's error system.\n// - All code related to the glob dependency has been removed.\n// - Bring your own custom fs module is not currently supported.\n// - Some basic code cleanup.\n// changes here:\n// - remove all callback related code\n// - drop sync support\n// - change assertions back to non-internal methods (see options.js)\n// - throws ENOTDIR when rmdir gets an ENOENT for a path that exists in Windows\nconst errnos = require('os').constants.errno;\n\nconst {\n  join\n} = require('path');\n\nconst fs = require('../fs.js'); // error codes that mean we need to remove contents\n\n\nconst notEmptyCodes = new Set(['ENOTEMPTY', 'EEXIST', 'EPERM']); // error codes we can retry later\n\nconst retryCodes = new Set(['EBUSY', 'EMFILE', 'ENFILE', 'ENOTEMPTY', 'EPERM']);\nconst isWindows = process.platform === 'win32';\nconst defaultOptions = {\n  retryDelay: 100,\n  maxRetries: 0,\n  recursive: false,\n  force: false\n}; // this is drastically simplified, but should be roughly equivalent to what\n// node core throws\n\nclass ERR_FS_EISDIR extends Error {\n  constructor(path) {\n    super();\n    this.info = {\n      code: 'EISDIR',\n      message: 'is a directory',\n      path,\n      syscall: 'rm',\n      errno: errnos.EISDIR\n    };\n    this.name = 'SystemError';\n    this.code = 'ERR_FS_EISDIR';\n    this.errno = errnos.EISDIR;\n    this.syscall = 'rm';\n    this.path = path;\n    this.message = `Path is a directory: ${this.syscall} returned ` + `${this.info.code} (is a directory) ${path}`;\n  }\n\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n\n}\n\nclass ENOTDIR extends Error {\n  constructor(path) {\n    super();\n    this.name = 'Error';\n    this.code = 'ENOTDIR';\n    this.errno = errnos.ENOTDIR;\n    this.syscall = 'rmdir';\n    this.path = path;\n    this.message = `not a directory, ${this.syscall} '${this.path}'`;\n  }\n\n  toString() {\n    return `${this.name}: ${this.code}: ${this.message}`;\n  }\n\n} // force is passed separately here because we respect it for the first entry\n// into rimraf only, any further calls that are spawned as a result (i.e. to\n// delete content within the target) will ignore ENOENT errors\n\n\nconst rimraf = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (path, options, isTop = false) {\n    const force = isTop ? options.force : true;\n    const stat = yield fs.lstat(path).catch(err => {\n      // we only ignore ENOENT if we're forcing this call\n      if (err.code === 'ENOENT' && force) {\n        return;\n      }\n\n      if (isWindows && err.code === 'EPERM') {\n        return fixEPERM(path, options, err, isTop);\n      }\n\n      throw err;\n    }); // no stat object here means either lstat threw an ENOENT, or lstat threw\n    // an EPERM and the fixPERM function took care of things. either way, we're\n    // already done, so return early\n\n    if (!stat) {\n      return;\n    }\n\n    if (stat.isDirectory()) {\n      return rmdir(path, options, null, isTop);\n    }\n\n    return fs.unlink(path).catch(err => {\n      if (err.code === 'ENOENT' && force) {\n        return;\n      }\n\n      if (err.code === 'EISDIR') {\n        return rmdir(path, options, err, isTop);\n      }\n\n      if (err.code === 'EPERM') {\n        // in windows, we handle this through fixEPERM which will also try to\n        // delete things again. everywhere else since deleting the target as a\n        // file didn't work we go ahead and try to delete it as a directory\n        return isWindows ? fixEPERM(path, options, err, isTop) : rmdir(path, options, err, isTop);\n      }\n\n      throw err;\n    });\n  });\n\n  return function rimraf(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst fixEPERM = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (path, options, originalErr, isTop) {\n    const force = isTop ? options.force : true;\n    const targetMissing = yield fs.chmod(path, 0o666).catch(err => {\n      if (err.code === 'ENOENT' && force) {\n        return true;\n      }\n\n      throw originalErr;\n    }); // got an ENOENT above, return now. no file = no problem\n\n    if (targetMissing) {\n      return;\n    } // this function does its own lstat rather than calling rimraf again to avoid\n    // infinite recursion for a repeating EPERM\n\n\n    const stat = yield fs.lstat(path).catch(err => {\n      if (err.code === 'ENOENT' && force) {\n        return;\n      }\n\n      throw originalErr;\n    });\n\n    if (!stat) {\n      return;\n    }\n\n    if (stat.isDirectory()) {\n      return rmdir(path, options, originalErr, isTop);\n    }\n\n    return fs.unlink(path);\n  });\n\n  return function fixEPERM(_x3, _x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nconst rmdir = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (path, options, originalErr, isTop) {\n    if (!options.recursive && isTop) {\n      throw originalErr || new ERR_FS_EISDIR(path);\n    }\n\n    const force = isTop ? options.force : true;\n    return fs.rmdir(path).catch( /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (err) {\n        // in Windows, calling rmdir on a file path will fail with ENOENT rather\n        // than ENOTDIR. to determine if that's what happened, we have to do\n        // another lstat on the path. if the path isn't actually gone, we throw\n        // away the ENOENT and replace it with our own ENOTDIR\n        if (isWindows && err.code === 'ENOENT') {\n          const stillExists = yield fs.lstat(path).then(() => true, () => false);\n\n          if (stillExists) {\n            err = new ENOTDIR(path);\n          }\n        } // not there, not a problem\n\n\n        if (err.code === 'ENOENT' && force) {\n          return;\n        } // we may not have originalErr if lstat tells us our target is a\n        // directory but that changes before we actually remove it, so\n        // only throw it here if it's set\n\n\n        if (originalErr && err.code === 'ENOTDIR') {\n          throw originalErr;\n        } // the directory isn't empty, remove the contents and try again\n\n\n        if (notEmptyCodes.has(err.code)) {\n          const files = yield fs.readdir(path);\n          yield Promise.all(files.map(file => {\n            const target = join(path, file);\n            return rimraf(target, options);\n          }));\n          return fs.rmdir(path);\n        }\n\n        throw err;\n      });\n\n      return function (_x11) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n\n  return function rmdir(_x7, _x8, _x9, _x10) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nconst rm = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(function* (path, opts) {\n    const options = { ...defaultOptions,\n      ...opts\n    };\n    let retries = 0;\n\n    const errHandler = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(function* (err) {\n        if (retryCodes.has(err.code) && ++retries < options.maxRetries) {\n          const delay = retries * options.retryDelay;\n          yield promiseTimeout(delay);\n          return rimraf(path, options, true).catch(errHandler);\n        }\n\n        throw err;\n      });\n\n      return function errHandler(_x14) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    return rimraf(path, options, true).catch(errHandler);\n  });\n\n  return function rm(_x12, _x13) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nconst promiseTimeout = ms => new Promise(r => setTimeout(r, ms));\n\nmodule.exports = rm;","map":null,"metadata":{},"sourceType":"script"}