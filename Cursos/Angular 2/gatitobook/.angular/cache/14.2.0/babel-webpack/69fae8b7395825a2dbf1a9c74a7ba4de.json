{"ast":null,"code":"const LRUCache = require('lru-cache');\n\nconst dns = require('dns');\n\nconst defaultOptions = exports.defaultOptions = {\n  family: undefined,\n  hints: dns.ADDRCONFIG,\n  all: false,\n  verbatim: undefined\n};\nconst lookupCache = exports.lookupCache = new LRUCache({\n  max: 50\n}); // this is a factory so that each request can have its own opts (i.e. ttl)\n// while still sharing the cache across all requests\n\nexports.getLookup = dnsOptions => {\n  return (hostname, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = null;\n    } else if (typeof options === 'number') {\n      options = {\n        family: options\n      };\n    }\n\n    options = { ...defaultOptions,\n      ...options\n    };\n    const key = JSON.stringify({\n      hostname,\n      family: options.family,\n      hints: options.hints,\n      all: options.all,\n      verbatim: options.verbatim\n    });\n\n    if (lookupCache.has(key)) {\n      const [address, family] = lookupCache.get(key);\n      process.nextTick(callback, null, address, family);\n      return;\n    }\n\n    dnsOptions.lookup(hostname, options, (err, address, family) => {\n      if (err) {\n        return callback(err);\n      }\n\n      lookupCache.set(key, [address, family], {\n        ttl: dnsOptions.ttl\n      });\n      return callback(null, address, family);\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}