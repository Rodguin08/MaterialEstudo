{"ast":null,"code":"'use strict';\n\nconst hexify = char => {\n  const h = char.charCodeAt(0).toString(16).toUpperCase();\n  return '0x' + (h.length % 2 ? '0' : '') + h;\n};\n\nconst parseError = (e, txt, context) => {\n  if (!txt) {\n    return {\n      message: e.message + ' while parsing empty string',\n      position: 0\n    };\n  }\n\n  const badToken = e.message.match(/^Unexpected token (.) .*position\\s+(\\d+)/i);\n  const errIdx = badToken ? +badToken[2] : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;\n  const msg = badToken ? e.message.replace(/^Unexpected token ./, `Unexpected token ${JSON.stringify(badToken[1])} (${hexify(badToken[1])})`) : e.message;\n\n  if (errIdx !== null && errIdx !== undefined) {\n    const start = errIdx <= context ? 0 : errIdx - context;\n    const end = errIdx + context >= txt.length ? txt.length : errIdx + context;\n    const slice = (start === 0 ? '' : '...') + txt.slice(start, end) + (end === txt.length ? '' : '...');\n    const near = txt === slice ? '' : 'near ';\n    return {\n      message: msg + ` while parsing ${near}${JSON.stringify(slice)}`,\n      position: errIdx\n    };\n  } else {\n    return {\n      message: msg + ` while parsing '${txt.slice(0, context * 2)}'`,\n      position: 0\n    };\n  }\n};\n\nclass JSONParseError extends SyntaxError {\n  constructor(er, txt, context, caller) {\n    context = context || 20;\n    const metadata = parseError(er, txt, context);\n    super(metadata.message);\n    Object.assign(this, metadata);\n    this.code = 'EJSONPARSE';\n    this.systemError = er;\n    Error.captureStackTrace(this, caller || this.constructor);\n  }\n\n  get name() {\n    return this.constructor.name;\n  }\n\n  set name(n) {}\n\n  get [Symbol.toStringTag]() {\n    return this.constructor.name;\n  }\n\n}\n\nconst kIndent = Symbol.for('indent');\nconst kNewline = Symbol.for('newline'); // only respect indentation if we got a line break, otherwise squash it\n// things other than objects and arrays aren't indented, so ignore those\n// Important: in both of these regexps, the $1 capture group is the newline\n// or undefined, and the $2 capture group is the indent, or undefined.\n\nconst formatRE = /^\\s*[{\\[]((?:\\r?\\n)+)([\\s\\t]*)/;\nconst emptyRE = /^(?:\\{\\}|\\[\\])((?:\\r?\\n)+)?$/;\n\nconst parseJson = (txt, reviver, context) => {\n  const parseText = stripBOM(txt);\n  context = context || 20;\n\n  try {\n    // get the indentation so that we can save it back nicely\n    // if the file starts with {\" then we have an indent of '', ie, none\n    // otherwise, pick the indentation of the next line after the first \\n\n    // If the pattern doesn't match, then it means no indentation.\n    // JSON.stringify ignores symbols, so this is reasonably safe.\n    // if the string is '{}' or '[]', then use the default 2-space indent.\n    const [, newline = '\\n', indent = '  '] = parseText.match(emptyRE) || parseText.match(formatRE) || [, '', ''];\n    const result = JSON.parse(parseText, reviver);\n\n    if (result && typeof result === 'object') {\n      result[kNewline] = newline;\n      result[kIndent] = indent;\n    }\n\n    return result;\n  } catch (e) {\n    if (typeof txt !== 'string' && !Buffer.isBuffer(txt)) {\n      const isEmptyArray = Array.isArray(txt) && txt.length === 0;\n      throw Object.assign(new TypeError(`Cannot parse ${isEmptyArray ? 'an empty array' : String(txt)}`), {\n        code: 'EJSONPARSE',\n        systemError: e\n      });\n    }\n\n    throw new JSONParseError(e, parseText, context, parseJson);\n  }\n}; // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n// because the buffer-to-string conversion in `fs.readFileSync()`\n// translates it to FEFF, the UTF-16 BOM.\n\n\nconst stripBOM = txt => String(txt).replace(/^\\uFEFF/, '');\n\nmodule.exports = parseJson;\nparseJson.JSONParseError = JSONParseError;\n\nparseJson.noExceptions = (txt, reviver) => {\n  try {\n    return JSON.parse(stripBOM(txt), reviver);\n  } catch (e) {}\n};","map":null,"metadata":{},"sourceType":"script"}