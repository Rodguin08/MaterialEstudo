{"ast":null,"code":"const Minipass = require('minipass');\n\nconst _flush = Symbol('_flush');\n\nconst _flushed = Symbol('_flushed');\n\nconst _flushing = Symbol('_flushing');\n\nclass Flush extends Minipass {\n  constructor(opt = {}) {\n    if (typeof opt === 'function') opt = {\n      flush: opt\n    };\n    super(opt); // or extend this class and provide a 'flush' method in your subclass\n\n    if (typeof opt.flush !== 'function' && typeof this.flush !== 'function') throw new TypeError('must provide flush function in options');\n    this[_flush] = opt.flush || this.flush;\n  }\n\n  emit(ev, ...data) {\n    if (ev !== 'end' && ev !== 'finish' || this[_flushed]) return super.emit(ev, ...data);\n    if (this[_flushing]) return;\n    this[_flushing] = true;\n\n    const afterFlush = er => {\n      this[_flushed] = true;\n      er ? super.emit('error', er) : super.emit('end');\n    };\n\n    const ret = this[_flush](afterFlush);\n\n    if (ret && ret.then) ret.then(() => afterFlush(), er => afterFlush(er));\n  }\n\n}\n\nmodule.exports = Flush;","map":null,"metadata":{},"sourceType":"script"}