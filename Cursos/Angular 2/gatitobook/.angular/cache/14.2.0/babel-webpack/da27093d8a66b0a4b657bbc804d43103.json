{"ast":null,"code":"'use strict';\n\nconst {\n  inspect\n} = require('util'); // adapted from node's internal/errors\n// https://github.com/nodejs/node/blob/c8a04049/lib/internal/errors.js\n// close copy of node's internal SystemError class.\n\n\nclass SystemError {\n  constructor(code, prefix, context) {\n    // XXX context.code is undefined in all constructors used in cp/polyfill\n    // that may be a bug copied from node, maybe the constructor should use\n    // `code` not `errno`?  nodejs/node#41104\n    let message = `${prefix}: ${context.syscall} returned ` + `${context.code} (${context.message})`;\n\n    if (context.path !== undefined) {\n      message += ` ${context.path}`;\n    }\n\n    if (context.dest !== undefined) {\n      message += ` => ${context.dest}`;\n    }\n\n    this.code = code;\n    Object.defineProperties(this, {\n      name: {\n        value: 'SystemError',\n        enumerable: false,\n        writable: true,\n        configurable: true\n      },\n      message: {\n        value: message,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      },\n      info: {\n        value: context,\n        enumerable: true,\n        configurable: true,\n        writable: false\n      },\n      errno: {\n        get() {\n          return context.errno;\n        },\n\n        set(value) {\n          context.errno = value;\n        },\n\n        enumerable: true,\n        configurable: true\n      },\n      syscall: {\n        get() {\n          return context.syscall;\n        },\n\n        set(value) {\n          context.syscall = value;\n        },\n\n        enumerable: true,\n        configurable: true\n      }\n    });\n\n    if (context.path !== undefined) {\n      Object.defineProperty(this, 'path', {\n        get() {\n          return context.path;\n        },\n\n        set(value) {\n          context.path = value;\n        },\n\n        enumerable: true,\n        configurable: true\n      });\n    }\n\n    if (context.dest !== undefined) {\n      Object.defineProperty(this, 'dest', {\n        get() {\n          return context.dest;\n        },\n\n        set(value) {\n          context.dest = value;\n        },\n\n        enumerable: true,\n        configurable: true\n      });\n    }\n  }\n\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')](_recurseTimes, ctx) {\n    return inspect(this, { ...ctx,\n      getters: true,\n      customInspect: false\n    });\n  }\n\n}\n\nfunction E(code, message) {\n  module.exports[code] = class NodeError extends SystemError {\n    constructor(ctx) {\n      super(code, message, ctx);\n    }\n\n  };\n}\n\nE('ERR_FS_CP_DIR_TO_NON_DIR', 'Cannot overwrite directory with non-directory');\nE('ERR_FS_CP_EEXIST', 'Target already exists');\nE('ERR_FS_CP_EINVAL', 'Invalid src or dest');\nE('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe');\nE('ERR_FS_CP_NON_DIR_TO_DIR', 'Cannot overwrite non-directory with directory');\nE('ERR_FS_CP_SOCKET', 'Cannot copy a socket file');\nE('ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY', 'Cannot overwrite symlink in subdirectory of self');\nE('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type');\nE('ERR_FS_EISDIR', 'Path is a directory');\nmodule.exports.ERR_INVALID_ARG_TYPE = class ERR_INVALID_ARG_TYPE extends Error {\n  constructor(name, expected, actual) {\n    super();\n    this.code = 'ERR_INVALID_ARG_TYPE';\n    this.message = `The ${name} argument must be ${expected}. Received ${typeof actual}`;\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}