{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = /*#__PURE__*/require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnalyticsPromptModule = exports.AnalyticsEnableModule = exports.AnalyticsDisableModule = void 0;\n\nconst analytics_1 = /*#__PURE__*/require(\"../../../analytics/analytics\");\n\nconst command_module_1 = /*#__PURE__*/require(\"../../../command-builder/command-module\");\n\nclass AnalyticsSettingModule extends command_module_1.CommandModule {\n  builder(localYargs) {\n    return localYargs.option('global', {\n      description: `Configure analytics gathering and reporting globally in the caller's home directory.`,\n      alias: ['g'],\n      type: 'boolean',\n      default: false\n    }).strict();\n  }\n\n}\n\nclass AnalyticsDisableModule extends AnalyticsSettingModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'disable';\n    this.aliases = 'off';\n    this.describe = 'Disables analytics gathering and reporting for the user.';\n  }\n\n  run({\n    global\n  }) {\n    return _asyncToGenerator(function* () {\n      yield (0, analytics_1.setAnalyticsConfig)(global, false);\n      process.stderr.write(yield (0, analytics_1.getAnalyticsInfoString)());\n    })();\n  }\n\n}\n\nexports.AnalyticsDisableModule = AnalyticsDisableModule;\n\nclass AnalyticsEnableModule extends AnalyticsSettingModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'enable';\n    this.aliases = 'on';\n    this.describe = 'Enables analytics gathering and reporting for the user.';\n  }\n\n  run({\n    global\n  }) {\n    return _asyncToGenerator(function* () {\n      yield (0, analytics_1.setAnalyticsConfig)(global, true);\n      process.stderr.write(yield (0, analytics_1.getAnalyticsInfoString)());\n    })();\n  }\n\n}\n\nexports.AnalyticsEnableModule = AnalyticsEnableModule;\n\nclass AnalyticsPromptModule extends AnalyticsSettingModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'prompt';\n    this.describe = 'Prompts the user to set the analytics gathering status interactively.';\n  }\n\n  run({\n    global\n  }) {\n    return _asyncToGenerator(function* () {\n      yield (0, analytics_1.promptAnalytics)(global, true);\n    })();\n  }\n\n}\n\nexports.AnalyticsPromptModule = AnalyticsPromptModule;","map":null,"metadata":{},"sourceType":"script"}