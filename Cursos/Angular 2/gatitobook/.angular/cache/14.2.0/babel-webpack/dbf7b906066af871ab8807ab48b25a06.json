{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = /*#__PURE__*/require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProjectDependencies = exports.findPackageJson = exports.readPackageJson = void 0;\n\nconst fs = __importStar( /*#__PURE__*/require(\"fs\"));\n\nconst path_1 = /*#__PURE__*/require(\"path\");\n\nconst resolve = __importStar( /*#__PURE__*/require(\"resolve\"));\n\nfunction getAllDependencies(pkg) {\n  return new Set([...Object.entries(pkg.dependencies || []), ...Object.entries(pkg.devDependencies || []), ...Object.entries(pkg.peerDependencies || []), ...Object.entries(pkg.optionalDependencies || [])]);\n}\n\nfunction readPackageJson(_x) {\n  return _readPackageJson.apply(this, arguments);\n}\n\nfunction _readPackageJson() {\n  _readPackageJson = _asyncToGenerator(function* (packageJsonPath) {\n    try {\n      return JSON.parse((yield fs.promises.readFile(packageJsonPath)).toString());\n    } catch {\n      return undefined;\n    }\n  });\n  return _readPackageJson.apply(this, arguments);\n}\n\nexports.readPackageJson = readPackageJson;\n\nfunction findPackageJson(workspaceDir, packageName) {\n  try {\n    // avoid require.resolve here, see: https://github.com/angular/angular-cli/pull/18610#issuecomment-681980185\n    const packageJsonPath = resolve.sync(`${packageName}/package.json`, {\n      basedir: workspaceDir\n    });\n    return packageJsonPath;\n  } catch {\n    return undefined;\n  }\n}\n\nexports.findPackageJson = findPackageJson;\n\nfunction getProjectDependencies(_x2) {\n  return _getProjectDependencies.apply(this, arguments);\n}\n\nfunction _getProjectDependencies() {\n  _getProjectDependencies = _asyncToGenerator(function* (dir) {\n    const pkg = yield readPackageJson((0, path_1.join)(dir, 'package.json'));\n\n    if (!pkg) {\n      throw new Error('Could not find package.json');\n    }\n\n    const results = new Map();\n\n    for (const [name, version] of getAllDependencies(pkg)) {\n      const packageJsonPath = findPackageJson(dir, name);\n\n      if (!packageJsonPath) {\n        continue;\n      }\n\n      results.set(name, {\n        name,\n        version,\n        path: (0, path_1.dirname)(packageJsonPath),\n        package: yield readPackageJson(packageJsonPath)\n      });\n    }\n\n    return results;\n  });\n  return _getProjectDependencies.apply(this, arguments);\n}\n\nexports.getProjectDependencies = getProjectDependencies;","map":null,"metadata":{},"sourceType":"script"}