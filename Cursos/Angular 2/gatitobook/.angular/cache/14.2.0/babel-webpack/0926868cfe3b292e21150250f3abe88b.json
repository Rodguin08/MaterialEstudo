{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.htmlSelectorFormat = void 0; // As per https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n// * Without mandatory `-` as the application prefix will generally cover its inclusion\n// * And an allowance for upper alpha characters\n// NOTE: This should eventually be broken out into two formats: full and partial (allows for prefix)\n\nconst unicodeRanges = [[0xc0, 0xd6], [0xd8, 0xf6], [0xf8, 0x37d], [0x37f, 0x1fff], [0x200c, 0x200d], [0x203f, 0x2040], [0x2070, 0x218f], [0x2c00, 0x2fef], [0x3001, 0xd7ff], [0xf900, 0xfdcf], [0xfdf0, 0xfffd], [0x10000, 0xeffff]];\n\nfunction isValidElementName(name) {\n  let regex = '^[a-zA-Z][';\n  regex += '-.0-9_a-zA-Z\\\\u{B7}';\n\n  for (const range of unicodeRanges) {\n    regex += `\\\\u{${range[0].toString(16)}}-\\\\u{${range[1].toString(16)}}`;\n  }\n\n  regex += ']*$';\n  return new RegExp(regex, 'u').test(name);\n}\n\nexports.htmlSelectorFormat = {\n  name: 'html-selector',\n  formatter: {\n    async: false,\n    validate: name => typeof name === 'string' && isValidElementName(name)\n  }\n};","map":null,"metadata":{},"sourceType":"script"}