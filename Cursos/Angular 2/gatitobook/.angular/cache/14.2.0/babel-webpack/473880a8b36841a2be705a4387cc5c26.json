{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = /*#__PURE__*/require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAnalyticsInfoString = exports.createAnalytics = exports.getSharedAnalytics = exports.getAnalytics = exports.promptAnalytics = exports.setAnalyticsConfig = exports.isPackageNameSafeForAnalytics = exports.analyticsPackageSafelist = exports.AnalyticsProperties = void 0;\n\nconst core_1 = /*#__PURE__*/require(\"@angular-devkit/core\");\n\nconst debug_1 = __importDefault( /*#__PURE__*/require(\"debug\"));\n\nconst uuid_1 = /*#__PURE__*/require(\"uuid\");\n\nconst color_1 = /*#__PURE__*/require(\"../utilities/color\");\n\nconst config_1 = /*#__PURE__*/require(\"../utilities/config\");\n\nconst environment_options_1 = /*#__PURE__*/require(\"../utilities/environment-options\");\n\nconst error_1 = /*#__PURE__*/require(\"../utilities/error\");\n\nconst tty_1 = /*#__PURE__*/require(\"../utilities/tty\");\n\nconst version_1 = /*#__PURE__*/require(\"../utilities/version\");\n\nconst analytics_collector_1 = /*#__PURE__*/require(\"./analytics-collector\");\n/* eslint-disable no-console */\n\n\nconst analyticsDebug = /*#__PURE__*/(0, debug_1.default)('ng:analytics'); // Generate analytics, including settings and users.\n\nlet _defaultAngularCliPropertyCache;\n\nexports.AnalyticsProperties = {\n  AngularCliProd: 'UA-8594346-29',\n  AngularCliStaging: 'UA-8594346-32',\n\n  get AngularCliDefault() {\n    if (_defaultAngularCliPropertyCache) {\n      return _defaultAngularCliPropertyCache;\n    }\n\n    const v = version_1.VERSION.full; // The logic is if it's a full version then we should use the prod GA property.\n\n    _defaultAngularCliPropertyCache = /^\\d+\\.\\d+\\.\\d+$/.test(v) && v !== '0.0.0' ? exports.AnalyticsProperties.AngularCliProd : exports.AnalyticsProperties.AngularCliStaging;\n    return _defaultAngularCliPropertyCache;\n  }\n\n};\n/**\n * This is the ultimate safelist for checking if a package name is safe to report to analytics.\n */\n\nexports.analyticsPackageSafelist = [/^@angular\\//, /^@angular-devkit\\//, /^@ngtools\\//, '@schematics/angular'];\n\nfunction isPackageNameSafeForAnalytics(name) {\n  return exports.analyticsPackageSafelist.some(pattern => {\n    if (typeof pattern == 'string') {\n      return pattern === name;\n    } else {\n      return pattern.test(name);\n    }\n  });\n}\n\nexports.isPackageNameSafeForAnalytics = isPackageNameSafeForAnalytics;\n/**\n * Set analytics settings. This does not work if the user is not inside a project.\n * @param global Which config to use. \"global\" for user-level, and \"local\" for project-level.\n * @param value Either a user ID, true to generate a new User ID, or false to disable analytics.\n */\n\nfunction setAnalyticsConfig(_x, _x2) {\n  return _setAnalyticsConfig.apply(this, arguments);\n}\n\nfunction _setAnalyticsConfig() {\n  _setAnalyticsConfig = _asyncToGenerator(function* (global, value) {\n    var _a;\n\n    var _b;\n\n    const level = global ? 'global' : 'local';\n    analyticsDebug('setting %s level analytics to: %s', level, value);\n    const workspace = yield (0, config_1.getWorkspace)(level);\n\n    if (!workspace) {\n      throw new Error(`Could not find ${level} workspace.`);\n    }\n\n    const cli = (_a = (_b = workspace.extensions)['cli']) !== null && _a !== void 0 ? _a : _b['cli'] = {};\n\n    if (!workspace || !core_1.json.isJsonObject(cli)) {\n      throw new Error(`Invalid config found at ${workspace.filePath}. CLI should be an object.`);\n    }\n\n    cli.analytics = value === true ? (0, uuid_1.v4)() : value;\n    yield workspace.save();\n    analyticsDebug('done');\n  });\n  return _setAnalyticsConfig.apply(this, arguments);\n}\n\nexports.setAnalyticsConfig = setAnalyticsConfig;\n/**\n * Prompt the user for usage gathering permission.\n * @param force Whether to ask regardless of whether or not the user is using an interactive shell.\n * @return Whether or not the user was shown a prompt.\n */\n\nfunction promptAnalytics(_x3) {\n  return _promptAnalytics.apply(this, arguments);\n}\n\nfunction _promptAnalytics() {\n  _promptAnalytics = _asyncToGenerator(function* (global, force = false) {\n    analyticsDebug('prompting user');\n    const level = global ? 'global' : 'local';\n    const workspace = yield (0, config_1.getWorkspace)(level);\n\n    if (!workspace) {\n      throw new Error(`Could not find a ${level} workspace. Are you in a project?`);\n    }\n\n    if (force || (0, tty_1.isTTY)()) {\n      const {\n        prompt\n      } = yield Promise.resolve().then(() => __importStar(require('inquirer')));\n      const answers = yield prompt([{\n        type: 'confirm',\n        name: 'analytics',\n        message: core_1.tags.stripIndents`\n          Would you like to share pseudonymous usage data about this project with the Angular Team\n          at Google under Google's Privacy Policy at https://policies.google.com/privacy. For more\n          details and how to change this setting, see https://angular.io/analytics.\n\n        `,\n        default: false\n      }]);\n      yield setAnalyticsConfig(global, answers.analytics);\n\n      if (answers.analytics) {\n        console.log('');\n        console.log(core_1.tags.stripIndent`\n        Thank you for sharing pseudonymous usage data. Should you change your mind, the following\n        command will disable this feature entirely:\n\n            ${color_1.colors.yellow(`ng analytics disable${global ? ' --global' : ''}`)}\n      `);\n        console.log(''); // Send back a ping with the user `optin`.\n\n        const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optin');\n        ua.pageview('/telemetry/project/optin');\n        yield ua.flush();\n      } else {\n        // Send back a ping with the user `optout`. This is the only thing we send.\n        const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optout');\n        ua.pageview('/telemetry/project/optout');\n        yield ua.flush();\n      }\n\n      process.stderr.write(yield getAnalyticsInfoString());\n      return true;\n    }\n\n    return false;\n  });\n  return _promptAnalytics.apply(this, arguments);\n}\n\nexports.promptAnalytics = promptAnalytics;\n/**\n * Get the analytics object for the user.\n *\n * @returns\n * - `AnalyticsCollector` when enabled.\n * - `analytics.NoopAnalytics` when disabled.\n * - `undefined` when not configured.\n */\n\nfunction getAnalytics(_x4) {\n  return _getAnalytics.apply(this, arguments);\n}\n\nfunction _getAnalytics() {\n  _getAnalytics = _asyncToGenerator(function* (level) {\n    var _a;\n\n    analyticsDebug('getAnalytics');\n\n    if (environment_options_1.analyticsDisabled) {\n      analyticsDebug('NG_CLI_ANALYTICS is false');\n      return new core_1.analytics.NoopAnalytics();\n    }\n\n    try {\n      const workspace = yield (0, config_1.getWorkspace)(level);\n      const analyticsConfig = (_a = workspace === null || workspace === void 0 ? void 0 : workspace.getCli()) === null || _a === void 0 ? void 0 : _a['analytics'];\n      analyticsDebug('Workspace Analytics config found: %j', analyticsConfig);\n\n      if (analyticsConfig === false) {\n        return new core_1.analytics.NoopAnalytics();\n      } else if (analyticsConfig === undefined || analyticsConfig === null) {\n        return undefined;\n      } else {\n        let uid = undefined;\n\n        if (typeof analyticsConfig == 'string') {\n          uid = analyticsConfig;\n        } else if (typeof analyticsConfig == 'object' && typeof analyticsConfig['uid'] == 'string') {\n          uid = analyticsConfig['uid'];\n        }\n\n        analyticsDebug('client id: %j', uid);\n\n        if (uid == undefined) {\n          return undefined;\n        }\n\n        return new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, uid);\n      }\n    } catch (err) {\n      (0, error_1.assertIsError)(err);\n      analyticsDebug('Error happened during reading of analytics config: %s', err.message);\n      return undefined;\n    }\n  });\n  return _getAnalytics.apply(this, arguments);\n}\n\nexports.getAnalytics = getAnalytics;\n/**\n * Return the usage analytics sharing setting, which is either a property string (GA-XXXXXXX-XX),\n * or undefined if no sharing.\n */\n\nfunction getSharedAnalytics() {\n  return _getSharedAnalytics.apply(this, arguments);\n}\n\nfunction _getSharedAnalytics() {\n  _getSharedAnalytics = _asyncToGenerator(function* () {\n    var _a;\n\n    analyticsDebug('getSharedAnalytics');\n\n    if (environment_options_1.analyticsShareDisabled) {\n      analyticsDebug('NG_CLI_ANALYTICS is false');\n      return undefined;\n    } // If anything happens we just keep the NOOP analytics.\n\n\n    try {\n      const globalWorkspace = yield (0, config_1.getWorkspace)('global');\n      const analyticsConfig = (_a = globalWorkspace === null || globalWorkspace === void 0 ? void 0 : globalWorkspace.getCli()) === null || _a === void 0 ? void 0 : _a['analyticsSharing'];\n\n      if (!analyticsConfig || !analyticsConfig.tracking || !analyticsConfig.uuid) {\n        return undefined;\n      } else {\n        analyticsDebug('Analytics sharing info: %j', analyticsConfig);\n        return new analytics_collector_1.AnalyticsCollector(analyticsConfig.tracking, analyticsConfig.uuid);\n      }\n    } catch (err) {\n      (0, error_1.assertIsError)(err);\n      analyticsDebug('Error happened during reading of analytics sharing config: %s', err.message);\n      return undefined;\n    }\n  });\n  return _getSharedAnalytics.apply(this, arguments);\n}\n\nexports.getSharedAnalytics = getSharedAnalytics;\n\nfunction createAnalytics(_x5) {\n  return _createAnalytics.apply(this, arguments);\n}\n\nfunction _createAnalytics() {\n  _createAnalytics = _asyncToGenerator(function* (workspace, skipPrompt = false) {\n    // Global config takes precedence over local config only for the disabled check.\n    // IE:\n    // global: disabled & local: enabled = disabled\n    // global: id: 123 & local: id: 456 = 456\n    var _a; // check global\n\n\n    const globalConfig = yield getAnalytics('global');\n\n    if (globalConfig instanceof core_1.analytics.NoopAnalytics) {\n      return globalConfig;\n    }\n\n    let config = globalConfig; // Not disabled globally, check locally or not set globally and command is run outside of workspace example: `ng new`\n\n    if (workspace || globalConfig === undefined) {\n      const level = workspace ? 'local' : 'global';\n      let localOrGlobalConfig = yield getAnalytics(level);\n\n      if (localOrGlobalConfig === undefined) {\n        if (!skipPrompt) {\n          // config is unset, prompt user.\n          // TODO: This should honor the `no-interactive` option.\n          // It is currently not an `ng` option but rather only an option for specific commands.\n          // The concept of `ng`-wide options are needed to cleanly handle this.\n          yield promptAnalytics(!workspace\n          /** global */\n          );\n          localOrGlobalConfig = yield getAnalytics(level);\n        }\n      }\n\n      if (localOrGlobalConfig instanceof core_1.analytics.NoopAnalytics) {\n        return localOrGlobalConfig;\n      } else if (localOrGlobalConfig) {\n        // Favor local settings over global when defined.\n        config = localOrGlobalConfig;\n      }\n    } // Get shared analytics\n    // TODO: evalute if this should be completly removed.\n\n\n    const maybeSharedAnalytics = yield getSharedAnalytics();\n\n    if (config && maybeSharedAnalytics) {\n      return new core_1.analytics.MultiAnalytics([config, maybeSharedAnalytics]);\n    }\n\n    return (_a = config !== null && config !== void 0 ? config : maybeSharedAnalytics) !== null && _a !== void 0 ? _a : new core_1.analytics.NoopAnalytics();\n  });\n  return _createAnalytics.apply(this, arguments);\n}\n\nexports.createAnalytics = createAnalytics;\n\nfunction analyticsConfigValueToHumanFormat(value) {\n  if (value === false) {\n    return 'disabled';\n  } else if (typeof value === 'string' || value === true) {\n    return 'enabled';\n  } else {\n    return 'not set';\n  }\n}\n\nfunction getAnalyticsInfoString() {\n  return _getAnalyticsInfoString.apply(this, arguments);\n}\n\nfunction _getAnalyticsInfoString() {\n  _getAnalyticsInfoString = _asyncToGenerator(function* () {\n    var _a, _b;\n\n    const globalWorkspace = yield (0, config_1.getWorkspace)('global');\n    const localWorkspace = yield (0, config_1.getWorkspace)('local');\n    const globalSetting = (_a = globalWorkspace === null || globalWorkspace === void 0 ? void 0 : globalWorkspace.getCli()) === null || _a === void 0 ? void 0 : _a['analytics'];\n    const localSetting = (_b = localWorkspace === null || localWorkspace === void 0 ? void 0 : localWorkspace.getCli()) === null || _b === void 0 ? void 0 : _b['analytics'];\n    const analyticsInstance = yield createAnalytics(!!localWorkspace\n    /** workspace */\n    , true\n    /** skipPrompt */\n    );\n    return core_1.tags.stripIndents`\n    Global setting: ${analyticsConfigValueToHumanFormat(globalSetting)}\n    Local setting: ${localWorkspace ? analyticsConfigValueToHumanFormat(localSetting) : 'No local workspace configuration file.'}\n    Effective status: ${analyticsInstance instanceof core_1.analytics.NoopAnalytics ? 'disabled' : 'enabled'}\n  ` + '\\n';\n  });\n  return _getAnalyticsInfoString.apply(this, arguments);\n}\n\nexports.getAnalyticsInfoString = getAnalyticsInfoString;","map":null,"metadata":{},"sourceType":"script"}