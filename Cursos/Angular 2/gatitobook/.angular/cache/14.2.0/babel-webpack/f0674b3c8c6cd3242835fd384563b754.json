{"ast":null,"code":"const spawn = require('@npmcli/promise-spawn');\n\nconst promiseRetry = require('promise-retry');\n\nconst log = require('proc-log');\n\nconst makeError = require('./make-error.js');\n\nconst whichGit = require('./which.js');\n\nconst makeOpts = require('./opts.js');\n\nmodule.exports = (gitArgs, opts = {}) => {\n  const gitPath = whichGit(opts);\n\n  if (gitPath instanceof Error) {\n    return Promise.reject(gitPath);\n  } // undocumented option, mostly only here for tests\n\n\n  const args = opts.allowReplace || gitArgs[0] === '--no-replace-objects' ? gitArgs : ['--no-replace-objects', ...gitArgs];\n  let retryOpts = opts.retry;\n\n  if (retryOpts === null || retryOpts === undefined) {\n    retryOpts = {\n      retries: opts.fetchRetries || 2,\n      factor: opts.fetchRetryFactor || 10,\n      maxTimeout: opts.fetchRetryMaxtimeout || 60000,\n      minTimeout: opts.fetchRetryMintimeout || 1000\n    };\n  }\n\n  return promiseRetry((retryFn, number) => {\n    if (number !== 1) {\n      log.silly('git', `Retrying git command: ${args.join(' ')} attempt # ${number}`);\n    }\n\n    return spawn(gitPath, args, makeOpts(opts)).catch(er => {\n      const gitError = makeError(er);\n\n      if (!gitError.shouldRetry(number)) {\n        throw gitError;\n      }\n\n      retryFn(gitError);\n    });\n  }, retryOpts);\n};","map":null,"metadata":{},"sourceType":"script"}