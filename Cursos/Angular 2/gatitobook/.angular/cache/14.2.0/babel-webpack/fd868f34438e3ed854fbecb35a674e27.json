{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDispatcher = void 0;\n\nconst api_1 = require(\"./api\");\n\nconst exception_1 = require(\"./exception\");\n/**\n * OnReady a dispatcher that can dispatch to a sub job, depending on conditions.\n * @param options\n */\n\n\nfunction createDispatcher(options = {}) {\n  let defaultDelegate = null;\n  const conditionalDelegateList = [];\n  const job = Object.assign((argument, context) => {\n    const maybeDelegate = conditionalDelegateList.find(([predicate]) => predicate(argument));\n    let delegate = null;\n\n    if (maybeDelegate) {\n      delegate = context.scheduler.schedule(maybeDelegate[1], argument);\n    } else if (defaultDelegate) {\n      delegate = context.scheduler.schedule(defaultDelegate, argument);\n    } else {\n      throw new exception_1.JobDoesNotExistException('<null>');\n    }\n\n    context.inboundBus.subscribe(delegate.inboundBus);\n    return delegate.outboundBus;\n  }, {\n    jobDescription: options\n  });\n  return Object.assign(job, {\n    setDefaultJob(name) {\n      if ((0, api_1.isJobHandler)(name)) {\n        name = name.jobDescription.name === undefined ? null : name.jobDescription.name;\n      }\n\n      defaultDelegate = name;\n    },\n\n    addConditionalJob(predicate, name) {\n      conditionalDelegateList.push([predicate, name]);\n    } // TODO: Remove return-only generic from createDispatcher() API.\n\n\n  });\n}\n\nexports.createDispatcher = createDispatcher;","map":null,"metadata":{},"sourceType":"script"}