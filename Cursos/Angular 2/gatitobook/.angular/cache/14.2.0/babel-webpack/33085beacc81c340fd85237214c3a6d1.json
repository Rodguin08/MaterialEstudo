{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = /*#__PURE__*/require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runCommand = void 0;\n\nconst yargs_1 = __importDefault( /*#__PURE__*/require(\"yargs\"));\n\nconst helpers_1 = /*#__PURE__*/require(\"yargs/helpers\");\n\nconst cli_1 = /*#__PURE__*/require(\"../commands/add/cli\");\n\nconst cli_2 = /*#__PURE__*/require(\"../commands/analytics/cli\");\n\nconst cli_3 = /*#__PURE__*/require(\"../commands/build/cli\");\n\nconst cli_4 = /*#__PURE__*/require(\"../commands/cache/cli\");\n\nconst cli_5 = /*#__PURE__*/require(\"../commands/completion/cli\");\n\nconst cli_6 = /*#__PURE__*/require(\"../commands/config/cli\");\n\nconst cli_7 = /*#__PURE__*/require(\"../commands/deploy/cli\");\n\nconst cli_8 = /*#__PURE__*/require(\"../commands/doc/cli\");\n\nconst cli_9 = /*#__PURE__*/require(\"../commands/e2e/cli\");\n\nconst cli_10 = /*#__PURE__*/require(\"../commands/extract-i18n/cli\");\n\nconst cli_11 = /*#__PURE__*/require(\"../commands/generate/cli\");\n\nconst cli_12 = /*#__PURE__*/require(\"../commands/lint/cli\");\n\nconst cli_13 = /*#__PURE__*/require(\"../commands/make-this-awesome/cli\");\n\nconst cli_14 = /*#__PURE__*/require(\"../commands/new/cli\");\n\nconst cli_15 = /*#__PURE__*/require(\"../commands/run/cli\");\n\nconst cli_16 = /*#__PURE__*/require(\"../commands/serve/cli\");\n\nconst cli_17 = /*#__PURE__*/require(\"../commands/test/cli\");\n\nconst cli_18 = /*#__PURE__*/require(\"../commands/update/cli\");\n\nconst cli_19 = /*#__PURE__*/require(\"../commands/version/cli\");\n\nconst color_1 = /*#__PURE__*/require(\"../utilities/color\");\n\nconst config_1 = /*#__PURE__*/require(\"../utilities/config\");\n\nconst error_1 = /*#__PURE__*/require(\"../utilities/error\");\n\nconst package_manager_1 = /*#__PURE__*/require(\"../utilities/package-manager\");\n\nconst command_module_1 = /*#__PURE__*/require(\"./command-module\");\n\nconst command_1 = /*#__PURE__*/require(\"./utilities/command\");\n\nconst json_help_1 = /*#__PURE__*/require(\"./utilities/json-help\");\n\nconst normalize_options_middleware_1 = /*#__PURE__*/require(\"./utilities/normalize-options-middleware\");\n\nconst COMMANDS = /*#__PURE__*/[cli_19.VersionCommandModule, cli_8.DocCommandModule, cli_13.AwesomeCommandModule, cli_6.ConfigCommandModule, cli_2.AnalyticsCommandModule, cli_1.AddCommandModule, cli_11.GenerateCommandModule, cli_3.BuildCommandModule, cli_9.E2eCommandModule, cli_17.TestCommandModule, cli_16.ServeCommandModule, cli_10.ExtractI18nCommandModule, cli_7.DeployCommandModule, cli_12.LintCommandModule, cli_14.NewCommandModule, cli_18.UpdateCommandModule, cli_15.RunCommandModule, cli_4.CacheCommandModule, cli_5.CompletionCommandModule].sort(); // Will be sorted by class name.\n\nconst yargsParser = helpers_1.Parser;\n\nfunction runCommand(_x, _x2) {\n  return _runCommand.apply(this, arguments);\n}\n\nfunction _runCommand() {\n  _runCommand = _asyncToGenerator(function* (args, logger) {\n    var _a, _b;\n\n    const {\n      $0,\n      _,\n      help = false,\n      jsonHelp = false,\n      getYargsCompletions = false,\n      ...rest\n    } = yargsParser(args, {\n      boolean: ['help', 'json-help', 'get-yargs-completions'],\n      alias: {\n        'collection': 'c'\n      }\n    }); // When `getYargsCompletions` is true the scriptName 'ng' at index 0 is not removed.\n\n    const positional = getYargsCompletions ? _.slice(1) : _;\n    let workspace;\n    let globalConfiguration;\n\n    try {\n      [workspace, globalConfiguration] = yield Promise.all([(0, config_1.getWorkspace)('local'), (0, config_1.getWorkspace)('global')]);\n    } catch (e) {\n      (0, error_1.assertIsError)(e);\n      logger.fatal(e.message);\n      return 1;\n    }\n\n    const root = (_a = workspace === null || workspace === void 0 ? void 0 : workspace.basePath) !== null && _a !== void 0 ? _a : process.cwd();\n    const context = {\n      globalConfiguration,\n      workspace,\n      logger,\n      currentDirectory: process.cwd(),\n      root,\n      packageManager: new package_manager_1.PackageManagerUtils({\n        globalConfiguration,\n        workspace,\n        root\n      }),\n      args: {\n        positional: positional.map(v => v.toString()),\n        options: {\n          help,\n          jsonHelp,\n          getYargsCompletions,\n          ...rest\n        }\n      }\n    };\n    let localYargs = (0, yargs_1.default)(args);\n\n    for (const CommandModule of COMMANDS) {\n      localYargs = (0, command_1.addCommandModuleToYargs)(localYargs, CommandModule, context);\n    }\n\n    if (jsonHelp) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const usageInstance = localYargs.getInternalMethods().getUsageInstance();\n\n      usageInstance.help = () => (0, json_help_1.jsonHelpUsage)();\n    }\n\n    yield localYargs.scriptName('ng') // https://github.com/yargs/yargs/blob/main/docs/advanced.md#customizing-yargs-parser\n    .parserConfiguration({\n      'populate--': true,\n      'unknown-options-as-args': false,\n      'dot-notation': false,\n      'boolean-negation': true,\n      'strip-aliased': true,\n      'strip-dashed': true,\n      'camel-case-expansion': false\n    }).option('json-help', {\n      describe: 'Show help in JSON format.',\n      implies: ['help'],\n      hidden: true,\n      type: 'boolean'\n    }).help('help', 'Shows a help message for this command in the console.') // A complete list of strings can be found: https://github.com/yargs/yargs/blob/main/locales/en.json\n    .updateStrings({\n      'Commands:': color_1.colors.cyan('Commands:'),\n      'Options:': color_1.colors.cyan('Options:'),\n      'Positionals:': color_1.colors.cyan('Arguments:'),\n      'deprecated': color_1.colors.yellow('deprecated'),\n      'deprecated: %s': color_1.colors.yellow('deprecated:') + ' %s',\n      'Did you mean %s?': 'Unknown command. Did you mean %s?'\n    }).epilogue('For more information, see https://angular.io/cli/.\\n').demandCommand(1, command_1.demandCommandFailureMessage).recommendCommands().middleware(normalize_options_middleware_1.normalizeOptionsMiddleware).version(false).showHelpOnFail(false).strict().fail((msg, err) => {\n      throw msg ? // Validation failed example: `Unknown argument:`\n      new command_module_1.CommandModuleError(msg) : // Unknown exception, re-throw.\n      err;\n    }).wrap(yargs_1.default.terminalWidth()).parseAsync();\n    return (_b = process.exitCode) !== null && _b !== void 0 ? _b : 0;\n  });\n  return _runCommand.apply(this, arguments);\n}\n\nexports.runCommand = runCommand;","map":null,"metadata":{},"sourceType":"script"}