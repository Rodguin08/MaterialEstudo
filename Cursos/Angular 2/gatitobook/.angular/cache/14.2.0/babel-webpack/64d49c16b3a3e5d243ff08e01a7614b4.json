{"ast":null,"code":"'use strict';\n\nconst http = require('http');\n\nconst {\n  STATUS_CODES\n} = http;\n\nconst Headers = require('./headers.js');\n\nconst Body = require('./body.js');\n\nconst {\n  clone,\n  extractContentType\n} = Body;\nconst INTERNALS = Symbol('Response internals');\n\nclass Response extends Body {\n  constructor(body = null, opts = {}) {\n    super(body, opts);\n    const status = opts.status || 200;\n    const headers = new Headers(opts.headers);\n\n    if (body !== null && body !== undefined && !headers.has('Content-Type')) {\n      const contentType = extractContentType(body);\n\n      if (contentType) {\n        headers.append('Content-Type', contentType);\n      }\n    }\n\n    this[INTERNALS] = {\n      url: opts.url,\n      status,\n      statusText: opts.statusText || STATUS_CODES[status],\n      headers,\n      counter: opts.counter,\n      trailer: Promise.resolve(opts.trailer || new Headers())\n    };\n  }\n\n  get trailer() {\n    return this[INTERNALS].trailer;\n  }\n\n  get url() {\n    return this[INTERNALS].url || '';\n  }\n\n  get status() {\n    return this[INTERNALS].status;\n  }\n\n  get ok() {\n    return this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n  }\n\n  get redirected() {\n    return this[INTERNALS].counter > 0;\n  }\n\n  get statusText() {\n    return this[INTERNALS].statusText;\n  }\n\n  get headers() {\n    return this[INTERNALS].headers;\n  }\n\n  clone() {\n    return new Response(clone(this), {\n      url: this.url,\n      status: this.status,\n      statusText: this.statusText,\n      headers: this.headers,\n      ok: this.ok,\n      redirected: this.redirected,\n      trailer: this.trailer\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Response';\n  }\n\n}\n\nmodule.exports = Response;\nObject.defineProperties(Response.prototype, {\n  url: {\n    enumerable: true\n  },\n  status: {\n    enumerable: true\n  },\n  ok: {\n    enumerable: true\n  },\n  redirected: {\n    enumerable: true\n  },\n  statusText: {\n    enumerable: true\n  },\n  headers: {\n    enumerable: true\n  },\n  clone: {\n    enumerable: true\n  }\n});","map":null,"metadata":{},"sourceType":"script"}