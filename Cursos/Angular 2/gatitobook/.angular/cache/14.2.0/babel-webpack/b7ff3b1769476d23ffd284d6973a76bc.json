{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseJson = exports.readAndParseJson = exports.JSONFile = void 0;\n\nconst fs_1 = /*#__PURE__*/require(\"fs\");\n\nconst jsonc_parser_1 = /*#__PURE__*/require(\"jsonc-parser\");\n/** @internal */\n\n\nclass JSONFile {\n  constructor(path) {\n    this.path = path;\n    const buffer = (0, fs_1.readFileSync)(this.path);\n\n    if (buffer) {\n      this.content = buffer.toString();\n    } else {\n      throw new Error(`Could not read '${path}'.`);\n    }\n  }\n\n  get JsonAst() {\n    if (this._jsonAst) {\n      return this._jsonAst;\n    }\n\n    const errors = [];\n    this._jsonAst = (0, jsonc_parser_1.parseTree)(this.content, errors, {\n      allowTrailingComma: true\n    });\n\n    if (errors.length) {\n      formatError(this.path, errors);\n    }\n\n    return this._jsonAst;\n  }\n\n  get(jsonPath) {\n    const jsonAstNode = this.JsonAst;\n\n    if (!jsonAstNode) {\n      return undefined;\n    }\n\n    if (jsonPath.length === 0) {\n      return (0, jsonc_parser_1.getNodeValue)(jsonAstNode);\n    }\n\n    const node = (0, jsonc_parser_1.findNodeAtLocation)(jsonAstNode, jsonPath);\n    return node === undefined ? undefined : (0, jsonc_parser_1.getNodeValue)(node);\n  }\n\n  modify(jsonPath, value, insertInOrder) {\n    if (value === undefined && this.get(jsonPath) === undefined) {\n      // Cannot remove a value which doesn't exist.\n      return false;\n    }\n\n    let getInsertionIndex;\n\n    if (insertInOrder === undefined) {\n      const property = jsonPath.slice(-1)[0];\n\n      getInsertionIndex = properties => [...properties, property].sort().findIndex(p => p === property);\n    } else if (insertInOrder !== false) {\n      getInsertionIndex = insertInOrder;\n    }\n\n    const edits = (0, jsonc_parser_1.modify)(this.content, jsonPath, value, {\n      getInsertionIndex,\n      // TODO: use indentation from original file.\n      formattingOptions: {\n        insertSpaces: true,\n        tabSize: 2\n      }\n    });\n\n    if (edits.length === 0) {\n      return false;\n    }\n\n    this.content = (0, jsonc_parser_1.applyEdits)(this.content, edits);\n    this._jsonAst = undefined;\n    return true;\n  }\n\n  save() {\n    (0, fs_1.writeFileSync)(this.path, this.content);\n  }\n\n}\n\nexports.JSONFile = JSONFile; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction readAndParseJson(path) {\n  const errors = [];\n  const content = (0, jsonc_parser_1.parse)((0, fs_1.readFileSync)(path, 'utf-8'), errors, {\n    allowTrailingComma: true\n  });\n\n  if (errors.length) {\n    formatError(path, errors);\n  }\n\n  return content;\n}\n\nexports.readAndParseJson = readAndParseJson;\n\nfunction formatError(path, errors) {\n  const {\n    error,\n    offset\n  } = errors[0];\n  throw new Error(`Failed to parse \"${path}\" as JSON AST Object. ${(0, jsonc_parser_1.printParseErrorCode)(error)} at location: ${offset}.`);\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction parseJson(content) {\n  return (0, jsonc_parser_1.parse)(content, undefined, {\n    allowTrailingComma: true\n  });\n}\n\nexports.parseJson = parseJson;","map":null,"metadata":{},"sourceType":"script"}