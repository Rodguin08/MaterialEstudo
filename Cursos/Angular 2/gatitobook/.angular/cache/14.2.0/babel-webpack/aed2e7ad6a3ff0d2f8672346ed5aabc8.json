{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.jsonHelpUsage = void 0;\n\nconst yargs_1 = __importDefault( /*#__PURE__*/require(\"yargs\"));\n\nconst yargsDefaultCommandRegExp = /^\\$0|\\*/;\n\nfunction jsonHelpUsage() {\n  var _a, _b, _c, _d, _e; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  const localYargs = yargs_1.default;\n  const {\n    deprecatedOptions,\n    alias: aliases,\n    array,\n    string,\n    boolean,\n    number,\n    choices,\n    demandedOptions,\n    default: defaultVal,\n    hiddenOptions = []\n  } = localYargs.getOptions();\n  const internalMethods = localYargs.getInternalMethods();\n  const usageInstance = internalMethods.getUsageInstance();\n  const context = internalMethods.getContext();\n  const descriptions = usageInstance.getDescriptions();\n  const groups = localYargs.getGroups();\n  const positional = groups[usageInstance.getPositionalGroupName()];\n  const hidden = new Set(hiddenOptions);\n  const normalizeOptions = [];\n  const allAliases = new Set([...Object.values(aliases).flat()]);\n\n  for (const [names, type] of [[array, 'array'], [string, 'string'], [boolean, 'boolean'], [number, 'number']]) {\n    for (const name of names) {\n      if (allAliases.has(name) || hidden.has(name)) {\n        // Ignore hidden, aliases and already visited option.\n        continue;\n      }\n\n      const positionalIndex = (_a = positional === null || positional === void 0 ? void 0 : positional.indexOf(name)) !== null && _a !== void 0 ? _a : -1;\n      const alias = aliases[name];\n      normalizeOptions.push({\n        name,\n        type,\n        deprecated: deprecatedOptions[name],\n        aliases: (alias === null || alias === void 0 ? void 0 : alias.length) > 0 ? alias : undefined,\n        default: defaultVal[name],\n        required: demandedOptions[name],\n        enum: choices[name],\n        description: (_b = descriptions[name]) === null || _b === void 0 ? void 0 : _b.replace('__yargsString__:', ''),\n        positional: positionalIndex >= 0 ? positionalIndex : undefined\n      });\n    }\n  } // https://github.com/yargs/yargs/blob/00e4ebbe3acd438e73fdb101e75b4f879eb6d345/lib/usage.ts#L124\n\n\n  const subcommands = usageInstance.getCommands().map(([name, rawDescription, isDefault, aliases, deprecated]) => ({\n    name: name.split(' ', 1)[0].replace(yargsDefaultCommandRegExp, ''),\n    command: name.replace(yargsDefaultCommandRegExp, ''),\n    default: isDefault || undefined,\n    ...parseDescription(rawDescription),\n    aliases,\n    deprecated\n  })).sort((a, b) => a.name.localeCompare(b.name));\n  const [command, rawDescription] = (_c = usageInstance.getUsage()[0]) !== null && _c !== void 0 ? _c : [];\n  const defaultSubCommand = (_e = (_d = subcommands.find(x => x.default)) === null || _d === void 0 ? void 0 : _d.command) !== null && _e !== void 0 ? _e : '';\n  const otherSubcommands = subcommands.filter(s => !s.default);\n  const output = {\n    name: [...context.commands].pop(),\n    command: `${command === null || command === void 0 ? void 0 : command.replace(yargsDefaultCommandRegExp, localYargs['$0'])}${defaultSubCommand}`,\n    ...parseDescription(rawDescription),\n    options: normalizeOptions.sort((a, b) => a.name.localeCompare(b.name)),\n    subcommands: otherSubcommands.length ? otherSubcommands : undefined\n  };\n  return JSON.stringify(output, undefined, 2);\n}\n\nexports.jsonHelpUsage = jsonHelpUsage;\n\nfunction parseDescription(rawDescription) {\n  try {\n    const {\n      longDescription,\n      describe: shortDescription,\n      longDescriptionRelativePath\n    } = JSON.parse(rawDescription);\n    return {\n      shortDescription,\n      longDescriptionRelativePath,\n      longDescription\n    };\n  } catch {\n    return {\n      shortDescription: rawDescription\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"script"}