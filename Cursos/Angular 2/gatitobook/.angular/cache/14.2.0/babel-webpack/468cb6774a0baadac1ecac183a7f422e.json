{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst child_process_1 = require(\"child_process\");\n\nconst path = __importStar(require(\"path\"));\n\nfunction default_1(factoryOptions = {}) {\n  const rootDirectory = factoryOptions.rootDirectory || process.cwd();\n  return /*#__PURE__*/_asyncToGenerator(function* (options = {}, context) {\n    const authorName = options.authorName;\n    const authorEmail = options.authorEmail;\n\n    const execute = (args, ignoreErrorStream) => {\n      const outputStream = 'ignore';\n      const errorStream = ignoreErrorStream ? 'ignore' : process.stderr;\n      const spawnOptions = {\n        stdio: [process.stdin, outputStream, errorStream],\n        shell: true,\n        cwd: path.join(rootDirectory, options.workingDirectory || ''),\n        env: { ...process.env,\n          ...(authorName ? {\n            GIT_AUTHOR_NAME: authorName,\n            GIT_COMMITTER_NAME: authorName\n          } : {}),\n          ...(authorEmail ? {\n            GIT_AUTHOR_EMAIL: authorEmail,\n            GIT_COMMITTER_EMAIL: authorEmail\n          } : {})\n        }\n      };\n      return new Promise((resolve, reject) => {\n        (0, child_process_1.spawn)('git', args, spawnOptions).on('close', code => {\n          if (code === 0) {\n            resolve();\n          } else {\n            reject(code);\n          }\n        });\n      });\n    };\n\n    const hasCommand = yield execute(['--version']).then(() => true, () => false);\n\n    if (!hasCommand) {\n      return;\n    }\n\n    const insideRepo = yield execute(['rev-parse', '--is-inside-work-tree'], true).then(() => true, () => false);\n\n    if (insideRepo) {\n      context.logger.info(core_1.tags.oneLine`\n        Directory is already under version control.\n        Skipping initialization of git.\n      `);\n      return;\n    } // if git is not found or an error was thrown during the `git`\n    // init process just swallow any errors here\n    // NOTE: This will be removed once task error handling is implemented\n\n\n    try {\n      yield execute(['init']);\n      yield execute(['add', '.']);\n\n      if (options.commit) {\n        const message = options.message || 'initial commit';\n        yield execute(['commit', `-m \"${message}\"`]);\n      }\n\n      context.logger.info('Successfully initialized git.');\n    } catch {}\n  });\n}\n\nexports.default = default_1;","map":null,"metadata":{},"sourceType":"script"}