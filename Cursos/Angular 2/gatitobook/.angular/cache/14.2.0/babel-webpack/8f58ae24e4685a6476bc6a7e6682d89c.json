{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchematicImpl = exports.InvalidSchematicsNameException = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst call_1 = require(\"../rules/call\");\n\nconst scoped_1 = require(\"../tree/scoped\");\n\nclass InvalidSchematicsNameException extends core_1.BaseException {\n  constructor(name) {\n    super(`Schematics has invalid name: \"${name}\".`);\n  }\n\n}\n\nexports.InvalidSchematicsNameException = InvalidSchematicsNameException;\n\nclass SchematicImpl {\n  constructor(_description, _factory, _collection, _engine) {\n    this._description = _description;\n    this._factory = _factory;\n    this._collection = _collection;\n    this._engine = _engine;\n\n    if (!_description.name.match(/^[-@/_.a-zA-Z0-9]+$/)) {\n      throw new InvalidSchematicsNameException(_description.name);\n    }\n  }\n\n  get description() {\n    return this._description;\n  }\n\n  get collection() {\n    return this._collection;\n  }\n\n  call(options, host, parentContext, executionOptions) {\n    const context = this._engine.createContext(this, parentContext, executionOptions);\n\n    return host.pipe((0, operators_1.first)(), (0, operators_1.concatMap)(tree => this._engine.transformOptions(this, options, context).pipe((0, operators_1.map)(o => [tree, o]))), (0, operators_1.concatMap)(([tree, transformedOptions]) => {\n      let input;\n      let scoped = false;\n\n      if (executionOptions && executionOptions.scope) {\n        scoped = true;\n        input = new scoped_1.ScopedTree(tree, executionOptions.scope);\n      } else {\n        input = tree;\n      }\n\n      return (0, call_1.callRule)(this._factory(transformedOptions), input, context).pipe((0, operators_1.map)(output => {\n        if (output === input) {\n          return tree;\n        } else if (scoped) {\n          tree.merge(output);\n          return tree;\n        } else {\n          return output;\n        }\n      }));\n    }));\n  }\n\n}\n\nexports.SchematicImpl = SchematicImpl;","map":null,"metadata":{},"sourceType":"script"}