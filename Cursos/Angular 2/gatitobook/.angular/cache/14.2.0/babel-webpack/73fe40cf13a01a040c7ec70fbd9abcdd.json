{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeSymbol = exports.FileVisitorCancelToken = exports.MergeStrategy = void 0;\nvar MergeStrategy;\n\n(function (MergeStrategy) {\n  MergeStrategy[MergeStrategy[\"AllowOverwriteConflict\"] = 2] = \"AllowOverwriteConflict\";\n  MergeStrategy[MergeStrategy[\"AllowCreationConflict\"] = 4] = \"AllowCreationConflict\";\n  MergeStrategy[MergeStrategy[\"AllowDeleteConflict\"] = 8] = \"AllowDeleteConflict\"; // Uses the default strategy.\n\n  MergeStrategy[MergeStrategy[\"Default\"] = 0] = \"Default\"; // Error out if 2 files have the same path. It is useful to have a different value than\n  // Default in this case as the tooling Default might differ.\n\n  MergeStrategy[MergeStrategy[\"Error\"] = 1] = \"Error\"; // Only content conflicts are overwritten.\n\n  MergeStrategy[MergeStrategy[\"ContentOnly\"] = 2] = \"ContentOnly\"; // Overwrite everything with the latest change.\n\n  MergeStrategy[MergeStrategy[\"Overwrite\"] = 14] = \"Overwrite\";\n})(MergeStrategy = exports.MergeStrategy || (exports.MergeStrategy = {})); // eslint-disable-next-line @typescript-eslint/no-inferrable-types\n\n\nexports.FileVisitorCancelToken = Symbol();\n\nexports.TreeSymbol = function () {\n  const globalSymbol = typeof window == 'object' && window.window === window && window.Symbol || typeof self == 'object' && self.self === self && self.Symbol || typeof global == 'object' && global.global === global && global.Symbol;\n\n  if (!globalSymbol) {\n    return Symbol('schematic-tree');\n  }\n\n  if (!globalSymbol.schematicTree) {\n    globalSymbol.schematicTree = Symbol('schematic-tree');\n  }\n\n  return globalSymbol.schematicTree;\n}(); // eslint-disable-next-line @typescript-eslint/no-namespace\n\n\nvar Tree;\n\n(function (Tree) {\n  function isTree(maybeTree) {\n    return exports.TreeSymbol in maybeTree;\n  }\n\n  Tree.isTree = isTree;\n})(Tree || (Tree = {}));","map":null,"metadata":{},"sourceType":"script"}