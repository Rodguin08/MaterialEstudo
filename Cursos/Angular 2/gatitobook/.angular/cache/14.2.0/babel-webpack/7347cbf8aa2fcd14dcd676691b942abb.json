{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = /*#__PURE__*/require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PackageManagerUtils = void 0;\n\nconst core_1 = /*#__PURE__*/require(\"@angular-devkit/core\");\n\nconst child_process_1 = /*#__PURE__*/require(\"child_process\");\n\nconst fs_1 = /*#__PURE__*/require(\"fs\");\n\nconst os_1 = /*#__PURE__*/require(\"os\");\n\nconst path_1 = /*#__PURE__*/require(\"path\");\n\nconst semver_1 = /*#__PURE__*/require(\"semver\");\n\nconst workspace_schema_1 = /*#__PURE__*/require(\"../../lib/config/workspace-schema\");\n\nconst config_1 = /*#__PURE__*/require(\"./config\");\n\nconst memoize_1 = /*#__PURE__*/require(\"./memoize\");\n\nconst spinner_1 = /*#__PURE__*/require(\"./spinner\");\n\nclass PackageManagerUtils {\n  constructor(context) {\n    this.context = context;\n  }\n  /** Get the package manager name. */\n\n\n  get name() {\n    return this.getName();\n  }\n  /** Get the package manager version. */\n\n\n  get version() {\n    return this.getVersion(this.name);\n  }\n  /**\n   * Checks if the package manager is supported. If not, display a warning.\n   */\n\n\n  ensureCompatibility() {\n    if (this.name !== workspace_schema_1.PackageManager.Npm) {\n      return;\n    }\n\n    try {\n      const version = (0, semver_1.valid)(this.version);\n\n      if (!version) {\n        return;\n      }\n\n      if ((0, semver_1.satisfies)(version, '>=7 <7.5.6')) {\n        // eslint-disable-next-line no-console\n        console.warn(`npm version ${version} detected.` + ' When using npm 7 with the Angular CLI, npm version 7.5.6 or higher is recommended.');\n      }\n    } catch {// npm is not installed.\n    }\n  }\n  /** Install a single package. */\n\n\n  install(packageName, save = true, extraArgs = [], cwd) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const packageManagerArgs = _this.getArguments();\n\n      const installArgs = [packageManagerArgs.install, packageName];\n\n      if (save === 'devDependencies') {\n        installArgs.push(packageManagerArgs.saveDev);\n      }\n\n      return _this.run([...installArgs, ...extraArgs], {\n        cwd,\n        silent: true\n      });\n    })();\n  }\n  /** Install all packages. */\n\n\n  installAll(extraArgs = [], cwd) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const packageManagerArgs = _this2.getArguments();\n\n      const installArgs = [];\n\n      if (packageManagerArgs.installAll) {\n        installArgs.push(packageManagerArgs.installAll);\n      }\n\n      return _this2.run([...installArgs, ...extraArgs], {\n        cwd,\n        silent: true\n      });\n    })();\n  }\n  /** Install a single package temporary. */\n\n\n  installTemp(packageName, extraArgs) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const tempPath = yield fs_1.promises.mkdtemp((0, path_1.join)((0, fs_1.realpathSync)((0, os_1.tmpdir)()), 'angular-cli-packages-')); // clean up temp directory on process exit\n\n      process.on('exit', () => {\n        try {\n          (0, fs_1.rmSync)(tempPath, {\n            recursive: true,\n            maxRetries: 3\n          });\n        } catch {}\n      }); // NPM will warn when a `package.json` is not found in the install directory\n      // Example:\n      // npm WARN enoent ENOENT: no such file or directory, open '/tmp/.ng-temp-packages-84Qi7y/package.json'\n      // npm WARN .ng-temp-packages-84Qi7y No description\n      // npm WARN .ng-temp-packages-84Qi7y No repository field.\n      // npm WARN .ng-temp-packages-84Qi7y No license field.\n      // While we can use `npm init -y` we will end up needing to update the 'package.json' anyways\n      // because of missing fields.\n\n      yield fs_1.promises.writeFile((0, path_1.join)(tempPath, 'package.json'), JSON.stringify({\n        name: 'temp-cli-install',\n        description: 'temp-cli-install',\n        repository: 'temp-cli-install',\n        license: 'MIT'\n      })); // setup prefix/global modules path\n\n      const packageManagerArgs = _this3.getArguments();\n\n      const tempNodeModules = (0, path_1.join)(tempPath, 'node_modules'); // Yarn will not append 'node_modules' to the path\n\n      const prefixPath = _this3.name === workspace_schema_1.PackageManager.Yarn ? tempNodeModules : tempPath;\n      const installArgs = [...(extraArgs !== null && extraArgs !== void 0 ? extraArgs : []), `${packageManagerArgs.prefix}=\"${prefixPath}\"`, packageManagerArgs.noLockfile];\n      return {\n        success: yield _this3.install(packageName, true, installArgs, tempPath),\n        tempNodeModules\n      };\n    })();\n  }\n\n  getArguments() {\n    switch (this.name) {\n      case workspace_schema_1.PackageManager.Yarn:\n        return {\n          saveDev: '--dev',\n          install: 'add',\n          prefix: '--modules-folder',\n          noLockfile: '--no-lockfile'\n        };\n\n      case workspace_schema_1.PackageManager.Pnpm:\n        return {\n          saveDev: '--save-dev',\n          install: 'add',\n          installAll: 'install',\n          prefix: '--prefix',\n          noLockfile: '--no-lockfile'\n        };\n\n      default:\n        return {\n          saveDev: '--save-dev',\n          install: 'install',\n          installAll: 'install',\n          prefix: '--prefix',\n          noLockfile: '--no-package-lock'\n        };\n    }\n  }\n\n  run(args, options = {}) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        cwd = process.cwd(),\n        silent = false\n      } = options;\n      const spinner = new spinner_1.Spinner();\n      spinner.start('Installing packages...');\n      return new Promise(resolve => {\n        var _a, _b;\n\n        const bufferedOutput = [];\n        const childProcess = (0, child_process_1.spawn)(_this4.name, args, {\n          // Always pipe stderr to allow for failures to be reported\n          stdio: silent ? ['ignore', 'ignore', 'pipe'] : 'pipe',\n          shell: true,\n          cwd\n        }).on('close', code => {\n          if (code === 0) {\n            spinner.succeed('Packages successfully installed.');\n            resolve(true);\n          } else {\n            spinner.stop();\n            bufferedOutput.forEach(({\n              stream,\n              data\n            }) => stream.write(data));\n            spinner.fail('Packages installation failed, see above.');\n            resolve(false);\n          }\n        });\n        (_a = childProcess.stdout) === null || _a === void 0 ? void 0 : _a.on('data', data => bufferedOutput.push({\n          stream: process.stdout,\n          data: data\n        }));\n        (_b = childProcess.stderr) === null || _b === void 0 ? void 0 : _b.on('data', data => bufferedOutput.push({\n          stream: process.stderr,\n          data: data\n        }));\n      });\n    })();\n  }\n\n  getVersion(name) {\n    try {\n      return (0, child_process_1.execSync)(`${name} --version`, {\n        encoding: 'utf8',\n        stdio: ['ignore', 'pipe', 'ignore'],\n        env: { ...process.env,\n          //  NPM updater notifier will prevents the child process from closing until it timeout after 3 minutes.\n          NO_UPDATE_NOTIFIER: '1',\n          NPM_CONFIG_UPDATE_NOTIFIER: 'false'\n        }\n      }).trim();\n    } catch {\n      return undefined;\n    }\n  }\n\n  getName() {\n    const packageManager = this.getConfiguredPackageManager();\n\n    if (packageManager) {\n      return packageManager;\n    }\n\n    const hasNpmLock = this.hasLockfile(workspace_schema_1.PackageManager.Npm);\n    const hasYarnLock = this.hasLockfile(workspace_schema_1.PackageManager.Yarn);\n    const hasPnpmLock = this.hasLockfile(workspace_schema_1.PackageManager.Pnpm); // PERF NOTE: `this.getVersion` spawns the package a the child_process which can take around ~300ms at times.\n    // Therefore, we should only call this method when needed. IE: don't call `this.getVersion(PackageManager.Pnpm)` unless truly needed.\n    // The result of this method is not stored in a variable because it's memoized.\n\n    if (hasNpmLock) {\n      // Has NPM lock file.\n      if (!hasYarnLock && !hasPnpmLock && this.getVersion(workspace_schema_1.PackageManager.Npm)) {\n        // Only NPM lock file and NPM binary is available.\n        return workspace_schema_1.PackageManager.Npm;\n      }\n    } else {\n      // No NPM lock file.\n      if (hasYarnLock && this.getVersion(workspace_schema_1.PackageManager.Yarn)) {\n        // Yarn lock file and Yarn binary is available.\n        return workspace_schema_1.PackageManager.Yarn;\n      } else if (hasPnpmLock && this.getVersion(workspace_schema_1.PackageManager.Pnpm)) {\n        // PNPM lock file and PNPM binary is available.\n        return workspace_schema_1.PackageManager.Pnpm;\n      }\n    }\n\n    if (!this.getVersion(workspace_schema_1.PackageManager.Npm)) {\n      // Doesn't have NPM installed.\n      const hasYarn = !!this.getVersion(workspace_schema_1.PackageManager.Yarn);\n      const hasPnpm = !!this.getVersion(workspace_schema_1.PackageManager.Pnpm);\n\n      if (hasYarn && !hasPnpm) {\n        return workspace_schema_1.PackageManager.Yarn;\n      } else if (!hasYarn && hasPnpm) {\n        return workspace_schema_1.PackageManager.Pnpm;\n      }\n    } // TODO: This should eventually inform the user of ambiguous package manager usage.\n    //       Potentially with a prompt to choose and optionally set as the default.\n\n\n    return workspace_schema_1.PackageManager.Npm;\n  }\n\n  hasLockfile(packageManager) {\n    let lockfileName;\n\n    switch (packageManager) {\n      case workspace_schema_1.PackageManager.Yarn:\n        lockfileName = 'yarn.lock';\n        break;\n\n      case workspace_schema_1.PackageManager.Pnpm:\n        lockfileName = 'pnpm-lock.yaml';\n        break;\n\n      case workspace_schema_1.PackageManager.Npm:\n      default:\n        lockfileName = 'package-lock.json';\n        break;\n    }\n\n    return (0, fs_1.existsSync)((0, path_1.join)(this.context.root, lockfileName));\n  }\n\n  getConfiguredPackageManager() {\n    var _a;\n\n    const getPackageManager = source => {\n      if (source && (0, core_1.isJsonObject)(source)) {\n        const value = source['packageManager'];\n\n        if (typeof value === 'string') {\n          return value;\n        }\n      }\n\n      return undefined;\n    };\n\n    let result;\n    const {\n      workspace: localWorkspace,\n      globalConfiguration: globalWorkspace\n    } = this.context;\n\n    if (localWorkspace) {\n      const project = (0, config_1.getProjectByCwd)(localWorkspace);\n\n      if (project) {\n        result = getPackageManager((_a = localWorkspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n      }\n\n      result !== null && result !== void 0 ? result : result = getPackageManager(localWorkspace.extensions['cli']);\n    }\n\n    if (!result) {\n      result = getPackageManager(globalWorkspace.extensions['cli']);\n    }\n\n    return result;\n  }\n\n}\n\n__decorate([memoize_1.memoize], PackageManagerUtils.prototype, \"getVersion\", null);\n\n__decorate([memoize_1.memoize], PackageManagerUtils.prototype, \"getName\", null);\n\nexports.PackageManagerUtils = PackageManagerUtils;","map":null,"metadata":{},"sourceType":"script"}