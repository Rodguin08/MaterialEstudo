{"ast":null,"code":"const dns = require('dns');\n\nconst conditionalHeaders = ['if-modified-since', 'if-none-match', 'if-unmodified-since', 'if-match', 'if-range'];\n\nconst configureOptions = opts => {\n  const {\n    strictSSL,\n    ...options\n  } = { ...opts\n  };\n  options.method = options.method ? options.method.toUpperCase() : 'GET';\n  options.rejectUnauthorized = strictSSL !== false;\n\n  if (!options.retry) {\n    options.retry = {\n      retries: 0\n    };\n  } else if (typeof options.retry === 'string') {\n    const retries = parseInt(options.retry, 10);\n\n    if (isFinite(retries)) {\n      options.retry = {\n        retries\n      };\n    } else {\n      options.retry = {\n        retries: 0\n      };\n    }\n  } else if (typeof options.retry === 'number') {\n    options.retry = {\n      retries: options.retry\n    };\n  } else {\n    options.retry = {\n      retries: 0,\n      ...options.retry\n    };\n  }\n\n  options.dns = {\n    ttl: 5 * 60 * 1000,\n    lookup: dns.lookup,\n    ...options.dns\n  };\n  options.cache = options.cache || 'default';\n\n  if (options.cache === 'default') {\n    const hasConditionalHeader = Object.keys(options.headers || {}).some(name => {\n      return conditionalHeaders.includes(name.toLowerCase());\n    });\n\n    if (hasConditionalHeader) {\n      options.cache = 'no-store';\n    }\n  } // cacheManager is deprecated, but if it's set and\n  // cachePath is not we should copy it to the new field\n\n\n  if (options.cacheManager && !options.cachePath) {\n    options.cachePath = options.cacheManager;\n  }\n\n  return options;\n};\n\nmodule.exports = configureOptions;","map":null,"metadata":{},"sourceType":"script"}