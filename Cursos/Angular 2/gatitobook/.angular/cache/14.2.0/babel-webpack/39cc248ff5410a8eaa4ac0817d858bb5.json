{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.test = void 0;\n\nconst path_1 = require(\"../path\");\n\nconst buffer_1 = require(\"./buffer\");\n\nconst memory_1 = require(\"./memory\");\n\nconst sync_1 = require(\"./sync\"); // eslint-disable-next-line @typescript-eslint/no-namespace\n\n\nvar test;\n\n(function (test) {\n  class TestHost extends memory_1.SimpleMemoryHost {\n    constructor(map = {}) {\n      super();\n      this._records = [];\n      this._sync = null;\n\n      for (const filePath of Object.getOwnPropertyNames(map)) {\n        this._write((0, path_1.normalize)(filePath), (0, buffer_1.stringToFileBuffer)(map[filePath]));\n      }\n    }\n\n    get records() {\n      return [...this._records];\n    }\n\n    clearRecords() {\n      this._records = [];\n    }\n\n    get files() {\n      const sync = this.sync;\n\n      function _visit(p) {\n        return sync.list(p).map(fragment => (0, path_1.join)(p, fragment)).reduce((files, path) => {\n          if (sync.isDirectory(path)) {\n            return files.concat(_visit(path));\n          } else {\n            return files.concat(path);\n          }\n        }, []);\n      }\n\n      return _visit((0, path_1.normalize)('/'));\n    }\n\n    get sync() {\n      if (!this._sync) {\n        this._sync = new sync_1.SyncDelegateHost(this);\n      }\n\n      return this._sync;\n    }\n\n    clone() {\n      const newHost = new TestHost();\n      newHost._cache = new Map(this._cache);\n      return newHost;\n    } // Override parents functions to keep a record of all operators that were done.\n\n\n    _write(path, content) {\n      this._records.push({\n        kind: 'write',\n        path\n      });\n\n      return super._write(path, content);\n    }\n\n    _read(path) {\n      this._records.push({\n        kind: 'read',\n        path\n      });\n\n      return super._read(path);\n    }\n\n    _delete(path) {\n      this._records.push({\n        kind: 'delete',\n        path\n      });\n\n      return super._delete(path);\n    }\n\n    _rename(from, to) {\n      this._records.push({\n        kind: 'rename',\n        from,\n        to\n      });\n\n      return super._rename(from, to);\n    }\n\n    _list(path) {\n      this._records.push({\n        kind: 'list',\n        path\n      });\n\n      return super._list(path);\n    }\n\n    _exists(path) {\n      this._records.push({\n        kind: 'exists',\n        path\n      });\n\n      return super._exists(path);\n    }\n\n    _isDirectory(path) {\n      this._records.push({\n        kind: 'isDirectory',\n        path\n      });\n\n      return super._isDirectory(path);\n    }\n\n    _isFile(path) {\n      this._records.push({\n        kind: 'isFile',\n        path\n      });\n\n      return super._isFile(path);\n    }\n\n    _stat(path) {\n      this._records.push({\n        kind: 'stat',\n        path\n      });\n\n      return super._stat(path);\n    }\n\n    _watch(path, options) {\n      this._records.push({\n        kind: 'watch',\n        path\n      });\n\n      return super._watch(path, options);\n    }\n\n    $write(path, content) {\n      return super._write((0, path_1.normalize)(path), (0, buffer_1.stringToFileBuffer)(content));\n    }\n\n    $read(path) {\n      return (0, buffer_1.fileBufferToString)(super._read((0, path_1.normalize)(path)));\n    }\n\n    $list(path) {\n      return super._list((0, path_1.normalize)(path));\n    }\n\n    $exists(path) {\n      return super._exists((0, path_1.normalize)(path));\n    }\n\n    $isDirectory(path) {\n      return super._isDirectory((0, path_1.normalize)(path));\n    }\n\n    $isFile(path) {\n      return super._isFile((0, path_1.normalize)(path));\n    }\n\n  }\n\n  test.TestHost = TestHost;\n})(test = exports.test || (exports.test = {}));","map":null,"metadata":{},"sourceType":"script"}