{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DryRunSink = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst node_1 = require(\"@angular-devkit/core/node\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst host_1 = require(\"./host\");\n\nclass DryRunSink extends host_1.HostSink {\n  constructor(host, force = false) {\n    super(typeof host == 'string' ? new core_1.virtualFs.ScopedHost(new node_1.NodeJsSyncHost(), (0, core_1.normalize)(host)) : host, force);\n    this._subject = new rxjs_1.Subject();\n    this._fileDoesNotExistExceptionSet = new Set();\n    this._fileAlreadyExistExceptionSet = new Set();\n    this.reporter = this._subject.asObservable();\n  }\n\n  _fileAlreadyExistException(path) {\n    this._fileAlreadyExistExceptionSet.add(path);\n  }\n\n  _fileDoesNotExistException(path) {\n    this._fileDoesNotExistExceptionSet.add(path);\n  }\n\n  _done() {\n    this._fileAlreadyExistExceptionSet.forEach(path => {\n      this._subject.next({\n        kind: 'error',\n        description: 'alreadyExist',\n        path\n      });\n    });\n\n    this._fileDoesNotExistExceptionSet.forEach(path => {\n      this._subject.next({\n        kind: 'error',\n        description: 'doesNotExist',\n        path\n      });\n    });\n\n    this._filesToDelete.forEach(path => {\n      // Check if this is a renaming.\n      for (const [from] of this._filesToRename) {\n        if (from == path) {\n          // The event is sent later on.\n          return;\n        }\n      }\n\n      this._subject.next({\n        kind: 'delete',\n        path\n      });\n    });\n\n    this._filesToRename.forEach(([path, to]) => {\n      this._subject.next({\n        kind: 'rename',\n        path,\n        to\n      });\n    });\n\n    this._filesToCreate.forEach((content, path) => {\n      // Check if this is a renaming.\n      for (const [, to] of this._filesToRename) {\n        if (to == path) {\n          // The event is sent later on.\n          return;\n        }\n      }\n\n      if (this._fileAlreadyExistExceptionSet.has(path) || this._fileDoesNotExistExceptionSet.has(path)) {\n        return;\n      }\n\n      this._subject.next({\n        kind: 'create',\n        path,\n        content: content.generate()\n      });\n    });\n\n    this._filesToUpdate.forEach((content, path) => {\n      this._subject.next({\n        kind: 'update',\n        path,\n        content: content.generate()\n      });\n    });\n\n    this._subject.complete();\n\n    return (0, rxjs_1.of)(undefined);\n  }\n\n}\n\nexports.DryRunSink = DryRunSink;","map":null,"metadata":{},"sourceType":"script"}