{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst {\n  join,\n  sep\n} = require('path');\n\nconst getOptions = require('./common/get-options.js');\n\nconst mkdir = require('./mkdir.js');\n\nconst mkdtemp = require('./mkdtemp.js');\n\nconst rm = require('./rm/index.js'); // create a temp directory, ensure its permissions match its parent, then call\n// the supplied function passing it the path to the directory. clean up after\n// the function finishes, whether it throws or not\n\n\nconst withTempDir = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (root, fn, opts) {\n    const options = getOptions(opts, {\n      copy: ['tmpPrefix']\n    }); // create the directory, and fix its ownership\n\n    yield mkdir(root, {\n      recursive: true,\n      owner: 'inherit'\n    });\n    const target = yield mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''), {\n      owner: 'inherit'\n    });\n    let err;\n    let result;\n\n    try {\n      result = yield fn(target);\n    } catch (_err) {\n      err = _err;\n    }\n\n    try {\n      yield rm(target, {\n        force: true,\n        recursive: true\n      });\n    } catch {// ignore errors\n    }\n\n    if (err) {\n      throw err;\n    }\n\n    return result;\n  });\n\n  return function withTempDir(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = withTempDir;","map":null,"metadata":{},"sourceType":"script"}