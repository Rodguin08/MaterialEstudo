{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = /*#__PURE__*/require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VERSION = void 0;\n\nconst core_1 = /*#__PURE__*/require(\"@angular-devkit/core\");\n\nconst util_1 = /*#__PURE__*/require(\"util\");\n\nconst command_module_1 = /*#__PURE__*/require(\"../../src/command-builder/command-module\");\n\nconst command_runner_1 = /*#__PURE__*/require(\"../../src/command-builder/command-runner\");\n\nconst color_1 = /*#__PURE__*/require(\"../../src/utilities/color\");\n\nconst environment_options_1 = /*#__PURE__*/require(\"../../src/utilities/environment-options\");\n\nconst log_file_1 = /*#__PURE__*/require(\"../../src/utilities/log-file\");\n\nvar version_1 = /*#__PURE__*/require(\"../../src/utilities/version\");\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"VERSION\", {\n  enumerable: true,\n  get: function () {\n    return version_1.VERSION;\n  }\n});\nconst MIN_NODEJS_VERISON = [14, 15];\n/* eslint-disable no-console */\n\nfunction default_1(_x) {\n  return _default_.apply(this, arguments);\n}\n\nfunction _default_() {\n  _default_ = _asyncToGenerator(function* (options) {\n    // This node version check ensures that the requirements of the project instance of the CLI are met\n    const [major, minor] = process.versions.node.split('.').map(part => Number(part));\n\n    if (major < MIN_NODEJS_VERISON[0] || major === MIN_NODEJS_VERISON[0] && minor < MIN_NODEJS_VERISON[1]) {\n      process.stderr.write(`Node.js version ${process.version} detected.\\n` + `The Angular CLI requires a minimum of v${MIN_NODEJS_VERISON[0]}.${MIN_NODEJS_VERISON[1]}.\\n\\n` + 'Please update your Node.js version or visit https://nodejs.org/ for additional instructions.\\n');\n      return 3;\n    }\n\n    const colorLevels = {\n      info: s => s,\n      debug: s => s,\n      warn: s => color_1.colors.bold.yellow(s),\n      error: s => color_1.colors.bold.red(s),\n      fatal: s => color_1.colors.bold.red(s)\n    };\n    const logger = new core_1.logging.IndentLogger('cli-main-logger');\n    const logInfo = console.log;\n    const logError = console.error;\n    const loggerFinished = logger.forEach(entry => {\n      if (!environment_options_1.ngDebug && entry.level === 'debug') {\n        return;\n      }\n\n      const color = color_1.colors.enabled ? colorLevels[entry.level] : color_1.removeColor;\n      const message = color(entry.message);\n\n      switch (entry.level) {\n        case 'warn':\n        case 'fatal':\n        case 'error':\n          logError(message);\n          break;\n\n        default:\n          logInfo(message);\n          break;\n      }\n    }); // Redirect console to logger\n\n    console.info = console.log = function (...args) {\n      logger.info((0, util_1.format)(...args));\n    };\n\n    console.warn = function (...args) {\n      logger.warn((0, util_1.format)(...args));\n    };\n\n    console.error = function (...args) {\n      logger.error((0, util_1.format)(...args));\n    };\n\n    try {\n      return yield (0, command_runner_1.runCommand)(options.cliArgs, logger);\n    } catch (err) {\n      if (err instanceof command_module_1.CommandModuleError) {\n        logger.fatal(`Error: ${err.message}`);\n      } else if (err instanceof Error) {\n        try {\n          const logPath = (0, log_file_1.writeErrorToLogFile)(err);\n          logger.fatal(`An unhandled exception occurred: ${err.message}\\n` + `See \"${logPath}\" for further details.`);\n        } catch (e) {\n          logger.fatal(`An unhandled exception occurred: ${err.message}\\n` + `Fatal error writing debug log file: ${e}`);\n\n          if (err.stack) {\n            logger.fatal(err.stack);\n          }\n        }\n\n        return 127;\n      } else if (typeof err === 'string') {\n        logger.fatal(err);\n      } else if (typeof err === 'number') {// Log nothing.\n      } else {\n        logger.fatal(`An unexpected error occurred: ${err}`);\n      }\n\n      return 1;\n    } finally {\n      logger.complete();\n      yield loggerFinished;\n    }\n  });\n  return _default_.apply(this, arguments);\n}\n\nexports.default = default_1;","map":null,"metadata":{},"sourceType":"script"}