{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypesOfSchema = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst allTypes = ['string', 'integer', 'number', 'object', 'array', 'boolean', 'null'];\n\nfunction getTypesOfSchema(schema) {\n  if (!schema) {\n    return new Set();\n  }\n\n  if (schema === true) {\n    return new Set(allTypes);\n  }\n\n  let potentials;\n\n  if (typeof schema.type === 'string') {\n    potentials = new Set([schema.type]);\n  } else if (Array.isArray(schema.type)) {\n    potentials = new Set(schema.type);\n  } else if ((0, utils_1.isJsonArray)(schema.enum)) {\n    potentials = new Set(); // Gather the type of each enum values, and use that as a starter for potential types.\n\n    for (const v of schema.enum) {\n      switch (typeof v) {\n        case 'string':\n        case 'number':\n        case 'boolean':\n          potentials.add(typeof v);\n          break;\n\n        case 'object':\n          if (Array.isArray(v)) {\n            potentials.add('array');\n          } else if (v === null) {\n            potentials.add('null');\n          } else {\n            potentials.add('object');\n          }\n\n          break;\n      }\n    }\n  } else {\n    potentials = new Set(allTypes);\n  }\n\n  if ((0, utils_1.isJsonObject)(schema.not)) {\n    const notTypes = getTypesOfSchema(schema.not);\n    potentials = new Set([...potentials].filter(p => !notTypes.has(p)));\n  }\n\n  if (Array.isArray(schema.allOf)) {\n    for (const sub of schema.allOf) {\n      const types = getTypesOfSchema(sub);\n      potentials = new Set([...types].filter(t => potentials.has(t)));\n    }\n  }\n\n  if (Array.isArray(schema.oneOf)) {\n    let options = new Set();\n\n    for (const sub of schema.oneOf) {\n      const types = getTypesOfSchema(sub);\n      options = new Set([...options, ...types]);\n    }\n\n    potentials = new Set([...options].filter(o => potentials.has(o)));\n  }\n\n  if (Array.isArray(schema.anyOf)) {\n    let options = new Set();\n\n    for (const sub of schema.anyOf) {\n      const types = getTypesOfSchema(sub);\n      options = new Set([...options, ...types]);\n    }\n\n    potentials = new Set([...options].filter(o => potentials.has(o)));\n  }\n\n  if (schema.properties) {\n    potentials.add('object');\n  } else if (schema.items) {\n    potentials.add('array');\n  }\n\n  return potentials;\n}\n\nexports.getTypesOfSchema = getTypesOfSchema;","map":null,"metadata":{},"sourceType":"script"}