{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSyncHost = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nfunction wrapAction(action) {\n  return new rxjs_1.Observable(subscriber => {\n    subscriber.next(action());\n    subscriber.complete();\n  });\n}\n\nfunction createSyncHost(handler) {\n  return new class {\n    get capabilities() {\n      return {\n        synchronous: true\n      };\n    }\n\n    read(path) {\n      return wrapAction(() => handler.read(path));\n    }\n\n    list(path) {\n      return wrapAction(() => handler.list(path));\n    }\n\n    exists(path) {\n      return wrapAction(() => handler.exists(path));\n    }\n\n    isDirectory(path) {\n      return wrapAction(() => handler.isDirectory(path));\n    }\n\n    isFile(path) {\n      return wrapAction(() => handler.isFile(path));\n    }\n\n    stat(path) {\n      return wrapAction(() => handler.stat(path));\n    }\n\n    write(path, content) {\n      return wrapAction(() => handler.write(path, content));\n    }\n\n    delete(path) {\n      return wrapAction(() => handler.delete(path));\n    }\n\n    rename(from, to) {\n      return wrapAction(() => handler.rename(from, to));\n    }\n\n    watch() {\n      return null;\n    }\n\n  }();\n}\n\nexports.createSyncHost = createSyncHost;","map":null,"metadata":{},"sourceType":"script"}