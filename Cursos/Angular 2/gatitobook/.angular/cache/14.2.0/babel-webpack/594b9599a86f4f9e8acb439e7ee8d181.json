{"ast":null,"code":"'use strict';\n\nvar align = require('wide-align');\n\nvar validate = require('aproba');\n\nvar wideTruncate = require('./wide-truncate');\n\nvar error = require('./error');\n\nvar TemplateItem = require('./template-item');\n\nfunction renderValueWithValues(values) {\n  return function (item) {\n    return renderValue(item, values);\n  };\n}\n\nvar renderTemplate = module.exports = function (width, template, values) {\n  var items = prepareItems(width, template, values);\n  var rendered = items.map(renderValueWithValues(values)).join('');\n  return align.left(wideTruncate(rendered, width), width);\n};\n\nfunction preType(item) {\n  var cappedTypeName = item.type[0].toUpperCase() + item.type.slice(1);\n  return 'pre' + cappedTypeName;\n}\n\nfunction postType(item) {\n  var cappedTypeName = item.type[0].toUpperCase() + item.type.slice(1);\n  return 'post' + cappedTypeName;\n}\n\nfunction hasPreOrPost(item, values) {\n  if (!item.type) {\n    return;\n  }\n\n  return values[preType(item)] || values[postType(item)];\n}\n\nfunction generatePreAndPost(baseItem, parentValues) {\n  var item = Object.assign({}, baseItem);\n  var values = Object.create(parentValues);\n  var template = [];\n  var pre = preType(item);\n  var post = postType(item);\n\n  if (values[pre]) {\n    template.push({\n      value: values[pre]\n    });\n    values[pre] = null;\n  }\n\n  item.minLength = null;\n  item.length = null;\n  item.maxLength = null;\n  template.push(item);\n  values[item.type] = values[item.type];\n\n  if (values[post]) {\n    template.push({\n      value: values[post]\n    });\n    values[post] = null;\n  }\n\n  return function ($1, $2, length) {\n    return renderTemplate(length, template, values);\n  };\n}\n\nfunction prepareItems(width, template, values) {\n  function cloneAndObjectify(item, index, arr) {\n    var cloned = new TemplateItem(item, width);\n    var type = cloned.type;\n\n    if (cloned.value == null) {\n      if (!(type in values)) {\n        if (cloned.default == null) {\n          throw new error.MissingTemplateValue(cloned, values);\n        } else {\n          cloned.value = cloned.default;\n        }\n      } else {\n        cloned.value = values[type];\n      }\n    }\n\n    if (cloned.value == null || cloned.value === '') {\n      return null;\n    }\n\n    cloned.index = index;\n    cloned.first = index === 0;\n    cloned.last = index === arr.length - 1;\n\n    if (hasPreOrPost(cloned, values)) {\n      cloned.value = generatePreAndPost(cloned, values);\n    }\n\n    return cloned;\n  }\n\n  var output = template.map(cloneAndObjectify).filter(function (item) {\n    return item != null;\n  });\n  var remainingSpace = width;\n  var variableCount = output.length;\n\n  function consumeSpace(length) {\n    if (length > remainingSpace) {\n      length = remainingSpace;\n    }\n\n    remainingSpace -= length;\n  }\n\n  function finishSizing(item, length) {\n    if (item.finished) {\n      throw new error.Internal('Tried to finish template item that was already finished');\n    }\n\n    if (length === Infinity) {\n      throw new error.Internal('Length of template item cannot be infinity');\n    }\n\n    if (length != null) {\n      item.length = length;\n    }\n\n    item.minLength = null;\n    item.maxLength = null;\n    --variableCount;\n    item.finished = true;\n\n    if (item.length == null) {\n      item.length = item.getBaseLength();\n    }\n\n    if (item.length == null) {\n      throw new error.Internal('Finished template items must have a length');\n    }\n\n    consumeSpace(item.getLength());\n  }\n\n  output.forEach(function (item) {\n    if (!item.kerning) {\n      return;\n    }\n\n    var prevPadRight = item.first ? 0 : output[item.index - 1].padRight;\n\n    if (!item.first && prevPadRight < item.kerning) {\n      item.padLeft = item.kerning - prevPadRight;\n    }\n\n    if (!item.last) {\n      item.padRight = item.kerning;\n    }\n  }); // Finish any that have a fixed (literal or intuited) length\n\n  output.forEach(function (item) {\n    if (item.getBaseLength() == null) {\n      return;\n    }\n\n    finishSizing(item);\n  });\n  var resized = 0;\n  var resizing;\n  var hunkSize;\n\n  do {\n    resizing = false;\n    hunkSize = Math.round(remainingSpace / variableCount);\n    output.forEach(function (item) {\n      if (item.finished) {\n        return;\n      }\n\n      if (!item.maxLength) {\n        return;\n      }\n\n      if (item.getMaxLength() < hunkSize) {\n        finishSizing(item, item.maxLength);\n        resizing = true;\n      }\n    });\n  } while (resizing && resized++ < output.length);\n\n  if (resizing) {\n    throw new error.Internal('Resize loop iterated too many times while determining maxLength');\n  }\n\n  resized = 0;\n\n  do {\n    resizing = false;\n    hunkSize = Math.round(remainingSpace / variableCount);\n    output.forEach(function (item) {\n      if (item.finished) {\n        return;\n      }\n\n      if (!item.minLength) {\n        return;\n      }\n\n      if (item.getMinLength() >= hunkSize) {\n        finishSizing(item, item.minLength);\n        resizing = true;\n      }\n    });\n  } while (resizing && resized++ < output.length);\n\n  if (resizing) {\n    throw new error.Internal('Resize loop iterated too many times while determining minLength');\n  }\n\n  hunkSize = Math.round(remainingSpace / variableCount);\n  output.forEach(function (item) {\n    if (item.finished) {\n      return;\n    }\n\n    finishSizing(item, hunkSize);\n  });\n  return output;\n}\n\nfunction renderFunction(item, values, length) {\n  validate('OON', arguments);\n\n  if (item.type) {\n    return item.value(values, values[item.type + 'Theme'] || {}, length);\n  } else {\n    return item.value(values, {}, length);\n  }\n}\n\nfunction renderValue(item, values) {\n  var length = item.getBaseLength();\n  var value = typeof item.value === 'function' ? renderFunction(item, values, length) : item.value;\n\n  if (value == null || value === '') {\n    return '';\n  }\n\n  var alignWith = align[item.align] || align.left;\n  var leftPadding = item.padLeft ? align.left('', item.padLeft) : '';\n  var rightPadding = item.padRight ? align.right('', item.padRight) : '';\n  var truncated = wideTruncate(String(value), length);\n  var aligned = alignWith(truncated, length);\n  return leftPadding + aligned + rightPadding;\n}","map":null,"metadata":{},"sourceType":"script"}