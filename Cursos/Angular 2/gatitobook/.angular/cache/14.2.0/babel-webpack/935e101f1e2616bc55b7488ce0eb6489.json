{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeModulesEngineHost = exports.NodePackageDoesNotSupportSchematics = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst path_1 = require(\"path\");\n\nconst export_ref_1 = require(\"./export-ref\");\n\nconst file_system_engine_host_base_1 = require(\"./file-system-engine-host-base\");\n\nconst file_system_utility_1 = require(\"./file-system-utility\");\n\nclass NodePackageDoesNotSupportSchematics extends core_1.BaseException {\n  constructor(name) {\n    super(`Package ${JSON.stringify(name)} was found but does not support schematics.`);\n  }\n\n}\n\nexports.NodePackageDoesNotSupportSchematics = NodePackageDoesNotSupportSchematics;\n/**\n * A simple EngineHost that uses NodeModules to resolve collections.\n */\n\nclass NodeModulesEngineHost extends file_system_engine_host_base_1.FileSystemEngineHostBase {\n  constructor(paths) {\n    super();\n    this.paths = paths;\n  }\n\n  resolve(name, requester, references = new Set()) {\n    if (requester) {\n      if (references.has(requester)) {\n        references.add(requester);\n        throw new Error('Circular schematic reference detected: ' + JSON.stringify(Array.from(references)));\n      } else {\n        references.add(requester);\n      }\n    }\n\n    const relativeBase = requester ? (0, path_1.dirname)(requester) : process.cwd();\n    let collectionPath = undefined;\n\n    if (name.startsWith('.')) {\n      name = (0, path_1.resolve)(relativeBase, name);\n    }\n\n    const resolveOptions = {\n      paths: requester ? [(0, path_1.dirname)(requester), ...(this.paths || [])] : this.paths\n    }; // Try to resolve as a package\n\n    try {\n      const packageJsonPath = require.resolve((0, path_1.join)(name, 'package.json'), resolveOptions);\n\n      const {\n        schematics\n      } = require(packageJsonPath);\n\n      if (!schematics || typeof schematics !== 'string') {\n        throw new NodePackageDoesNotSupportSchematics(name);\n      }\n\n      collectionPath = this.resolve(schematics, packageJsonPath, references);\n    } catch (e) {\n      if (e.code !== 'MODULE_NOT_FOUND') {\n        throw e;\n      }\n    } // If not a package, try to resolve as a file\n\n\n    if (!collectionPath) {\n      try {\n        collectionPath = require.resolve(name, resolveOptions);\n      } catch (e) {\n        if (e.code !== 'MODULE_NOT_FOUND') {\n          throw e;\n        }\n      }\n    } // If not a package or a file, error\n\n\n    if (!collectionPath) {\n      throw new file_system_engine_host_base_1.CollectionCannotBeResolvedException(name);\n    }\n\n    return collectionPath;\n  }\n\n  _resolveCollectionPath(name, requester) {\n    const collectionPath = this.resolve(name, requester);\n    (0, file_system_utility_1.readJsonFile)(collectionPath);\n    return collectionPath;\n  }\n\n  _resolveReferenceString(refString, parentPath, collectionDescription) {\n    const ref = new export_ref_1.ExportStringRef(refString, parentPath);\n\n    if (!ref.ref) {\n      return null;\n    }\n\n    return {\n      ref: ref.ref,\n      path: ref.module\n    };\n  }\n\n  _transformCollectionDescription(name, desc) {\n    if (!desc.schematics || typeof desc.schematics != 'object') {\n      throw new file_system_engine_host_base_1.CollectionMissingSchematicsMapException(name);\n    }\n\n    return { ...desc,\n      name\n    };\n  }\n\n  _transformSchematicDescription(name, _collection, desc) {\n    if (!desc.factoryFn || !desc.path || !desc.description) {\n      throw new file_system_engine_host_base_1.SchematicMissingFieldsException(name);\n    }\n\n    return desc;\n  }\n\n}\n\nexports.NodeModulesEngineHost = NodeModulesEngineHost;","map":null,"metadata":{},"sourceType":"script"}