{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = /*#__PURE__*/require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CacheInfoCommandModule = void 0;\n\nconst core_1 = /*#__PURE__*/require(\"@angular-devkit/core\");\n\nconst fs_1 = /*#__PURE__*/require(\"fs\");\n\nconst path_1 = /*#__PURE__*/require(\"path\");\n\nconst command_module_1 = /*#__PURE__*/require(\"../../../command-builder/command-module\");\n\nconst environment_options_1 = /*#__PURE__*/require(\"../../../utilities/environment-options\");\n\nconst utilities_1 = /*#__PURE__*/require(\"../utilities\");\n\nclass CacheInfoCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'info';\n    this.describe = 'Prints persistent disk cache configuration and statistics in the console.';\n    this.scope = command_module_1.CommandScope.In;\n  }\n\n  builder(localYargs) {\n    return localYargs.strict();\n  }\n\n  run() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        path,\n        environment,\n        enabled\n      } = (0, utilities_1.getCacheConfig)(_this.context.workspace);\n\n      _this.context.logger.info(core_1.tags.stripIndents`\n      Enabled: ${enabled ? 'yes' : 'no'}\n      Environment: ${environment}\n      Path: ${path}\n      Size on disk: ${yield _this.getSizeOfDirectory(path)}\n      Effective status on current machine: ${_this.effectiveEnabledStatus() ? 'enabled' : 'disabled'}\n    `);\n    })();\n  }\n\n  getSizeOfDirectory(path) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const directoriesStack = [path];\n      let size = 0;\n\n      while (directoriesStack.length) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const dirPath = directoriesStack.pop();\n        let entries = [];\n\n        try {\n          entries = yield fs_1.promises.readdir(dirPath);\n        } catch {}\n\n        for (const entry of entries) {\n          const entryPath = (0, path_1.join)(dirPath, entry);\n          const stats = yield fs_1.promises.stat(entryPath);\n\n          if (stats.isDirectory()) {\n            directoriesStack.push(entryPath);\n          }\n\n          size += stats.size;\n        }\n      }\n\n      return _this2.formatSize(size);\n    })();\n  }\n\n  formatSize(size) {\n    if (size <= 0) {\n      return '0 bytes';\n    }\n\n    const abbreviations = ['bytes', 'kB', 'MB', 'GB'];\n    const index = Math.floor(Math.log(size) / Math.log(1024));\n    const roundedSize = size / Math.pow(1024, index); // bytes don't have a fraction\n\n    const fractionDigits = index === 0 ? 0 : 2;\n    return `${roundedSize.toFixed(fractionDigits)} ${abbreviations[index]}`;\n  }\n\n  effectiveEnabledStatus() {\n    const {\n      enabled,\n      environment\n    } = (0, utilities_1.getCacheConfig)(this.context.workspace);\n\n    if (enabled) {\n      switch (environment) {\n        case 'ci':\n          return environment_options_1.isCI;\n\n        case 'local':\n          return !environment_options_1.isCI;\n      }\n    }\n\n    return enabled;\n  }\n\n}\n\nexports.CacheInfoCommandModule = CacheInfoCommandModule;","map":null,"metadata":{},"sourceType":"script"}