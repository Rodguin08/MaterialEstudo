{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isJobHandler = exports.JobState = exports.JobOutboundMessageKind = exports.JobInboundMessageKind = void 0;\n/**\n * Messages that can be sent TO a job. The job needs to listen to those.\n */\n\nvar JobInboundMessageKind;\n\n(function (JobInboundMessageKind) {\n  JobInboundMessageKind[\"Ping\"] = \"ip\";\n  JobInboundMessageKind[\"Stop\"] = \"is\"; // Channel specific messages.\n\n  JobInboundMessageKind[\"Input\"] = \"in\"; // Input channel does not allow completion / error. Erroring this will just close the Subject\n  // but not notify the job.\n})(JobInboundMessageKind = exports.JobInboundMessageKind || (exports.JobInboundMessageKind = {}));\n/**\n * Kind of messages that can be outputted from a job.\n */\n\n\nvar JobOutboundMessageKind;\n\n(function (JobOutboundMessageKind) {\n  // Lifecycle specific messages.\n  JobOutboundMessageKind[\"OnReady\"] = \"c\";\n  JobOutboundMessageKind[\"Start\"] = \"s\";\n  JobOutboundMessageKind[\"End\"] = \"e\";\n  JobOutboundMessageKind[\"Pong\"] = \"p\"; // Feedback messages.\n\n  JobOutboundMessageKind[\"Output\"] = \"o\"; // Channel specific messages.\n\n  JobOutboundMessageKind[\"ChannelCreate\"] = \"cn\";\n  JobOutboundMessageKind[\"ChannelMessage\"] = \"cm\";\n  JobOutboundMessageKind[\"ChannelError\"] = \"ce\";\n  JobOutboundMessageKind[\"ChannelComplete\"] = \"cc\";\n})(JobOutboundMessageKind = exports.JobOutboundMessageKind || (exports.JobOutboundMessageKind = {}));\n/**\n * The state of a job. These are changed as the job reports a new state through its messages.\n */\n\n\nvar JobState;\n\n(function (JobState) {\n  /**\n   * The job was queued and is waiting to start.\n   */\n  JobState[\"Queued\"] = \"queued\";\n  /**\n   * The job description was found, its dependencies (see \"Synchronizing and Dependencies\")\n   * are done running, and the job's argument is validated and the job's code will be executed.\n   */\n\n  JobState[\"Ready\"] = \"ready\";\n  /**\n   * The job has been started. The job implementation is expected to send this as soon as its\n   * work is starting.\n   */\n\n  JobState[\"Started\"] = \"started\";\n  /**\n   * The job has ended and is done running.\n   */\n\n  JobState[\"Ended\"] = \"ended\";\n  /**\n   * An error occured and the job stopped because of internal state.\n   */\n\n  JobState[\"Errored\"] = \"errored\";\n})(JobState = exports.JobState || (exports.JobState = {}));\n\nfunction isJobHandler(value) {\n  const job = value;\n  return typeof job == 'function' && typeof job.jobDescription == 'object' && job.jobDescription !== null;\n}\n\nexports.isJobHandler = isJobHandler;","map":null,"metadata":{},"sourceType":"script"}