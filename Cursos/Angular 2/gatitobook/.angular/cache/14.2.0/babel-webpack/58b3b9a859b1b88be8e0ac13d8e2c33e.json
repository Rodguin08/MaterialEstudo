{"ast":null,"code":"const {\n  resolve,\n  dirname,\n  delimiter\n} = require('path'); // the path here is relative, even though it does not need to be\n// in order to make the posix tests pass in windows\n\n\nconst nodeGypPath = resolve(__dirname, '../lib/node-gyp-bin'); // Windows typically calls its PATH environ 'Path', but this is not\n// guaranteed, nor is it guaranteed to be the only one.  Merge them\n// all together in the order they appear in the object.\n\nconst setPATH = (projectPath, binPaths, env) => {\n  const PATH = Object.keys(env).filter(p => /^path$/i.test(p) && env[p]).map(p => env[p].split(delimiter)).reduce((set, p) => set.concat(p.filter(concatted => !set.includes(concatted))), []).join(delimiter);\n  const pathArr = [];\n\n  if (binPaths) {\n    pathArr.push(...binPaths);\n  } // unshift the ./node_modules/.bin from every folder\n  // walk up until dirname() does nothing, at the root\n  // XXX we should specify a cwd that we don't go above\n\n\n  let p = projectPath;\n  let pp;\n\n  do {\n    pathArr.push(resolve(p, 'node_modules', '.bin'));\n    pp = p;\n    p = dirname(p);\n  } while (p !== pp);\n\n  pathArr.push(nodeGypPath, PATH);\n  const pathVal = pathArr.join(delimiter); // XXX include the node-gyp-bin path somehow?  Probably better for\n  // npm or arborist or whoever to just provide that by putting it in\n  // the PATH environ, since that's preserved anyway.\n\n  for (const key of Object.keys(env)) {\n    if (/^path$/i.test(key)) {\n      env[key] = pathVal;\n    }\n  }\n\n  return env;\n};\n\nmodule.exports = setPATH;","map":null,"metadata":{},"sourceType":"script"}