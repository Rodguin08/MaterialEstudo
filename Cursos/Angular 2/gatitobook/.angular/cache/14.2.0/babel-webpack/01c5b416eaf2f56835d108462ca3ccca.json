{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResolverHost = void 0;\n/**\n * A Host that runs a method before calling its delegate. This is an abstract class and its actual\n * behaviour is entirely dependant of the subclass.\n */\n\nclass ResolverHost {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  get capabilities() {\n    return this._delegate.capabilities;\n  }\n\n  write(path, content) {\n    return this._delegate.write(this._resolve(path), content);\n  }\n\n  read(path) {\n    return this._delegate.read(this._resolve(path));\n  }\n\n  delete(path) {\n    return this._delegate.delete(this._resolve(path));\n  }\n\n  rename(from, to) {\n    return this._delegate.rename(this._resolve(from), this._resolve(to));\n  }\n\n  list(path) {\n    return this._delegate.list(this._resolve(path));\n  }\n\n  exists(path) {\n    return this._delegate.exists(this._resolve(path));\n  }\n\n  isDirectory(path) {\n    return this._delegate.isDirectory(this._resolve(path));\n  }\n\n  isFile(path) {\n    return this._delegate.isFile(this._resolve(path));\n  } // Some hosts may not support stat.\n\n\n  stat(path) {\n    return this._delegate.stat(this._resolve(path));\n  } // Some hosts may not support watching.\n\n\n  watch(path, options) {\n    return this._delegate.watch(this._resolve(path), options);\n  }\n\n}\n\nexports.ResolverHost = ResolverHost;","map":null,"metadata":{},"sourceType":"script"}