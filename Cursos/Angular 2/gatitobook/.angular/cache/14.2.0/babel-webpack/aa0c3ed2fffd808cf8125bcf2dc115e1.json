{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleJobRegistry = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst json_1 = require(\"../../json\");\n\nconst api_1 = require(\"./api\");\n\nconst exception_1 = require(\"./exception\");\n/**\n * A simple job registry that keep a map of JobName => JobHandler internally.\n */\n\n\nclass SimpleJobRegistry {\n  constructor() {\n    this._jobNames = new Map();\n  }\n\n  get(name) {\n    return (0, rxjs_1.of)(this._jobNames.get(name) || null);\n  }\n\n  register(nameOrHandler, handlerOrOptions = {}, options = {}) {\n    // Switch on the arguments.\n    if (typeof nameOrHandler == 'string') {\n      if (!(0, api_1.isJobHandler)(handlerOrOptions)) {\n        // This is an error.\n        throw new TypeError('Expected a JobHandler as second argument.');\n      }\n\n      this._register(nameOrHandler, handlerOrOptions, options);\n    } else if ((0, api_1.isJobHandler)(nameOrHandler)) {\n      if (typeof handlerOrOptions !== 'object') {\n        // This is an error.\n        throw new TypeError('Expected an object options as second argument.');\n      }\n\n      const name = options.name || nameOrHandler.jobDescription.name || handlerOrOptions.name;\n\n      if (name === undefined) {\n        throw new TypeError('Expected name to be a string.');\n      }\n\n      this._register(name, nameOrHandler, options);\n    } else {\n      throw new TypeError('Unrecognized arguments.');\n    }\n  }\n\n  _register(name, handler, options) {\n    if (this._jobNames.has(name)) {\n      // We shouldn't allow conflicts.\n      throw new exception_1.JobNameAlreadyRegisteredException(name);\n    } // Merge all fields with the ones in the handler (to make sure we respect the handler).\n\n\n    const argument = json_1.schema.mergeSchemas(handler.jobDescription.argument, options.argument);\n    const input = json_1.schema.mergeSchemas(handler.jobDescription.input, options.input);\n    const output = json_1.schema.mergeSchemas(handler.jobDescription.output, options.output); // Create the job description.\n\n    const jobDescription = {\n      name,\n      argument,\n      output,\n      input\n    };\n    const jobHandler = Object.assign(handler.bind(undefined), {\n      jobDescription\n    });\n\n    this._jobNames.set(name, jobHandler);\n  }\n  /**\n   * Returns the job names of all jobs.\n   */\n\n\n  getJobNames() {\n    return [...this._jobNames.keys()];\n  }\n\n}\n\nexports.SimpleJobRegistry = SimpleJobRegistry;","map":null,"metadata":{},"sourceType":"script"}