{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SocksProxyAgent = void 0;\n\nconst socks_1 = require(\"socks\");\n\nconst agent_base_1 = require(\"agent-base\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst dns_1 = __importDefault(require(\"dns\"));\n\nconst tls_1 = __importDefault(require(\"tls\"));\n\nconst debug = (0, debug_1.default)('socks-proxy-agent');\n\nfunction parseSocksProxy(opts) {\n  var _a;\n\n  let port = 0;\n  let lookup = false;\n  let type = 5;\n  const host = opts.hostname;\n\n  if (host == null) {\n    throw new TypeError('No \"host\"');\n  }\n\n  if (typeof opts.port === 'number') {\n    port = opts.port;\n  } else if (typeof opts.port === 'string') {\n    port = parseInt(opts.port, 10);\n  } // From RFC 1928, Section 3: https://tools.ietf.org/html/rfc1928#section-3\n  // \"The SOCKS service is conventionally located on TCP port 1080\"\n\n\n  if (port == null) {\n    port = 1080;\n  } // figure out if we want socks v4 or v5, based on the \"protocol\" used.\n  // Defaults to 5.\n\n\n  if (opts.protocol != null) {\n    switch (opts.protocol.replace(':', '')) {\n      case 'socks4':\n        lookup = true;\n      // pass through\n\n      case 'socks4a':\n        type = 4;\n        break;\n\n      case 'socks5':\n        lookup = true;\n      // pass through\n\n      case 'socks': // no version specified, default to 5h\n\n      case 'socks5h':\n        type = 5;\n        break;\n\n      default:\n        throw new TypeError(`A \"socks\" protocol must be specified! Got: ${String(opts.protocol)}`);\n    }\n  }\n\n  if (typeof opts.type !== 'undefined') {\n    if (opts.type === 4 || opts.type === 5) {\n      type = opts.type;\n    } else {\n      throw new TypeError(`\"type\" must be 4 or 5, got: ${String(opts.type)}`);\n    }\n  }\n\n  const proxy = {\n    host,\n    port,\n    type\n  };\n  let userId = (_a = opts.userId) !== null && _a !== void 0 ? _a : opts.username;\n  let password = opts.password;\n\n  if (opts.auth != null) {\n    const auth = opts.auth.split(':');\n    userId = auth[0];\n    password = auth[1];\n  }\n\n  if (userId != null) {\n    Object.defineProperty(proxy, 'userId', {\n      value: userId,\n      enumerable: false\n    });\n  }\n\n  if (password != null) {\n    Object.defineProperty(proxy, 'password', {\n      value: password,\n      enumerable: false\n    });\n  }\n\n  return {\n    lookup,\n    proxy\n  };\n}\n\nconst normalizeProxyOptions = input => {\n  let proxyOptions;\n\n  if (typeof input === 'string') {\n    proxyOptions = new URL(input);\n  } else {\n    proxyOptions = input;\n  }\n\n  if (proxyOptions == null) {\n    throw new TypeError('a SOCKS proxy server `host` and `port` must be specified!');\n  }\n\n  return proxyOptions;\n};\n\nclass SocksProxyAgent extends agent_base_1.Agent {\n  constructor(input, options) {\n    var _a;\n\n    const proxyOptions = normalizeProxyOptions(input);\n    super(proxyOptions);\n    const parsedProxy = parseSocksProxy(proxyOptions);\n    this.shouldLookup = parsedProxy.lookup;\n    this.proxy = parsedProxy.proxy;\n    this.tlsConnectionOptions = proxyOptions.tls != null ? proxyOptions.tls : {};\n    this.timeout = (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * Initiates a SOCKS connection to the specified SOCKS proxy server,\n   * which in turn connects to the specified remote host and port.\n   *\n   * @api protected\n   */\n\n\n  callback(req, opts) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        shouldLookup,\n        proxy,\n        timeout\n      } = this;\n      let {\n        host,\n        port,\n        lookup: lookupCallback\n      } = opts;\n\n      if (host == null) {\n        throw new Error('No `host` defined!');\n      }\n\n      if (shouldLookup) {\n        // Client-side DNS resolution for \"4\" and \"5\" socks proxy versions.\n        host = yield new Promise((resolve, reject) => {\n          // Use the request's custom lookup, if one was configured:\n          const lookupFn = lookupCallback !== null && lookupCallback !== void 0 ? lookupCallback : dns_1.default.lookup;\n          lookupFn(host, {}, (err, res) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(res);\n            }\n          });\n        });\n      }\n\n      const socksOpts = {\n        proxy,\n        destination: {\n          host,\n          port\n        },\n        command: 'connect',\n        timeout: timeout !== null && timeout !== void 0 ? timeout : undefined\n      };\n\n      const cleanup = tlsSocket => {\n        req.destroy();\n        socket.destroy();\n        if (tlsSocket) tlsSocket.destroy();\n      };\n\n      debug('Creating socks proxy connection: %o', socksOpts);\n      const {\n        socket\n      } = yield socks_1.SocksClient.createConnection(socksOpts);\n      debug('Successfully created socks proxy connection');\n\n      if (timeout !== null) {\n        socket.setTimeout(timeout);\n        socket.on('timeout', () => cleanup());\n      }\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = (_a = opts.servername) !== null && _a !== void 0 ? _a : opts.host;\n        const tlsSocket = tls_1.default.connect(Object.assign(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), {\n          socket,\n          servername\n        }), this.tlsConnectionOptions));\n        tlsSocket.once('error', error => {\n          debug('socket TLS error', error.message);\n          cleanup(tlsSocket);\n        });\n        return tlsSocket;\n      }\n\n      return socket;\n    });\n  }\n\n}\n\nexports.SocksProxyAgent = SocksProxyAgent;\n\nfunction omit(obj, ...keys) {\n  const ret = {};\n  let key;\n\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n\n  return ret;\n} //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script"}