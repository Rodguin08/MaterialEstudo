{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = /*#__PURE__*/require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VersionCommandModule = void 0;\n\nconst module_1 = __importDefault( /*#__PURE__*/require(\"module\"));\n\nconst path_1 = /*#__PURE__*/require(\"path\");\n\nconst command_module_1 = /*#__PURE__*/require(\"../../command-builder/command-module\");\n\nconst color_1 = /*#__PURE__*/require(\"../../utilities/color\");\n/**\n * Major versions of Node.js that are officially supported by Angular.\n */\n\n\nconst SUPPORTED_NODE_MAJORS = [14, 16];\nconst PACKAGE_PATTERNS = [/^@angular\\/.*/, /^@angular-devkit\\/.*/, /^@bazel\\/.*/, /^@ngtools\\/.*/, /^@nguniversal\\/.*/, /^@schematics\\/.*/, /^rxjs$/, /^typescript$/, /^ng-packagr$/, /^webpack$/];\n\nclass VersionCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'version';\n    this.aliases = ['v'];\n    this.describe = 'Outputs Angular CLI version.';\n  }\n\n  builder(localYargs) {\n    return localYargs;\n  }\n\n  run() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      const {\n        packageManager,\n        logger,\n        root\n      } = _this.context;\n      const localRequire = module_1.default.createRequire((0, path_1.resolve)(__filename, '../../../')); // Trailing slash is used to allow the path to be treated as a directory\n\n      const workspaceRequire = module_1.default.createRequire(root + '/');\n      const cliPackage = localRequire('./package.json');\n      let workspacePackage;\n\n      try {\n        workspacePackage = workspaceRequire('./package.json');\n      } catch {}\n\n      const [nodeMajor] = process.versions.node.split('.').map(part => Number(part));\n      const unsupportedNodeVersion = !SUPPORTED_NODE_MAJORS.includes(nodeMajor);\n      const packageNames = new Set(Object.keys({ ...cliPackage.dependencies,\n        ...cliPackage.devDependencies,\n        ...(workspacePackage === null || workspacePackage === void 0 ? void 0 : workspacePackage.dependencies),\n        ...(workspacePackage === null || workspacePackage === void 0 ? void 0 : workspacePackage.devDependencies)\n      }));\n      const versions = {};\n\n      for (const name of packageNames) {\n        if (PACKAGE_PATTERNS.some(p => p.test(name))) {\n          versions[name] = _this.getVersion(name, workspaceRequire, localRequire);\n        }\n      }\n\n      const ngCliVersion = cliPackage.version;\n      let angularCoreVersion = '';\n      const angularSameAsCore = [];\n\n      if (workspacePackage) {\n        // Filter all angular versions that are the same as core.\n        angularCoreVersion = versions['@angular/core'];\n\n        if (angularCoreVersion) {\n          for (const [name, version] of Object.entries(versions)) {\n            if (version === angularCoreVersion && name.startsWith('@angular/')) {\n              angularSameAsCore.push(name.replace(/^@angular\\//, ''));\n              delete versions[name];\n            }\n          } // Make sure we list them in alphabetical order.\n\n\n          angularSameAsCore.sort();\n        }\n      }\n\n      const namePad = ' '.repeat(Object.keys(versions).sort((a, b) => b.length - a.length)[0].length + 3);\n      const asciiArt = `\n     _                      _                 ____ _     ___\n    / \\\\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\n   / â–³ \\\\ | '_ \\\\ / _\\` | | | | |/ _\\` | '__|   | |   | |    | |\n  / ___ \\\\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\n /_/   \\\\_\\\\_| |_|\\\\__, |\\\\__,_|_|\\\\__,_|_|       \\\\____|_____|___|\n                |___/\n    `.split('\\n').map(x => color_1.colors.red(x)).join('\\n');\n      logger.info(asciiArt);\n      logger.info(`\n      Angular CLI: ${ngCliVersion}\n      Node: ${process.versions.node}${unsupportedNodeVersion ? ' (Unsupported)' : ''}\n      Package Manager: ${packageManager.name} ${(_a = packageManager.version) !== null && _a !== void 0 ? _a : '<error>'} \n      OS: ${process.platform} ${process.arch}\n\n      Angular: ${angularCoreVersion}\n      ... ${angularSameAsCore.reduce((acc, name) => {\n        // Perform a simple word wrap around 60.\n        if (acc.length == 0) {\n          return [name];\n        }\n\n        const line = acc[acc.length - 1] + ', ' + name;\n\n        if (line.length > 60) {\n          acc.push(name);\n        } else {\n          acc[acc.length - 1] = line;\n        }\n\n        return acc;\n      }, []).join('\\n... ')}\n\n      Package${namePad.slice(7)}Version\n      -------${namePad.replace(/ /g, '-')}------------------\n      ${Object.keys(versions).map(module => `${module}${namePad.slice(module.length)}${versions[module]}`).sort().join('\\n')}\n    `.replace(/^ {6}/gm, ''));\n\n      if (unsupportedNodeVersion) {\n        logger.warn(`Warning: The current version of Node (${process.versions.node}) is not supported by Angular.`);\n      }\n    })();\n  }\n\n  getVersion(moduleName, workspaceRequire, localRequire) {\n    let packageInfo;\n    let cliOnly = false; // Try to find the package in the workspace\n\n    try {\n      packageInfo = workspaceRequire(`${moduleName}/package.json`);\n    } catch {} // If not found, try to find within the CLI\n\n\n    if (!packageInfo) {\n      try {\n        packageInfo = localRequire(`${moduleName}/package.json`);\n        cliOnly = true;\n      } catch {}\n    } // If found, attempt to get the version\n\n\n    if (packageInfo) {\n      try {\n        return packageInfo.version + (cliOnly ? ' (cli-only)' : '');\n      } catch {}\n    }\n\n    return '<error>';\n  }\n\n}\n\nexports.VersionCommandModule = VersionCommandModule;","map":null,"metadata":{},"sourceType":"script"}