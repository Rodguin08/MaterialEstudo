{"ast":null,"code":"const Minipass = require('minipass');\n\nconst _data = Symbol('_data');\n\nconst _length = Symbol('_length');\n\nclass Collect extends Minipass {\n  constructor(options) {\n    super(options);\n    this[_data] = [];\n    this[_length] = 0;\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';\n    if (!encoding) encoding = 'utf8';\n    const c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n\n    this[_data].push(c);\n\n    this[_length] += c.length;\n    if (cb) cb();\n    return true;\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') cb = chunk, chunk = null;\n    if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';\n    if (chunk) this.write(chunk, encoding);\n    const result = Buffer.concat(this[_data], this[_length]);\n    super.write(result);\n    return super.end(cb);\n  }\n\n}\n\nmodule.exports = Collect; // it would be possible to DRY this a bit by doing something like\n// this.collector = new Collect() and listening on its data event,\n// but it's not much code, and we may as well save the extra obj\n\nclass CollectPassThrough extends Minipass {\n  constructor(options) {\n    super(options);\n    this[_data] = [];\n    this[_length] = 0;\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';\n    if (!encoding) encoding = 'utf8';\n    const c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n\n    this[_data].push(c);\n\n    this[_length] += c.length;\n    return super.write(chunk, encoding, cb);\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') cb = chunk, chunk = null;\n    if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';\n    if (chunk) this.write(chunk, encoding);\n    const result = Buffer.concat(this[_data], this[_length]);\n    this.emit('collect', result);\n    return super.end(cb);\n  }\n\n}\n\nmodule.exports.PassThrough = CollectPassThrough;","map":null,"metadata":{},"sourceType":"script"}