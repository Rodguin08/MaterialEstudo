{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeOptionsMiddleware = void 0;\n\nconst yargs = __importStar( /*#__PURE__*/require(\"yargs\"));\n/**\n * A Yargs middleware that normalizes non Array options when the argument has been provided multiple times.\n *\n * By default, when an option is non array and it is provided multiple times in the command line, yargs\n * will not override it's value but instead it will be changed to an array unless `duplicate-arguments-array` is disabled.\n * But this option also have an effect on real array options which isn't desired.\n *\n * See: https://github.com/yargs/yargs-parser/pull/163#issuecomment-516566614\n */\n\n\nfunction normalizeOptionsMiddleware(args) {\n  // `getOptions` is not included in the types even though it's public API.\n  // https://github.com/yargs/yargs/issues/2098\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const {\n    array\n  } = yargs.getOptions();\n  const arrayOptions = new Set(array);\n\n  for (const [key, value] of Object.entries(args)) {\n    if (key !== '_' && Array.isArray(value) && !arrayOptions.has(key)) {\n      const newValue = value.pop(); // eslint-disable-next-line no-console\n\n      console.warn(`Option '${key}' has been specified multiple times. The value '${newValue}' will be used.`);\n      args[key] = newValue;\n    }\n  }\n}\n\nexports.normalizeOptionsMiddleware = normalizeOptionsMiddleware;","map":null,"metadata":{},"sourceType":"script"}