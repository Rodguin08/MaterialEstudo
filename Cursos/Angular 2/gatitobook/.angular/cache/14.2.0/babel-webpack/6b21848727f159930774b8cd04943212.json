{"ast":null,"code":"/* eslint camelcase: \"off\" */\nconst isWindows = require('./is-windows.js');\n\nconst setPATH = require('./set-path.js');\n\nconst {\n  resolve\n} = require('path');\n\nconst which = require('which');\n\nconst npm_config_node_gyp = require.resolve('node-gyp/bin/node-gyp.js');\n\nconst escape = require('./escape.js');\n\nconst makeSpawnArgs = options => {\n  const {\n    event,\n    path,\n    scriptShell = isWindows ? process.env.ComSpec || 'cmd' : 'sh',\n    binPaths,\n    env = {},\n    stdio,\n    cmd,\n    args = [],\n    stdioString = false\n  } = options;\n  const spawnEnv = setPATH(path, binPaths, { // we need to at least save the PATH environment var\n    ...process.env,\n    ...env,\n    npm_package_json: resolve(path, 'package.json'),\n    npm_lifecycle_event: event,\n    npm_lifecycle_script: cmd,\n    npm_config_node_gyp\n  });\n  let doubleEscape = false;\n  const isCmd = /(?:^|\\\\)cmd(?:\\.exe)?$/i.test(scriptShell);\n\n  if (isCmd) {\n    let initialCmd = '';\n    let insideQuotes = false;\n\n    for (let i = 0; i < cmd.length; ++i) {\n      const char = cmd.charAt(i);\n\n      if (char === ' ' && !insideQuotes) {\n        break;\n      }\n\n      initialCmd += char;\n\n      if (char === '\"' || char === \"'\") {\n        insideQuotes = !insideQuotes;\n      }\n    }\n\n    let pathToInitial;\n\n    try {\n      pathToInitial = which.sync(initialCmd, {\n        path: spawnEnv.path,\n        pathext: spawnEnv.pathext\n      }).toLowerCase();\n    } catch (err) {\n      pathToInitial = initialCmd.toLowerCase();\n    }\n\n    doubleEscape = pathToInitial.endsWith('.cmd') || pathToInitial.endsWith('.bat');\n  }\n\n  let script = cmd;\n\n  for (const arg of args) {\n    script += isCmd ? ` ${escape.cmd(arg, doubleEscape)}` : ` ${escape.sh(arg)}`;\n  }\n\n  const spawnArgs = isCmd ? ['/d', '/s', '/c', script] : ['-c', '--', script];\n  const spawnOpts = {\n    env: spawnEnv,\n    stdioString,\n    stdio,\n    cwd: path,\n    ...(isCmd ? {\n      windowsVerbatimArguments: true\n    } : {})\n  };\n  return [scriptShell, spawnArgs, spawnOpts];\n};\n\nmodule.exports = makeSpawnArgs;","map":null,"metadata":{},"sourceType":"script"}