{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SafeReadonlyHost = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n/**\n * A Host that filters out errors. The only exception is `read()` which will still error out if\n * the delegate returned an error (e.g. NodeJS will error out if the file doesn't exist).\n */\n\n\nclass SafeReadonlyHost {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  get capabilities() {\n    return this._delegate.capabilities;\n  }\n\n  read(path) {\n    return this._delegate.read(path);\n  }\n\n  list(path) {\n    return this._delegate.list(path).pipe((0, operators_1.catchError)(() => (0, rxjs_1.of)([])));\n  }\n\n  exists(path) {\n    return this._delegate.exists(path);\n  }\n\n  isDirectory(path) {\n    return this._delegate.isDirectory(path).pipe((0, operators_1.catchError)(() => (0, rxjs_1.of)(false)));\n  }\n\n  isFile(path) {\n    return this._delegate.isFile(path).pipe((0, operators_1.catchError)(() => (0, rxjs_1.of)(false)));\n  } // Some hosts may not support stats.\n\n\n  stat(path) {\n    const maybeStat = this._delegate.stat(path);\n\n    return maybeStat && maybeStat.pipe((0, operators_1.catchError)(() => (0, rxjs_1.of)(null)));\n  }\n\n}\n\nexports.SafeReadonlyHost = SafeReadonlyHost;","map":null,"metadata":{},"sourceType":"script"}