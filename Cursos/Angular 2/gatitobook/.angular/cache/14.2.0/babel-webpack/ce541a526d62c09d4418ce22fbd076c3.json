{"ast":null,"code":"'use strict';\n\nconst log = require('npmlog');\n\nconst execFile = require('child_process').execFile;\n\nconst fs = require('fs');\n\nconst path = require('path').win32;\n\nconst logWithPrefix = require('./util').logWithPrefix;\n\nconst regSearchKeys = require('./util').regSearchKeys;\n\nfunction findVisualStudio(nodeSemver, configMsvsVersion, callback) {\n  const finder = new VisualStudioFinder(nodeSemver, configMsvsVersion, callback);\n  finder.findVisualStudio();\n}\n\nfunction VisualStudioFinder(nodeSemver, configMsvsVersion, callback) {\n  this.nodeSemver = nodeSemver;\n  this.configMsvsVersion = configMsvsVersion;\n  this.callback = callback;\n  this.errorLog = [];\n  this.validVersions = [];\n}\n\nVisualStudioFinder.prototype = {\n  log: logWithPrefix(log, 'find VS'),\n  regSearchKeys: regSearchKeys,\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog(message) {\n    this.log.verbose(message);\n    this.errorLog.push(message);\n  },\n  findVisualStudio: function findVisualStudio() {\n    this.configVersionYear = null;\n    this.configPath = null;\n\n    if (this.configMsvsVersion) {\n      this.addLog('msvs_version was set from command line or npm config');\n\n      if (this.configMsvsVersion.match(/^\\d{4}$/)) {\n        this.configVersionYear = parseInt(this.configMsvsVersion, 10);\n        this.addLog(`- looking for Visual Studio version ${this.configVersionYear}`);\n      } else {\n        this.configPath = path.resolve(this.configMsvsVersion);\n        this.addLog(`- looking for Visual Studio installed in \"${this.configPath}\"`);\n      }\n    } else {\n      this.addLog('msvs_version not set from command line or npm config');\n    }\n\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir = path.resolve(process.env.VCINSTALLDIR, '..');\n      this.addLog('running in VS Command Prompt, installation path is:\\n' + `\"${this.envVcInstallDir}\"\\n- will only use this version`);\n    } else {\n      this.addLog('VCINSTALLDIR not set, not running in VS Command Prompt');\n    }\n\n    this.findVisualStudio2017OrNewer(info => {\n      if (info) {\n        return this.succeed(info);\n      }\n\n      this.findVisualStudio2015(info => {\n        if (info) {\n          return this.succeed(info);\n        }\n\n        this.findVisualStudio2013(info => {\n          if (info) {\n            return this.succeed(info);\n          }\n\n          this.fail();\n        });\n      });\n    });\n  },\n  succeed: function succeed(info) {\n    this.log.info(`using VS${info.versionYear} (${info.version}) found at:` + `\\n\"${info.path}\"` + '\\nrun with --verbose for detailed information');\n    process.nextTick(this.callback.bind(null, null, info));\n  },\n  fail: function fail() {\n    if (this.configMsvsVersion && this.envVcInstallDir) {\n      this.errorLog.push('msvs_version does not match this VS Command Prompt or the', 'installation cannot be used.');\n    } else if (this.configMsvsVersion) {\n      // If msvs_version was specified but finding VS failed, print what would\n      // have been accepted\n      this.errorLog.push('');\n\n      if (this.validVersions) {\n        this.errorLog.push('valid versions for msvs_version:');\n        this.validVersions.forEach(version => {\n          this.errorLog.push(`- \"${version}\"`);\n        });\n      } else {\n        this.errorLog.push('no valid versions for msvs_version were found');\n      }\n    }\n\n    const errorLog = this.errorLog.join('\\n'); // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 62 chars usable here):\n    //                                                               X\n\n    const infoLog = ['**************************************************************', 'You need to install the latest version of Visual Studio', 'including the \"Desktop development with C++\" workload.', 'For more information consult the documentation at:', 'https://github.com/nodejs/node-gyp#on-windows', '**************************************************************'].join('\\n');\n    this.log.error(`\\n${errorLog}\\n\\n${infoLog}\\n`);\n    process.nextTick(this.callback.bind(null, new Error('Could not find any Visual Studio installation to use')));\n  },\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  findVisualStudio2017OrNewer: function findVisualStudio2017OrNewer(cb) {\n    var ps = path.join(process.env.SystemRoot, 'System32', 'WindowsPowerShell', 'v1.0', 'powershell.exe');\n    var csFile = path.join(__dirname, 'Find-VisualStudio.cs');\n    var psArgs = ['-ExecutionPolicy', 'Unrestricted', '-NoProfile', '-Command', '&{Add-Type -Path \\'' + csFile + '\\';' + '[VisualStudioConfiguration.Main]::PrintJson()}'];\n    this.log.silly('Running', ps, psArgs);\n    var child = execFile(ps, psArgs, {\n      encoding: 'utf8'\n    }, (err, stdout, stderr) => {\n      this.parseData(err, stdout, stderr, cb);\n    });\n    child.stdin.end();\n  },\n  // Parse the output of the PowerShell script and look for an installation\n  // of Visual Studio 2017 or newer to use\n  parseData: function parseData(err, stdout, stderr, cb) {\n    this.log.silly('PS stderr = %j', stderr);\n\n    const failPowershell = () => {\n      this.addLog('could not use PowerShell to find Visual Studio 2017 or newer, try re-running with \\'--loglevel silly\\' for more details');\n      cb(null);\n    };\n\n    if (err) {\n      this.log.silly('PS err = %j', err && (err.stack || err));\n      return failPowershell();\n    }\n\n    var vsInfo;\n\n    try {\n      vsInfo = JSON.parse(stdout);\n    } catch (e) {\n      this.log.silly('PS stdout = %j', stdout);\n      this.log.silly(e);\n      return failPowershell();\n    }\n\n    if (!Array.isArray(vsInfo)) {\n      this.log.silly('PS stdout = %j', stdout);\n      return failPowershell();\n    }\n\n    vsInfo = vsInfo.map(info => {\n      this.log.silly(`processing installation: \"${info.path}\"`);\n      info.path = path.resolve(info.path);\n      var ret = this.getVersionInfo(info);\n      ret.path = info.path;\n      ret.msBuild = this.getMSBuild(info, ret.versionYear);\n      ret.toolset = this.getToolset(info, ret.versionYear);\n      ret.sdk = this.getSDK(info);\n      return ret;\n    });\n    this.log.silly('vsInfo:', vsInfo); // Remove future versions or errors parsing version number\n\n    vsInfo = vsInfo.filter(info => {\n      if (info.versionYear) {\n        return true;\n      }\n\n      this.addLog(`unknown version \"${info.version}\" found at \"${info.path}\"`);\n      return false;\n    }); // Sort to place newer versions first\n\n    vsInfo.sort((a, b) => b.versionYear - a.versionYear);\n\n    for (var i = 0; i < vsInfo.length; ++i) {\n      const info = vsInfo[i];\n      this.addLog(`checking VS${info.versionYear} (${info.version}) found ` + `at:\\n\"${info.path}\"`);\n\n      if (info.msBuild) {\n        this.addLog('- found \"Visual Studio C++ core features\"');\n      } else {\n        this.addLog('- \"Visual Studio C++ core features\" missing');\n        continue;\n      }\n\n      if (info.toolset) {\n        this.addLog(`- found VC++ toolset: ${info.toolset}`);\n      } else {\n        this.addLog('- missing any VC++ toolset');\n        continue;\n      }\n\n      if (info.sdk) {\n        this.addLog(`- found Windows SDK: ${info.sdk}`);\n      } else {\n        this.addLog('- missing any Windows SDK');\n        continue;\n      }\n\n      if (!this.checkConfigVersion(info.versionYear, info.path)) {\n        continue;\n      }\n\n      return cb(info);\n    }\n\n    this.addLog('could not find a version of Visual Studio 2017 or newer to use');\n    cb(null);\n  },\n  // Helper - process version information\n  getVersionInfo: function getVersionInfo(info) {\n    const match = /^(\\d+)\\.(\\d+)\\..*/.exec(info.version);\n\n    if (!match) {\n      this.log.silly('- failed to parse version:', info.version);\n      return {};\n    }\n\n    this.log.silly('- version match = %j', match);\n    var ret = {\n      version: info.version,\n      versionMajor: parseInt(match[1], 10),\n      versionMinor: parseInt(match[2], 10)\n    };\n\n    if (ret.versionMajor === 15) {\n      ret.versionYear = 2017;\n      return ret;\n    }\n\n    if (ret.versionMajor === 16) {\n      ret.versionYear = 2019;\n      return ret;\n    }\n\n    if (ret.versionMajor === 17) {\n      ret.versionYear = 2022;\n      return ret;\n    }\n\n    this.log.silly('- unsupported version:', ret.versionMajor);\n    return {};\n  },\n  // Helper - process MSBuild information\n  getMSBuild: function getMSBuild(info, versionYear) {\n    const pkg = 'Microsoft.VisualStudio.VC.MSBuild.Base';\n    const msbuildPath = path.join(info.path, 'MSBuild', 'Current', 'Bin', 'MSBuild.exe');\n\n    if (info.packages.indexOf(pkg) !== -1) {\n      this.log.silly('- found VC.MSBuild.Base');\n\n      if (versionYear === 2017) {\n        return path.join(info.path, 'MSBuild', '15.0', 'Bin', 'MSBuild.exe');\n      }\n\n      if (versionYear === 2019) {\n        return msbuildPath;\n      }\n    } // visual studio 2022 don't has msbuild pkg\n\n\n    if (fs.existsSync(msbuildPath)) {\n      return msbuildPath;\n    }\n\n    return null;\n  },\n  // Helper - process toolset information\n  getToolset: function getToolset(info, versionYear) {\n    const pkg = 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64';\n    const express = 'Microsoft.VisualStudio.WDExpress';\n\n    if (info.packages.indexOf(pkg) !== -1) {\n      this.log.silly('- found VC.Tools.x86.x64');\n    } else if (info.packages.indexOf(express) !== -1) {\n      this.log.silly('- found Visual Studio Express (looking for toolset)');\n    } else {\n      return null;\n    }\n\n    if (versionYear === 2017) {\n      return 'v141';\n    } else if (versionYear === 2019) {\n      return 'v142';\n    } else if (versionYear === 2022) {\n      return 'v143';\n    }\n\n    this.log.silly('- invalid versionYear:', versionYear);\n    return null;\n  },\n  // Helper - process Windows SDK information\n  getSDK: function getSDK(info) {\n    const win8SDK = 'Microsoft.VisualStudio.Component.Windows81SDK';\n    const win10SDKPrefix = 'Microsoft.VisualStudio.Component.Windows10SDK.';\n    const win11SDKPrefix = 'Microsoft.VisualStudio.Component.Windows11SDK.';\n    var Win10or11SDKVer = 0;\n    info.packages.forEach(pkg => {\n      if (!pkg.startsWith(win10SDKPrefix) && !pkg.startsWith(win11SDKPrefix)) {\n        return;\n      }\n\n      const parts = pkg.split('.');\n\n      if (parts.length > 5 && parts[5] !== 'Desktop') {\n        this.log.silly('- ignoring non-Desktop Win10/11SDK:', pkg);\n        return;\n      }\n\n      const foundSdkVer = parseInt(parts[4], 10);\n\n      if (isNaN(foundSdkVer)) {\n        // Microsoft.VisualStudio.Component.Windows10SDK.IpOverUsb\n        this.log.silly('- failed to parse Win10/11SDK number:', pkg);\n        return;\n      }\n\n      this.log.silly('- found Win10/11SDK:', foundSdkVer);\n      Win10or11SDKVer = Math.max(Win10or11SDKVer, foundSdkVer);\n    });\n\n    if (Win10or11SDKVer !== 0) {\n      return `10.0.${Win10or11SDKVer}.0`;\n    } else if (info.packages.indexOf(win8SDK) !== -1) {\n      this.log.silly('- found Win8SDK');\n      return '8.1';\n    }\n\n    return null;\n  },\n  // Find an installation of Visual Studio 2015 to use\n  findVisualStudio2015: function findVisualStudio2015(cb) {\n    return this.findOldVS({\n      version: '14.0',\n      versionMajor: 14,\n      versionMinor: 0,\n      versionYear: 2015,\n      toolset: 'v140'\n    }, cb);\n  },\n  // Find an installation of Visual Studio 2013 to use\n  findVisualStudio2013: function findVisualStudio2013(cb) {\n    if (this.nodeSemver.major >= 9) {\n      this.addLog('not looking for VS2013 as it is only supported up to Node.js 8');\n      return cb(null);\n    }\n\n    return this.findOldVS({\n      version: '12.0',\n      versionMajor: 12,\n      versionMinor: 0,\n      versionYear: 2013,\n      toolset: 'v120'\n    }, cb);\n  },\n  // Helper - common code for VS2013 and VS2015\n  findOldVS: function findOldVS(info, cb) {\n    const regVC7 = ['HKLM\\\\Software\\\\Microsoft\\\\VisualStudio\\\\SxS\\\\VC7', 'HKLM\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\VisualStudio\\\\SxS\\\\VC7'];\n    const regMSBuild = 'HKLM\\\\Software\\\\Microsoft\\\\MSBuild\\\\ToolsVersions';\n    this.addLog(`looking for Visual Studio ${info.versionYear}`);\n    this.regSearchKeys(regVC7, info.version, [], (err, res) => {\n      if (err) {\n        this.addLog('- not found');\n        return cb(null);\n      }\n\n      const vsPath = path.resolve(res, '..');\n      this.addLog(`- found in \"${vsPath}\"`);\n      const msBuildRegOpts = process.arch === 'ia32' ? [] : ['/reg:32'];\n      this.regSearchKeys([`${regMSBuild}\\\\${info.version}`], 'MSBuildToolsPath', msBuildRegOpts, (err, res) => {\n        if (err) {\n          this.addLog('- could not find MSBuild in registry for this version');\n          return cb(null);\n        }\n\n        const msBuild = path.join(res, 'MSBuild.exe');\n        this.addLog(`- MSBuild in \"${msBuild}\"`);\n\n        if (!this.checkConfigVersion(info.versionYear, vsPath)) {\n          return cb(null);\n        }\n\n        info.path = vsPath;\n        info.msBuild = msBuild;\n        info.sdk = null;\n        cb(info);\n      });\n    });\n  },\n  // After finding a usable version of Visual Studio:\n  // - add it to validVersions to be displayed at the end if a specific\n  //   version was requested and not found;\n  // - check if this is the version that was requested.\n  // - check if this matches the Visual Studio Command Prompt\n  checkConfigVersion: function checkConfigVersion(versionYear, vsPath) {\n    this.validVersions.push(versionYear);\n    this.validVersions.push(vsPath);\n\n    if (this.configVersionYear && this.configVersionYear !== versionYear) {\n      this.addLog('- msvs_version does not match this version');\n      return false;\n    }\n\n    if (this.configPath && path.relative(this.configPath, vsPath) !== '') {\n      this.addLog('- msvs_version does not point to this installation');\n      return false;\n    }\n\n    if (this.envVcInstallDir && path.relative(this.envVcInstallDir, vsPath) !== '') {\n      this.addLog('- does not match this Visual Studio Command Prompt');\n      return false;\n    }\n\n    return true;\n  }\n};\nmodule.exports = findVisualStudio;\nmodule.exports.test = {\n  VisualStudioFinder: VisualStudioFinder,\n  findVisualStudio: findVisualStudio\n};","map":null,"metadata":{},"sourceType":"script"}