{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst fs = require('graceful-fs');\n\nconst log = require('npmlog');\n\nconst path = require('path');\n\nfunction parseConfigGypi(config) {\n  // translated from tools/js2c.py of Node.js\n  // 1. string comments\n  config = config.replace(/#.*/g, ''); // 2. join multiline strings\n\n  config = config.replace(/'$\\s+'/mg, ''); // 3. normalize string literals from ' into \"\n\n  config = config.replace(/'/g, '\"');\n  return JSON.parse(config);\n}\n\nfunction getBaseConfigGypi(_x) {\n  return _getBaseConfigGypi.apply(this, arguments);\n}\n\nfunction _getBaseConfigGypi() {\n  _getBaseConfigGypi = _asyncToGenerator(function* ({\n    gyp,\n    nodeDir\n  }) {\n    // try reading $nodeDir/include/node/config.gypi first when:\n    // 1. --dist-url or --nodedir is specified\n    // 2. and --force-process-config is not specified\n    const useCustomHeaders = gyp.opts.nodedir || gyp.opts.disturl || gyp.opts['dist-url'];\n    const shouldReadConfigGypi = useCustomHeaders && !gyp.opts['force-process-config'];\n\n    if (shouldReadConfigGypi && nodeDir) {\n      try {\n        const baseConfigGypiPath = path.resolve(nodeDir, 'include/node/config.gypi');\n        const baseConfigGypi = yield fs.promises.readFile(baseConfigGypiPath);\n        return parseConfigGypi(baseConfigGypi.toString());\n      } catch (err) {\n        log.warn('read config.gypi', err.message);\n      }\n    } // fallback to process.config if it is invalid\n\n\n    return JSON.parse(JSON.stringify(process.config));\n  });\n  return _getBaseConfigGypi.apply(this, arguments);\n}\n\nfunction getCurrentConfigGypi(_x2) {\n  return _getCurrentConfigGypi.apply(this, arguments);\n}\n\nfunction _getCurrentConfigGypi() {\n  _getCurrentConfigGypi = _asyncToGenerator(function* ({\n    gyp,\n    nodeDir,\n    vsInfo\n  }) {\n    const config = yield getBaseConfigGypi({\n      gyp,\n      nodeDir\n    });\n\n    if (!config.target_defaults) {\n      config.target_defaults = {};\n    }\n\n    if (!config.variables) {\n      config.variables = {};\n    }\n\n    const defaults = config.target_defaults;\n    const variables = config.variables; // don't inherit the \"defaults\" from the base config.gypi.\n    // doing so could cause problems in cases where the `node` executable was\n    // compiled on a different machine (with different lib/include paths) than\n    // the machine where the addon is being built to\n\n    defaults.cflags = [];\n    defaults.defines = [];\n    defaults.include_dirs = [];\n    defaults.libraries = []; // set the default_configuration prop\n\n    if ('debug' in gyp.opts) {\n      defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release';\n    }\n\n    if (!defaults.default_configuration) {\n      defaults.default_configuration = 'Release';\n    } // set the target_arch variable\n\n\n    variables.target_arch = gyp.opts.arch || process.arch || 'ia32';\n\n    if (variables.target_arch === 'arm64') {\n      defaults.msvs_configuration_platform = 'ARM64';\n      defaults.xcode_configuration_platform = 'arm64';\n    } // set the node development directory\n\n\n    variables.nodedir = nodeDir; // disable -T \"thin\" static archives by default\n\n    variables.standalone_static_library = gyp.opts.thin ? 0 : 1;\n\n    if (process.platform === 'win32') {\n      defaults.msbuild_toolset = vsInfo.toolset;\n\n      if (vsInfo.sdk) {\n        defaults.msvs_windows_target_platform_version = vsInfo.sdk;\n      }\n\n      if (variables.target_arch === 'arm64') {\n        if (vsInfo.versionMajor > 15 || vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9) {\n          defaults.msvs_enable_marmasm = 1;\n        } else {\n          log.warn('Compiling ARM64 assembly is only available in\\n' + 'Visual Studio 2017 version 15.9 and above');\n        }\n      }\n\n      variables.msbuild_path = vsInfo.msBuild;\n    } // loop through the rest of the opts and add the unknown ones as variables.\n    // this allows for module-specific configure flags like:\n    //\n    //   $ node-gyp configure --shared-libxml2\n\n\n    Object.keys(gyp.opts).forEach(function (opt) {\n      if (opt === 'argv') {\n        return;\n      }\n\n      if (opt in gyp.configDefs) {\n        return;\n      }\n\n      variables[opt.replace(/-/g, '_')] = gyp.opts[opt];\n    });\n    return config;\n  });\n  return _getCurrentConfigGypi.apply(this, arguments);\n}\n\nfunction createConfigGypi(_x3) {\n  return _createConfigGypi.apply(this, arguments);\n}\n\nfunction _createConfigGypi() {\n  _createConfigGypi = _asyncToGenerator(function* ({\n    gyp,\n    buildDir,\n    nodeDir,\n    vsInfo\n  }) {\n    const configFilename = 'config.gypi';\n    const configPath = path.resolve(buildDir, configFilename);\n    log.verbose('build/' + configFilename, 'creating config file');\n    const config = yield getCurrentConfigGypi({\n      gyp,\n      nodeDir,\n      vsInfo\n    }); // ensures that any boolean values in config.gypi get stringified\n\n    function boolsToString(k, v) {\n      if (typeof v === 'boolean') {\n        return String(v);\n      }\n\n      return v;\n    }\n\n    log.silly('build/' + configFilename, config); // now write out the config.gypi file to the build/ dir\n\n    const prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step';\n    const json = JSON.stringify(config, boolsToString, 2);\n    log.verbose('build/' + configFilename, 'writing out config file: %s', configPath);\n    yield fs.promises.writeFile(configPath, [prefix, json, ''].join('\\n'));\n    return configPath;\n  });\n  return _createConfigGypi.apply(this, arguments);\n}\n\nmodule.exports = createConfigGypi;\nmodule.exports.test = {\n  parseConfigGypi: parseConfigGypi,\n  getCurrentConfigGypi: getCurrentConfigGypi\n};","map":null,"metadata":{},"sourceType":"script"}