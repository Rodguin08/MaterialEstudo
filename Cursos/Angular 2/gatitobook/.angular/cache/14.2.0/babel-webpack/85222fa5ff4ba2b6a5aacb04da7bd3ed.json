{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnknownPackageManagerException = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst child_process_1 = require(\"child_process\");\n\nconst ora_1 = __importDefault(require(\"ora\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst src_1 = require(\"../../src\");\n\nconst packageManagers = {\n  'npm': {\n    commands: {\n      installAll: 'install',\n      installPackage: 'install'\n    }\n  },\n  'cnpm': {\n    commands: {\n      installAll: 'install',\n      installPackage: 'install'\n    }\n  },\n  'yarn': {\n    commands: {\n      installPackage: 'add'\n    }\n  },\n  'pnpm': {\n    commands: {\n      installAll: 'install',\n      installPackage: 'install'\n    }\n  }\n};\n\nclass UnknownPackageManagerException extends core_1.BaseException {\n  constructor(name) {\n    super(`Unknown package manager \"${name}\".`);\n  }\n\n}\n\nexports.UnknownPackageManagerException = UnknownPackageManagerException;\n\nfunction default_1(factoryOptions = {}) {\n  const packageManagerName = factoryOptions.packageManager || 'npm';\n  const packageManagerProfile = packageManagers[packageManagerName];\n\n  if (!packageManagerProfile) {\n    throw new UnknownPackageManagerException(packageManagerName);\n  }\n\n  const rootDirectory = factoryOptions.rootDirectory || process.cwd();\n  return (options = {\n    command: 'install'\n  }) => {\n    let taskPackageManagerProfile = packageManagerProfile;\n    let taskPackageManagerName = packageManagerName;\n\n    if (factoryOptions.allowPackageManagerOverride && options.packageManager) {\n      taskPackageManagerProfile = packageManagers[options.packageManager];\n\n      if (!taskPackageManagerProfile) {\n        throw new UnknownPackageManagerException(options.packageManager);\n      }\n\n      taskPackageManagerName = options.packageManager;\n    }\n\n    const bufferedOutput = [];\n    const spawnOptions = {\n      shell: true,\n      cwd: path.join(rootDirectory, options.workingDirectory || '')\n    };\n\n    if (options.hideOutput) {\n      spawnOptions.stdio = options.quiet ? ['ignore', 'ignore', 'pipe'] : 'pipe';\n    } else {\n      spawnOptions.stdio = options.quiet ? ['ignore', 'ignore', 'inherit'] : 'inherit';\n    }\n\n    const args = [];\n\n    if (options.packageName) {\n      if (options.command === 'install') {\n        args.push(taskPackageManagerProfile.commands.installPackage);\n      }\n\n      args.push(options.packageName);\n    } else if (options.command === 'install' && taskPackageManagerProfile.commands.installAll) {\n      args.push(taskPackageManagerProfile.commands.installAll);\n    }\n\n    if (!options.allowScripts) {\n      // Yarn requires special handling since Yarn 2+ no longer has the `--ignore-scripts` flag\n      if (taskPackageManagerName === 'yarn') {\n        spawnOptions.env = { ...process.env,\n          // Supported with yarn 1\n          'npm_config_ignore_scripts': 'true',\n          // Supported with yarn 2+\n          'YARN_ENABLE_SCRIPTS': 'false'\n        };\n      } else {\n        args.push('--ignore-scripts');\n      }\n    }\n\n    if (factoryOptions.registry) {\n      args.push(`--registry=\"${factoryOptions.registry}\"`);\n    }\n\n    if (factoryOptions.force) {\n      args.push('--force');\n    }\n\n    return new rxjs_1.Observable(obs => {\n      var _a, _b;\n\n      const spinner = (0, ora_1.default)({\n        text: `Installing packages (${taskPackageManagerName})...`,\n        // Workaround for https://github.com/sindresorhus/ora/issues/136.\n        discardStdin: process.platform != 'win32'\n      }).start();\n      const childProcess = (0, child_process_1.spawn)(taskPackageManagerName, args, spawnOptions).on('close', code => {\n        if (code === 0) {\n          spinner.succeed('Packages installed successfully.');\n          spinner.stop();\n          obs.next();\n          obs.complete();\n        } else {\n          if (options.hideOutput) {\n            bufferedOutput.forEach(({\n              stream,\n              data\n            }) => stream.write(data));\n          }\n\n          spinner.fail('Package install failed, see above.');\n          obs.error(new src_1.UnsuccessfulWorkflowExecution());\n        }\n      });\n\n      if (options.hideOutput) {\n        (_a = childProcess.stdout) === null || _a === void 0 ? void 0 : _a.on('data', data => bufferedOutput.push({\n          stream: process.stdout,\n          data: data\n        }));\n        (_b = childProcess.stderr) === null || _b === void 0 ? void 0 : _b.on('data', data => bufferedOutput.push({\n          stream: process.stderr,\n          data: data\n        }));\n      }\n    });\n  };\n}\n\nexports.default = default_1;","map":null,"metadata":{},"sourceType":"script"}