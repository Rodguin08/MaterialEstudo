{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.memoize = void 0;\n/**\n * A decorator that memoizes methods and getters.\n *\n * **Note**: Be cautious where and how to use this decorator as the size of the cache will grow unbounded.\n *\n * @see https://en.wikipedia.org/wiki/Memoization\n */\n\nfunction memoize(target, propertyKey, descriptor) {\n  const descriptorPropertyName = descriptor.get ? 'get' : 'value';\n  const originalMethod = descriptor[descriptorPropertyName];\n\n  if (typeof originalMethod !== 'function') {\n    throw new Error('Memoize decorator can only be used on methods or get accessors.');\n  }\n\n  const cache = new Map();\n  return { ...descriptor,\n    [descriptorPropertyName]: function (...args) {\n      for (const arg of args) {\n        if (!isJSONSerializable(arg)) {\n          throw new Error(`Argument ${isNonPrimitive(arg) ? arg.toString() : arg} is JSON serializable.`);\n        }\n      }\n\n      const key = JSON.stringify(args);\n\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n\n      const result = originalMethod.apply(this, args);\n      cache.set(key, result);\n      return result;\n    }\n  };\n}\n\nexports.memoize = memoize;\n/** Method to check if value is a non primitive. */\n\nfunction isNonPrimitive(value) {\n  return value !== null && typeof value === 'object' || typeof value === 'function' || typeof value === 'symbol';\n}\n/** Method to check if the values are JSON serializable */\n\n\nfunction isJSONSerializable(value) {\n  if (!isNonPrimitive(value)) {\n    // Can be seralized since it's a primitive.\n    return true;\n  }\n\n  let nestedValues;\n\n  if (Array.isArray(value)) {\n    // It's an array, check each item.\n    nestedValues = value;\n  } else if (Object.prototype.toString.call(value) === '[object Object]') {\n    // It's a plain object, check each value.\n    nestedValues = Object.values(value);\n  }\n\n  if (!nestedValues || nestedValues.some(v => !isJSONSerializable(v))) {\n    return false;\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}