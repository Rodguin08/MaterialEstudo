{"ast":null,"code":"'use strict';\n\nconst semver = require('semver');\n\nconst permanentModules = ['assert', 'buffer', 'child_process', 'cluster', 'console', 'constants', 'crypto', 'dgram', 'dns', 'domain', 'events', 'fs', 'http', 'https', 'module', 'net', 'os', 'path', 'punycode', 'querystring', 'readline', 'repl', 'stream', 'string_decoder', 'sys', 'timers', 'tls', 'tty', 'url', 'util', 'vm', 'zlib'];\nconst versionLockedModules = {\n  freelist: '<6.0.0',\n  v8: '>=1.0.0',\n  process: '>=1.1.0',\n  inspector: '>=8.0.0',\n  async_hooks: '>=8.1.0',\n  http2: '>=8.4.0',\n  perf_hooks: '>=8.5.0',\n  trace_events: '>=10.0.0',\n  worker_threads: '>=12.0.0',\n  'node:test': '>=18.0.0'\n};\nconst experimentalModules = {\n  worker_threads: '>=10.5.0',\n  wasi: '>=12.16.0',\n  diagnostics_channel: '^14.17.0 || >=15.1.0'\n};\n\nmodule.exports = ({\n  version = process.version,\n  experimental = false\n} = {}) => {\n  const builtins = [...permanentModules];\n\n  for (const [name, semverRange] of Object.entries(versionLockedModules)) {\n    if (version === '*' || semver.satisfies(version, semverRange)) {\n      builtins.push(name);\n    }\n  }\n\n  if (experimental) {\n    for (const [name, semverRange] of Object.entries(experimentalModules)) {\n      if (!builtins.includes(name) && (version === '*' || semver.satisfies(version, semverRange))) {\n        builtins.push(name);\n      }\n    }\n  }\n\n  return builtins;\n};","map":null,"metadata":{},"sourceType":"script"}