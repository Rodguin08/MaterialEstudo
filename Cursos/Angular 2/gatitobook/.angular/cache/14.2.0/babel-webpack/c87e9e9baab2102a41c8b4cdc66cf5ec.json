{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subscribeToWorkflow = void 0;\n\nconst core_1 = /*#__PURE__*/require(\"@angular-devkit/core\");\n\nconst color_1 = /*#__PURE__*/require(\"../../utilities/color\");\n\nfunction subscribeToWorkflow(workflow, logger) {\n  const files = new Set();\n  let error = false;\n  let logs = [];\n  const reporterSubscription = workflow.reporter.subscribe(event => {\n    // Strip leading slash to prevent confusion.\n    const eventPath = event.path.charAt(0) === '/' ? event.path.substring(1) : event.path;\n\n    switch (event.kind) {\n      case 'error':\n        error = true;\n        const desc = event.description == 'alreadyExist' ? 'already exists' : 'does not exist';\n        logger.error(`ERROR! ${eventPath} ${desc}.`);\n        break;\n\n      case 'update':\n        logs.push(core_1.tags.oneLine`\n              ${color_1.colors.cyan('UPDATE')} ${eventPath} (${event.content.length} bytes)\n            `);\n        files.add(eventPath);\n        break;\n\n      case 'create':\n        logs.push(core_1.tags.oneLine`\n              ${color_1.colors.green('CREATE')} ${eventPath} (${event.content.length} bytes)\n            `);\n        files.add(eventPath);\n        break;\n\n      case 'delete':\n        logs.push(`${color_1.colors.yellow('DELETE')} ${eventPath}`);\n        files.add(eventPath);\n        break;\n\n      case 'rename':\n        const eventToPath = event.to.charAt(0) === '/' ? event.to.substring(1) : event.to;\n        logs.push(`${color_1.colors.blue('RENAME')} ${eventPath} => ${eventToPath}`);\n        files.add(eventPath);\n        break;\n    }\n  });\n  const lifecycleSubscription = workflow.lifeCycle.subscribe(event => {\n    if (event.kind == 'end' || event.kind == 'post-tasks-start') {\n      if (!error) {\n        // Output the logging queue, no error happened.\n        logs.forEach(log => logger.info(log));\n      }\n\n      logs = [];\n      error = false;\n    }\n  });\n  return {\n    files,\n    error,\n    unsubscribe: () => {\n      reporterSubscription.unsubscribe();\n      lifecycleSubscription.unsubscribe();\n    }\n  };\n}\n\nexports.subscribeToWorkflow = subscribeToWorkflow;","map":null,"metadata":{},"sourceType":"script"}