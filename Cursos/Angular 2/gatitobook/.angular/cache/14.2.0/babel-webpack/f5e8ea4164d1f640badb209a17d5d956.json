{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst os = require('os');\n\nconst homedir = os.homedir();\nconst tmpdir = os.tmpdir();\nconst {\n  env\n} = process;\n\nconst macos = name => {\n  const library = path.join(homedir, 'Library');\n  return {\n    data: path.join(library, 'Application Support', name),\n    config: path.join(library, 'Preferences', name),\n    cache: path.join(library, 'Caches', name),\n    log: path.join(library, 'Logs', name),\n    temp: path.join(tmpdir, name)\n  };\n};\n\nconst windows = name => {\n  const appData = env.APPDATA || path.join(homedir, 'AppData', 'Roaming');\n  const localAppData = env.LOCALAPPDATA || path.join(homedir, 'AppData', 'Local');\n  return {\n    // Data/config/cache/log are invented by me as Windows isn't opinionated about this\n    data: path.join(localAppData, name, 'Data'),\n    config: path.join(appData, name, 'Config'),\n    cache: path.join(localAppData, name, 'Cache'),\n    log: path.join(localAppData, name, 'Log'),\n    temp: path.join(tmpdir, name)\n  };\n}; // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n\n\nconst linux = name => {\n  const username = path.basename(homedir);\n  return {\n    data: path.join(env.XDG_DATA_HOME || path.join(homedir, '.local', 'share'), name),\n    config: path.join(env.XDG_CONFIG_HOME || path.join(homedir, '.config'), name),\n    cache: path.join(env.XDG_CACHE_HOME || path.join(homedir, '.cache'), name),\n    // https://wiki.debian.org/XDGBaseDirectorySpecification#state\n    log: path.join(env.XDG_STATE_HOME || path.join(homedir, '.local', 'state'), name),\n    temp: path.join(tmpdir, username, name)\n  };\n};\n\nconst envPaths = (name, options) => {\n  if (typeof name !== 'string') {\n    throw new TypeError(`Expected string, got ${typeof name}`);\n  }\n\n  options = Object.assign({\n    suffix: 'nodejs'\n  }, options);\n\n  if (options.suffix) {\n    // Add suffix to prevent possible conflict with native apps\n    name += `-${options.suffix}`;\n  }\n\n  if (process.platform === 'darwin') {\n    return macos(name);\n  }\n\n  if (process.platform === 'win32') {\n    return windows(name);\n  }\n\n  return linux(name);\n};\n\nmodule.exports = envPaths; // TODO: Remove this for the next major release\n\nmodule.exports.default = envPaths;","map":null,"metadata":{},"sourceType":"script"}