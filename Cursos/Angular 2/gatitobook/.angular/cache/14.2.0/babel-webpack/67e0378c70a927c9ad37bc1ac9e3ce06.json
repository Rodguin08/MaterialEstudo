{"ast":null,"code":"const {\n  dirname,\n  resolve\n} = require('path');\n\nconst url = require('url');\n\nconst fs = require('../fs.js'); // given a path, find the owner of the nearest parent\n\n\nconst find = path => {\n  // if we have no getuid, permissions are irrelevant on this platform\n  if (!process.getuid) {\n    return {};\n  } // fs methods accept URL objects with a scheme of file: so we need to unwrap\n  // those into an actual path string before we can resolve it\n\n\n  const resolved = path != null && path.href && path.origin ? resolve(url.fileURLToPath(path)) : resolve(path);\n  let stat;\n\n  try {\n    stat = fs.lstatSync(resolved);\n  } finally {\n    // if we got a stat, return its contents\n    if (stat) {\n      return {\n        uid: stat.uid,\n        gid: stat.gid\n      };\n    } // try the parent directory\n\n\n    if (resolved !== dirname(resolved)) {\n      return find(dirname(resolved));\n    } // no more parents, never got a stat, just return an empty object\n\n\n    return {};\n  }\n}; // given a path, uid, and gid update the ownership of the path if necessary\n\n\nconst update = (path, uid, gid) => {\n  // nothing to update, just exit\n  if (uid === undefined && gid === undefined) {\n    return;\n  }\n\n  try {\n    // see if the permissions are already the same, if they are we don't\n    // need to do anything, so return early\n    const stat = fs.statSync(path);\n\n    if (uid === stat.uid && gid === stat.gid) {\n      return;\n    }\n  } catch {// ignore errors\n  }\n\n  try {\n    fs.chownSync(path, uid, gid);\n  } catch {// ignore errors\n  }\n}; // accepts a `path` and the `owner` property of an options object and normalizes\n// it into an object with numerical `uid` and `gid`\n\n\nconst validate = (path, input) => {\n  let uid;\n  let gid;\n\n  if (typeof input === 'string' || typeof input === 'number') {\n    uid = input;\n    gid = input;\n  } else if (input && typeof input === 'object') {\n    uid = input.uid;\n    gid = input.gid;\n  }\n\n  if (uid === 'inherit' || gid === 'inherit') {\n    const owner = find(path);\n\n    if (uid === 'inherit') {\n      uid = owner.uid;\n    }\n\n    if (gid === 'inherit') {\n      gid = owner.gid;\n    }\n  }\n\n  return {\n    uid,\n    gid\n  };\n};\n\nmodule.exports = {\n  find,\n  update,\n  validate\n};","map":null,"metadata":{},"sourceType":"script"}