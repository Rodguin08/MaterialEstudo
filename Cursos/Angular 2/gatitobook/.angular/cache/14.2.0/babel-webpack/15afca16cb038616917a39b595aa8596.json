{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = /*#__PURE__*/require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\n/*#__PURE__*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArchitectBaseCommandModule = void 0;\n\nconst architect_1 = /*#__PURE__*/require(\"@angular-devkit/architect\");\n\nconst node_1 = /*#__PURE__*/require(\"@angular-devkit/architect/node\");\n\nconst core_1 = /*#__PURE__*/require(\"@angular-devkit/core\");\n\nconst child_process_1 = /*#__PURE__*/require(\"child_process\");\n\nconst fs_1 = /*#__PURE__*/require(\"fs\");\n\nconst path_1 = /*#__PURE__*/require(\"path\");\n\nconst analytics_1 = /*#__PURE__*/require(\"../analytics/analytics\");\n\nconst error_1 = /*#__PURE__*/require(\"../utilities/error\");\n\nconst prompt_1 = /*#__PURE__*/require(\"../utilities/prompt\");\n\nconst tty_1 = /*#__PURE__*/require(\"../utilities/tty\");\n\nconst command_module_1 = /*#__PURE__*/require(\"./command-module\");\n\nconst json_schema_1 = /*#__PURE__*/require(\"./utilities/json-schema\");\n\nclass ArchitectBaseCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.scope = command_module_1.CommandScope.In;\n    this.shouldReportAnalytics = false;\n  }\n\n  runSingleTarget(target, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const architectHost = yield _this.getArchitectHost();\n      let builderName;\n\n      try {\n        builderName = yield architectHost.getBuilderNameForTarget(target);\n      } catch (e) {\n        (0, error_1.assertIsError)(e);\n        return _this.onMissingTarget(e.message);\n      }\n\n      yield _this.reportAnalytics({ ...(yield architectHost.getOptionsForTarget(target)),\n        ...options\n      });\n      const {\n        logger\n      } = _this.context;\n      const run = yield _this.getArchitect().scheduleTarget(target, options, {\n        logger,\n        analytics: (0, analytics_1.isPackageNameSafeForAnalytics)(builderName) ? yield _this.getAnalytics() : undefined\n      });\n      const {\n        error,\n        success\n      } = yield run.output.toPromise();\n      yield run.stop();\n\n      if (error) {\n        logger.error(error);\n      }\n\n      return success ? 0 : 1;\n    })();\n  }\n\n  getArchitectHost() {\n    if (this._architectHost) {\n      return this._architectHost;\n    }\n\n    const workspace = this.getWorkspaceOrThrow();\n    return this._architectHost = new node_1.WorkspaceNodeModulesArchitectHost(workspace, workspace.basePath);\n  }\n\n  getArchitect() {\n    if (this._architect) {\n      return this._architect;\n    }\n\n    const registry = new core_1.json.schema.CoreSchemaRegistry();\n    registry.addPostTransform(core_1.json.schema.transforms.addUndefinedDefaults);\n    registry.useXDeprecatedProvider(msg => this.context.logger.warn(msg));\n    const architectHost = this.getArchitectHost();\n    return this._architect = new architect_1.Architect(architectHost, registry);\n  }\n\n  getArchitectTargetOptions(target) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const architectHost = _this2.getArchitectHost();\n\n      let builderConf;\n\n      try {\n        builderConf = yield architectHost.getBuilderNameForTarget(target);\n      } catch {\n        return [];\n      }\n\n      let builderDesc;\n\n      try {\n        builderDesc = yield architectHost.resolveBuilder(builderConf);\n      } catch (e) {\n        (0, error_1.assertIsError)(e);\n\n        if (e.code === 'MODULE_NOT_FOUND') {\n          _this2.warnOnMissingNodeModules();\n\n          throw new command_module_1.CommandModuleError(`Could not find the '${builderConf}' builder's node package.`);\n        }\n\n        throw e;\n      }\n\n      return (0, json_schema_1.parseJsonSchemaToOptions)(new core_1.json.schema.CoreSchemaRegistry(), builderDesc.optionSchema, true);\n    })();\n  }\n\n  warnOnMissingNodeModules() {\n    var _a;\n\n    const basePath = (_a = this.context.workspace) === null || _a === void 0 ? void 0 : _a.basePath;\n\n    if (!basePath) {\n      return;\n    } // Check for a `node_modules` directory (npm, yarn non-PnP, etc.)\n\n\n    if ((0, fs_1.existsSync)((0, path_1.resolve)(basePath, 'node_modules'))) {\n      return;\n    } // Check for yarn PnP files\n\n\n    if ((0, fs_1.existsSync)((0, path_1.resolve)(basePath, '.pnp.js')) || (0, fs_1.existsSync)((0, path_1.resolve)(basePath, '.pnp.cjs')) || (0, fs_1.existsSync)((0, path_1.resolve)(basePath, '.pnp.mjs'))) {\n      return;\n    }\n\n    this.context.logger.warn(`Node packages may not be installed. Try installing with '${this.context.packageManager.name} install'.`);\n  }\n\n  getArchitectTarget() {\n    return this.commandName;\n  }\n\n  onMissingTarget(defaultMessage) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        logger\n      } = _this3.context;\n      const choices = _this3.missingTargetChoices;\n\n      if (!(choices === null || choices === void 0 ? void 0 : choices.length)) {\n        logger.error(defaultMessage);\n        return 1;\n      }\n\n      const missingTargetMessage = `Cannot find \"${_this3.getArchitectTarget()}\" target for the specified project.\\n` + `You can add a package that implements these capabilities.\\n\\n` + `For example:\\n` + choices.map(({\n        name,\n        value\n      }) => `  ${name}: ng add ${value}`).join('\\n') + '\\n';\n\n      if ((0, tty_1.isTTY)()) {\n        // Use prompts to ask the user if they'd like to install a package.\n        logger.warn(missingTargetMessage);\n        const packageToInstall = yield _this3.getMissingTargetPackageToInstall(choices);\n\n        if (packageToInstall) {\n          // Example run: `ng add @angular-eslint/schematics`.\n          const binPath = (0, path_1.resolve)(__dirname, '../../bin/ng.js');\n          const {\n            error\n          } = (0, child_process_1.spawnSync)(process.execPath, [binPath, 'add', packageToInstall], {\n            stdio: 'inherit'\n          });\n\n          if (error) {\n            throw error;\n          }\n        }\n      } else {\n        // Non TTY display error message.\n        logger.error(missingTargetMessage);\n      }\n\n      return 1;\n    })();\n  }\n\n  getMissingTargetPackageToInstall(choices) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (choices.length === 1) {\n        // Single choice\n        const {\n          name,\n          value\n        } = choices[0];\n\n        if (yield (0, prompt_1.askConfirmation)(`Would you like to add ${name} now?`, true, false)) {\n          return value;\n        }\n\n        return null;\n      } // Multiple choice\n\n\n      return (0, prompt_1.askQuestion)(`Would you like to add a package with \"${_this4.getArchitectTarget()}\" capabilities now?`, [{\n        name: 'No',\n        value: null\n      }, ...choices], 0, null);\n    })();\n  }\n\n}\n\nexports.ArchitectBaseCommandModule = ArchitectBaseCommandModule;","map":null,"metadata":{},"sourceType":"script"}