{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UpdateRecorderBom = exports.UpdateRecorderBase = void 0;\n\nconst exception_1 = require(\"../exception/exception\");\n\nconst update_buffer_1 = require(\"../utility/update-buffer\");\n\nclass UpdateRecorderBase {\n  constructor(entry) {\n    this._original = Buffer.from(entry.content);\n    this._content = update_buffer_1.UpdateBufferBase.create(entry.content);\n    this._path = entry.path;\n  }\n\n  static createFromFileEntry(entry) {\n    const c0 = entry.content.byteLength > 0 && entry.content.readUInt8(0);\n    const c1 = entry.content.byteLength > 1 && entry.content.readUInt8(1);\n    const c2 = entry.content.byteLength > 2 && entry.content.readUInt8(2); // Check if we're BOM.\n\n    if (c0 == 0xef && c1 == 0xbb && c2 == 0xbf) {\n      return new UpdateRecorderBom(entry);\n    } else if (c0 === 0xff && c1 == 0xfe) {\n      return new UpdateRecorderBom(entry);\n    } else if (c0 === 0xfe && c1 == 0xff) {\n      return new UpdateRecorderBom(entry);\n    }\n\n    return new UpdateRecorderBase(entry);\n  }\n\n  get path() {\n    return this._path;\n  } // These just record changes.\n\n\n  insertLeft(index, content) {\n    this._content.insertLeft(index, typeof content == 'string' ? Buffer.from(content) : content);\n\n    return this;\n  }\n\n  insertRight(index, content) {\n    this._content.insertRight(index, typeof content == 'string' ? Buffer.from(content) : content);\n\n    return this;\n  }\n\n  remove(index, length) {\n    this._content.remove(index, length);\n\n    return this;\n  }\n\n  apply(content) {\n    if (!content.equals(this._content.original)) {\n      throw new exception_1.ContentHasMutatedException(this.path);\n    }\n\n    return this._content.generate();\n  }\n\n}\n\nexports.UpdateRecorderBase = UpdateRecorderBase;\n\nclass UpdateRecorderBom extends UpdateRecorderBase {\n  constructor(entry, _delta = 1) {\n    super(entry);\n    this._delta = _delta;\n  }\n\n  insertLeft(index, content) {\n    return super.insertLeft(index + this._delta, content);\n  }\n\n  insertRight(index, content) {\n    return super.insertRight(index + this._delta, content);\n  }\n\n  remove(index, length) {\n    return super.remove(index + this._delta, length);\n  }\n\n}\n\nexports.UpdateRecorderBom = UpdateRecorderBom;","map":null,"metadata":{},"sourceType":"script"}