{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fileBufferToString = exports.fileBuffer = exports.stringToFileBuffer = void 0;\n\nfunction stringToFileBuffer(str) {\n  // If we're in Node...\n  if (typeof Buffer !== 'undefined' && typeof Buffer.from === 'function') {\n    const buf = Buffer.from(str);\n    const ab = new ArrayBuffer(buf.length);\n    const view = new Uint8Array(ab);\n\n    for (let i = 0; i < buf.length; ++i) {\n      view[i] = buf[i];\n    }\n\n    return ab;\n  } else if (typeof TextEncoder !== 'undefined') {\n    // Modern browsers implement TextEncode.\n    return new TextEncoder('utf-8').encode(str).buffer;\n  } else {\n    // Slowest method but sure to be compatible with every platform.\n    const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n\n    const bufView = new Uint16Array(buf);\n\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n      bufView[i] = str.charCodeAt(i);\n    }\n\n    return buf;\n  }\n}\n\nexports.stringToFileBuffer = stringToFileBuffer;\n\nconst fileBuffer = (strings, ...values) => {\n  return stringToFileBuffer(String.raw(strings, ...values));\n};\n\nexports.fileBuffer = fileBuffer;\n\nfunction fileBufferToString(fileBuffer) {\n  if (fileBuffer.toString.length == 1) {\n    return fileBuffer.toString('utf-8');\n  } else if (typeof Buffer !== 'undefined') {\n    return Buffer.from(fileBuffer).toString('utf-8');\n  } else if (typeof TextDecoder !== 'undefined') {\n    // Modern browsers implement TextEncode.\n    return new TextDecoder('utf-8').decode(new Uint8Array(fileBuffer));\n  } else {\n    // Slowest method but sure to be compatible with every platform.\n    const bufView = new Uint8Array(fileBuffer);\n    const bufLength = bufView.length;\n    let result = '';\n    let chunkLength = Math.pow(2, 16) - 1; // We have to chunk it because String.fromCharCode.apply will throw\n    // `Maximum call stack size exceeded` on big inputs.\n\n    for (let i = 0; i < bufLength; i += chunkLength) {\n      if (i + chunkLength > bufLength) {\n        chunkLength = bufLength - i;\n      }\n\n      result += String.fromCharCode.apply(null, [...bufView.subarray(i, i + chunkLength)]);\n    }\n\n    return result;\n  }\n}\n\nexports.fileBufferToString = fileBufferToString;","map":null,"metadata":{},"sourceType":"script"}