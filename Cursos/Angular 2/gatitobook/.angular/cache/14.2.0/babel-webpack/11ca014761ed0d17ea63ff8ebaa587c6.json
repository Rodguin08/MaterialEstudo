{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConsoleLogger = void 0;\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst src_1 = require(\"../src\");\n/**\n * A Logger that sends information to STDOUT and STDERR.\n */\n\n\nfunction createConsoleLogger(verbose = false, stdout = process.stdout, stderr = process.stderr, colors) {\n  const logger = new src_1.logging.IndentLogger('cling');\n  logger.pipe((0, operators_1.filter)(entry => entry.level !== 'debug' || verbose)).subscribe(entry => {\n    const color = colors && colors[entry.level];\n    let output = stdout;\n\n    switch (entry.level) {\n      case 'warn':\n      case 'fatal':\n      case 'error':\n        output = stderr;\n        break;\n    } // If we do console.log(message) or process.stdout.write(message + '\\n'), the process might\n    // stop before the whole message is written and the stream is flushed. This happens when\n    // streams are asynchronous.\n    //\n    // NodeJS IO streams are different depending on platform and usage. In POSIX environment,\n    // for example, they're asynchronous when writing to a pipe, but synchronous when writing\n    // to a TTY. In windows, it's the other way around. You can verify which is which with\n    // stream.isTTY and platform, but this is not good enough.\n    // In the async case, one should wait for the callback before sending more data or\n    // continuing the process. In our case it would be rather hard to do (but not impossible).\n    //\n    // Instead we take the easy way out and simply chunk the message and call the write\n    // function while the buffer drain itself asynchronously. With a smaller chunk size than\n    // the buffer, we are mostly certain that it works. In this case, the chunk has been picked\n    // as half a page size (4096/2 = 2048), minus some bytes for the color formatting.\n    // On POSIX it seems the buffer is 2 pages (8192), but just to be sure (could be different\n    // by platform).\n    //\n    // For more details, see https://nodejs.org/api/process.html#process_a_note_on_process_i_o\n\n\n    const chunkSize = 2000; // Small chunk.\n\n    let message = entry.message;\n\n    while (message) {\n      const chunk = message.slice(0, chunkSize);\n      message = message.slice(chunkSize);\n      output.write(color ? color(chunk) : chunk);\n    }\n\n    output.write('\\n');\n  });\n  return logger;\n}\n\nexports.createConsoleLogger = createConsoleLogger;","map":null,"metadata":{},"sourceType":"script"}