{"ast":null,"code":"'use strict';\n\nconst gitHosts = require('./git-host-info.js');\n\nclass GitHost {\n  constructor(type, user, auth, project, committish, defaultRepresentation, opts = {}) {\n    Object.assign(this, gitHosts[type]);\n    this.type = type;\n    this.user = user;\n    this.auth = auth;\n    this.project = project;\n    this.committish = committish;\n    this.default = defaultRepresentation;\n    this.opts = opts;\n  }\n\n  hash() {\n    return this.committish ? `#${this.committish}` : '';\n  }\n\n  ssh(opts) {\n    return this._fill(this.sshtemplate, opts);\n  }\n\n  _fill(template, opts) {\n    if (typeof template === 'function') {\n      const options = { ...this,\n        ...this.opts,\n        ...opts\n      }; // the path should always be set so we don't end up with 'undefined' in urls\n\n      if (!options.path) {\n        options.path = '';\n      } // template functions will insert the leading slash themselves\n\n\n      if (options.path.startsWith('/')) {\n        options.path = options.path.slice(1);\n      }\n\n      if (options.noCommittish) {\n        options.committish = null;\n      }\n\n      const result = template(options);\n      return options.noGitPlus && result.startsWith('git+') ? result.slice(4) : result;\n    }\n\n    return null;\n  }\n\n  sshurl(opts) {\n    return this._fill(this.sshurltemplate, opts);\n  }\n\n  browse(path, fragment, opts) {\n    // not a string, treat path as opts\n    if (typeof path !== 'string') {\n      return this._fill(this.browsetemplate, path);\n    }\n\n    if (typeof fragment !== 'string') {\n      opts = fragment;\n      fragment = null;\n    }\n\n    return this._fill(this.browsefiletemplate, { ...opts,\n      fragment,\n      path\n    });\n  }\n\n  docs(opts) {\n    return this._fill(this.docstemplate, opts);\n  }\n\n  bugs(opts) {\n    return this._fill(this.bugstemplate, opts);\n  }\n\n  https(opts) {\n    return this._fill(this.httpstemplate, opts);\n  }\n\n  git(opts) {\n    return this._fill(this.gittemplate, opts);\n  }\n\n  shortcut(opts) {\n    return this._fill(this.shortcuttemplate, opts);\n  }\n\n  path(opts) {\n    return this._fill(this.pathtemplate, opts);\n  }\n\n  tarball(opts) {\n    return this._fill(this.tarballtemplate, { ...opts,\n      noCommittish: false\n    });\n  }\n\n  file(path, opts) {\n    return this._fill(this.filetemplate, { ...opts,\n      path\n    });\n  }\n\n  edit(path, opts) {\n    return this._fill(this.edittemplate, { ...opts,\n      path\n    });\n  }\n\n  getDefaultRepresentation() {\n    return this.default;\n  }\n\n  toString(opts) {\n    if (this.default && typeof this[this.default] === 'function') {\n      return this[this.default](opts);\n    }\n\n    return this.sshurl(opts);\n  }\n\n}\n\nmodule.exports = GitHost;","map":null,"metadata":{},"sourceType":"script"}