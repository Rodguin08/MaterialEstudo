{"ast":null,"code":"'use strict';\n\nconst log = require('npmlog');\n\nconst semver = require('semver');\n\nconst cp = require('child_process');\n\nconst extend = require('util')._extend; // eslint-disable-line\n\n\nconst win = process.platform === 'win32';\n\nconst logWithPrefix = require('./util').logWithPrefix;\n\nconst systemDrive = process.env.SystemDrive || 'C:';\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo();\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`;\nconst foundLocalAppData = process.env.LOCALAPPDATA || username;\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`;\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`;\nconst winDefaultLocationsArray = [];\n\nfor (const majorMinor of ['39', '38', '37', '36']) {\n  if (foundLocalAppData) {\n    winDefaultLocationsArray.push(`${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}\\\\python.exe`, `${programFiles}\\\\Python${majorMinor}\\\\python.exe`, `${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}-32\\\\python.exe`, `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`, `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`);\n  } else {\n    winDefaultLocationsArray.push(`${programFiles}\\\\Python${majorMinor}\\\\python.exe`, `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`, `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`);\n  }\n}\n\nfunction getOsUserInfo() {\n  try {\n    return require('os').userInfo().username;\n  } catch (e) {}\n}\n\nfunction PythonFinder(configPython, callback) {\n  this.callback = callback;\n  this.configPython = configPython;\n  this.errorLog = [];\n}\n\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '>=3.6.0',\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: winDefaultLocationsArray,\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog(message) {\n    this.log.verbose(message);\n    this.errorLog.push(message);\n  },\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython() {\n    const SKIP = 0;\n    const FAIL = 1;\n    var toCheck = getChecks.apply(this);\n\n    function getChecks() {\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: () => {\n            this.addLog('checking Python explicitly set from NODE_GYP_FORCE_PYTHON');\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' + `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`);\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }];\n      }\n\n      var checks = [{\n        before: () => {\n          if (!this.configPython) {\n            this.addLog('Python is not set from command line or npm configuration');\n            return SKIP;\n          }\n\n          this.addLog('checking Python explicitly set from command line or ' + 'npm configuration');\n          this.addLog('- \"--python=\" or \"npm config get python\" is ' + `\"${this.configPython}\"`);\n        },\n        check: this.checkCommand,\n        arg: this.configPython\n      }, {\n        before: () => {\n          if (!this.env.PYTHON) {\n            this.addLog('Python is not set from environment variable ' + 'PYTHON');\n            return SKIP;\n          }\n\n          this.addLog('checking Python explicitly set from environment ' + 'variable PYTHON');\n          this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`);\n        },\n        check: this.checkCommand,\n        arg: this.env.PYTHON\n      }, {\n        before: () => {\n          this.addLog('checking if \"python3\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python3'\n      }, {\n        before: () => {\n          this.addLog('checking if \"python\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python'\n      }];\n\n      if (this.win) {\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          const location = this.winDefaultLocations[i];\n          checks.push({\n            before: () => {\n              this.addLog('checking if Python is ' + `${location}`);\n            },\n            check: this.checkExecPath,\n            arg: location\n          });\n        }\n\n        checks.push({\n          before: () => {\n            this.addLog('checking if the py launcher can be used to find Python 3');\n          },\n          check: this.checkPyLauncher\n        });\n      }\n\n      return checks;\n    }\n\n    function runChecks(err) {\n      this.log.silly('runChecks: err = %j', err && err.stack || err);\n      const check = toCheck.shift();\n\n      if (!check) {\n        return this.fail();\n      }\n\n      const before = check.before.apply(this);\n\n      if (before === SKIP) {\n        return runChecks.apply(this);\n      }\n\n      if (before === FAIL) {\n        return this.fail();\n      }\n\n      const args = [runChecks.bind(this)];\n\n      if (check.arg) {\n        args.unshift(check.arg);\n      }\n\n      check.check.apply(this, args);\n    }\n\n    runChecks.apply(this);\n  },\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand(command, errorCallback) {\n    var exec = command;\n    var args = this.argsExecutable;\n    var shell = false;\n\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = `\"${exec}\"`;\n      args = args.map(a => `\"${a}\"`);\n      shell = true;\n    }\n\n    this.log.verbose(`- executing \"${command}\" to get executable path`);\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(`- \"${command}\" is not in PATH or produced an error`);\n        return errorCallback(err);\n      }\n\n      this.addLog(`- executable path is \"${execPath}\"`);\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports Python 2 and Python 3, we should\n  // explicitly request a Python 3 version. This is done by supplying \"-3\" as\n  // the first command line argument. Since \"py.exe -3\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPyLauncher: function checkPyLauncher(errorCallback) {\n    this.log.verbose(`- executing \"${this.pyLauncher}\" to get Python 3 executable path`);\n    this.run(this.pyLauncher, ['-3', ...this.argsExecutable], false, function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n      if (err) {\n        this.addLog(`- \"${this.pyLauncher}\" is not in PATH or produced an error`);\n        return errorCallback(err);\n      }\n\n      this.addLog(`- executable path is \"${execPath}\"`);\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath(execPath, errorCallback) {\n    this.log.verbose(`- executing \"${execPath}\" to get version`);\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(`- \"${execPath}\" could not be run`);\n        return errorCallback(err);\n      }\n\n      this.addLog(`- version is \"${version}\"`);\n      const range = new semver.Range(this.semverRange);\n      var valid = false;\n\n      try {\n        valid = range.test(version);\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack);\n        this.addLog(`- \"${execPath}\" does not have a valid version`);\n        this.addLog('- is it a Python executable?');\n        return errorCallback(err);\n      }\n\n      if (!valid) {\n        this.addLog(`- version is ${version} - should be ${this.semverRange}`);\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED');\n        return errorCallback(new Error(`Found unsupported Python version ${version}`));\n      }\n\n      this.succeed(execPath, version);\n    }.bind(this));\n  },\n  // Run an executable or shell command, trimming the output.\n  run: function run(exec, args, shell, callback) {\n    var env = extend({}, this.env);\n    env.TERM = 'dumb';\n    const opts = {\n      env: env,\n      shell: shell\n    };\n    this.log.silly('execFile: exec = %j', exec);\n    this.log.silly('execFile: args = %j', args);\n    this.log.silly('execFile: opts = %j', opts);\n\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this));\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack);\n      return callback(err);\n    }\n\n    function execFileCallback(err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', err && err.stack || err);\n      this.log.silly('execFile result: stdout = %j', stdout);\n      this.log.silly('execFile result: stderr = %j', stderr);\n\n      if (err) {\n        return callback(err);\n      }\n\n      const execPath = stdout.trim();\n      callback(null, execPath);\n    }\n  },\n  succeed: function succeed(execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`);\n    process.nextTick(this.callback.bind(null, null, execPath));\n  },\n  fail: function fail() {\n    const errorLog = this.errorLog.join('\\n');\n    const pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe' : '/path/to/pythonexecutable'; // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n\n    const info = ['**********************************************************', 'You need to install the latest version of Python.', 'Node-gyp should be able to find and use Python. If not,', 'you can try one of the following options:', `- Use the switch --python=\"${pathExample}\"`, '  (accepted by both node-gyp and npm)', '- Set the environment variable PYTHON', '- Set the npm configuration variable python:', `  npm config set python \"${pathExample}\"`, 'For more information consult the documentation at:', 'https://github.com/nodejs/node-gyp#installation', '**********************************************************'].join('\\n');\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`);\n    process.nextTick(this.callback.bind(null, new Error('Could not find any Python installation to use')));\n  }\n};\n\nfunction findPython(configPython, callback) {\n  var finder = new PythonFinder(configPython, callback);\n  finder.findPython();\n}\n\nmodule.exports = findPython;\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n};","map":null,"metadata":{},"sourceType":"script"}