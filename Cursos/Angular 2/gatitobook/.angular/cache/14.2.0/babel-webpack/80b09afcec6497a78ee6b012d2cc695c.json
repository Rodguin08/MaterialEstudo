{"ast":null,"code":"#!/usr/bin/env node\n'use strict';\n\nprocess.title = 'node-gyp';\n\nconst envPaths = require('env-paths');\n\nconst gyp = require('../');\n\nconst log = require('npmlog');\n\nconst os = require('os');\n/**\n * Process and execute the selected commands.\n */\n\n\nconst prog = gyp();\nvar completed = false;\nprog.parseArgv(process.argv);\nprog.devDir = prog.opts.devdir;\nvar homeDir = os.homedir();\n\nif (prog.devDir) {\n  prog.devDir = prog.devDir.replace(/^~/, homeDir);\n} else if (homeDir) {\n  prog.devDir = envPaths('node-gyp', {\n    suffix: ''\n  }).cache;\n} else {\n  throw new Error(\"node-gyp requires that the user's home directory is specified \" + 'in either of the environmental variables HOME or USERPROFILE. ' + 'Overide with: --devdir /path/to/.node-gyp');\n}\n\nif (prog.todo.length === 0) {\n  if (~process.argv.indexOf('-v') || ~process.argv.indexOf('--version')) {\n    console.log('v%s', prog.version);\n  } else {\n    console.log('%s', prog.usage());\n  }\n\n  process.exit(0);\n}\n\nlog.info('it worked if it ends with', 'ok');\nlog.verbose('cli', process.argv);\nlog.info('using', 'node-gyp@%s', prog.version);\nlog.info('using', 'node@%s | %s | %s', process.versions.node, process.platform, process.arch);\n/**\n * Change dir if -C/--directory was passed.\n */\n\nvar dir = prog.opts.directory;\n\nif (dir) {\n  var fs = require('fs');\n\n  try {\n    var stat = fs.statSync(dir);\n\n    if (stat.isDirectory()) {\n      log.info('chdir', dir);\n      process.chdir(dir);\n    } else {\n      log.warn('chdir', dir + ' is not a directory');\n    }\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      log.warn('chdir', dir + ' is not a directory');\n    } else {\n      log.warn('chdir', 'error during chdir() \"%s\"', e.message);\n    }\n  }\n}\n\nfunction run() {\n  var command = prog.todo.shift();\n\n  if (!command) {\n    // done!\n    completed = true;\n    log.info('ok');\n    return;\n  }\n\n  prog.commands[command.name](command.args, function (err) {\n    if (err) {\n      log.error(command.name + ' error');\n      log.error('stack', err.stack);\n      errorMessage();\n      log.error('not ok');\n      return process.exit(1);\n    }\n\n    if (command.name === 'list') {\n      var versions = arguments[1];\n\n      if (versions.length > 0) {\n        versions.forEach(function (version) {\n          console.log(version);\n        });\n      } else {\n        console.log('No node development files installed. Use `node-gyp install` to install a version.');\n      }\n    } else if (arguments.length >= 2) {\n      console.log.apply(console, [].slice.call(arguments, 1));\n    } // now run the next command in the queue\n\n\n    process.nextTick(run);\n  });\n}\n\nprocess.on('exit', function (code) {\n  if (!completed && !code) {\n    log.error('Completion callback never invoked!');\n    issueMessage();\n    process.exit(6);\n  }\n});\nprocess.on('uncaughtException', function (err) {\n  log.error('UNCAUGHT EXCEPTION');\n  log.error('stack', err.stack);\n  issueMessage();\n  process.exit(7);\n});\n\nfunction errorMessage() {\n  // copied from npm's lib/utils/error-handler.js\n  var os = require('os');\n\n  log.error('System', os.type() + ' ' + os.release());\n  log.error('command', process.argv.map(JSON.stringify).join(' '));\n  log.error('cwd', process.cwd());\n  log.error('node -v', process.version);\n  log.error('node-gyp -v', 'v' + prog.package.version);\n}\n\nfunction issueMessage() {\n  errorMessage();\n  log.error('', ['Node-gyp failed to build your package.', 'Try to update npm and/or node-gyp and if it does not help file an issue with the package author.'].join('\\n'));\n} // start running the given commands!\n\n\nrun();","map":null,"metadata":{},"sourceType":"script"}