{"ast":null,"code":"'use strict';\n\nconst align = {\n  right: alignRight,\n  center: alignCenter\n};\nconst top = 0;\nconst right = 1;\nconst bottom = 2;\nconst left = 3;\n\nclass UI {\n  constructor(opts) {\n    var _a;\n\n    this.width = opts.width;\n    this.wrap = (_a = opts.wrap) !== null && _a !== void 0 ? _a : true;\n    this.rows = [];\n  }\n\n  span(...args) {\n    const cols = this.div(...args);\n    cols.span = true;\n  }\n\n  resetOutput() {\n    this.rows = [];\n  }\n\n  div(...args) {\n    if (args.length === 0) {\n      this.div('');\n    }\n\n    if (this.wrap && this.shouldApplyLayoutDSL(...args) && typeof args[0] === 'string') {\n      return this.applyLayoutDSL(args[0]);\n    }\n\n    const cols = args.map(arg => {\n      if (typeof arg === 'string') {\n        return this.colFromString(arg);\n      }\n\n      return arg;\n    });\n    this.rows.push(cols);\n    return cols;\n  }\n\n  shouldApplyLayoutDSL(...args) {\n    return args.length === 1 && typeof args[0] === 'string' && /[\\t\\n]/.test(args[0]);\n  }\n\n  applyLayoutDSL(str) {\n    const rows = str.split('\\n').map(row => row.split('\\t'));\n    let leftColumnWidth = 0; // simple heuristic for layout, make sure the\n    // second column lines up along the left-hand.\n    // don't allow the first column to take up more\n    // than 50% of the screen.\n\n    rows.forEach(columns => {\n      if (columns.length > 1 && mixin.stringWidth(columns[0]) > leftColumnWidth) {\n        leftColumnWidth = Math.min(Math.floor(this.width * 0.5), mixin.stringWidth(columns[0]));\n      }\n    }); // generate a table:\n    //  replacing ' ' with padding calculations.\n    //  using the algorithmically generated width.\n\n    rows.forEach(columns => {\n      this.div(...columns.map((r, i) => {\n        return {\n          text: r.trim(),\n          padding: this.measurePadding(r),\n          width: i === 0 && columns.length > 1 ? leftColumnWidth : undefined\n        };\n      }));\n    });\n    return this.rows[this.rows.length - 1];\n  }\n\n  colFromString(text) {\n    return {\n      text,\n      padding: this.measurePadding(text)\n    };\n  }\n\n  measurePadding(str) {\n    // measure padding without ansi escape codes\n    const noAnsi = mixin.stripAnsi(str);\n    return [0, noAnsi.match(/\\s*$/)[0].length, 0, noAnsi.match(/^\\s*/)[0].length];\n  }\n\n  toString() {\n    const lines = [];\n    this.rows.forEach(row => {\n      this.rowToString(row, lines);\n    }); // don't display any lines with the\n    // hidden flag set.\n\n    return lines.filter(line => !line.hidden).map(line => line.text).join('\\n');\n  }\n\n  rowToString(row, lines) {\n    this.rasterize(row).forEach((rrow, r) => {\n      let str = '';\n      rrow.forEach((col, c) => {\n        const {\n          width\n        } = row[c]; // the width with padding.\n\n        const wrapWidth = this.negatePadding(row[c]); // the width without padding.\n\n        let ts = col; // temporary string used during alignment/padding.\n\n        if (wrapWidth > mixin.stringWidth(col)) {\n          ts += ' '.repeat(wrapWidth - mixin.stringWidth(col));\n        } // align the string within its column.\n\n\n        if (row[c].align && row[c].align !== 'left' && this.wrap) {\n          const fn = align[row[c].align];\n          ts = fn(ts, wrapWidth);\n\n          if (mixin.stringWidth(ts) < wrapWidth) {\n            ts += ' '.repeat((width || 0) - mixin.stringWidth(ts) - 1);\n          }\n        } // apply border and padding to string.\n\n\n        const padding = row[c].padding || [0, 0, 0, 0];\n\n        if (padding[left]) {\n          str += ' '.repeat(padding[left]);\n        }\n\n        str += addBorder(row[c], ts, '| ');\n        str += ts;\n        str += addBorder(row[c], ts, ' |');\n\n        if (padding[right]) {\n          str += ' '.repeat(padding[right]);\n        } // if prior row is span, try to render the\n        // current row on the prior line.\n\n\n        if (r === 0 && lines.length > 0) {\n          str = this.renderInline(str, lines[lines.length - 1]);\n        }\n      }); // remove trailing whitespace.\n\n      lines.push({\n        text: str.replace(/ +$/, ''),\n        span: row.span\n      });\n    });\n    return lines;\n  } // if the full 'source' can render in\n  // the target line, do so.\n\n\n  renderInline(source, previousLine) {\n    const match = source.match(/^ */);\n    const leadingWhitespace = match ? match[0].length : 0;\n    const target = previousLine.text;\n    const targetTextWidth = mixin.stringWidth(target.trimRight());\n\n    if (!previousLine.span) {\n      return source;\n    } // if we're not applying wrapping logic,\n    // just always append to the span.\n\n\n    if (!this.wrap) {\n      previousLine.hidden = true;\n      return target + source;\n    }\n\n    if (leadingWhitespace < targetTextWidth) {\n      return source;\n    }\n\n    previousLine.hidden = true;\n    return target.trimRight() + ' '.repeat(leadingWhitespace - targetTextWidth) + source.trimLeft();\n  }\n\n  rasterize(row) {\n    const rrows = [];\n    const widths = this.columnWidths(row);\n    let wrapped; // word wrap all columns, and create\n    // a data-structure that is easy to rasterize.\n\n    row.forEach((col, c) => {\n      // leave room for left and right padding.\n      col.width = widths[c];\n\n      if (this.wrap) {\n        wrapped = mixin.wrap(col.text, this.negatePadding(col), {\n          hard: true\n        }).split('\\n');\n      } else {\n        wrapped = col.text.split('\\n');\n      }\n\n      if (col.border) {\n        wrapped.unshift('.' + '-'.repeat(this.negatePadding(col) + 2) + '.');\n        wrapped.push(\"'\" + '-'.repeat(this.negatePadding(col) + 2) + \"'\");\n      } // add top and bottom padding.\n\n\n      if (col.padding) {\n        wrapped.unshift(...new Array(col.padding[top] || 0).fill(''));\n        wrapped.push(...new Array(col.padding[bottom] || 0).fill(''));\n      }\n\n      wrapped.forEach((str, r) => {\n        if (!rrows[r]) {\n          rrows.push([]);\n        }\n\n        const rrow = rrows[r];\n\n        for (let i = 0; i < c; i++) {\n          if (rrow[i] === undefined) {\n            rrow.push('');\n          }\n        }\n\n        rrow.push(str);\n      });\n    });\n    return rrows;\n  }\n\n  negatePadding(col) {\n    let wrapWidth = col.width || 0;\n\n    if (col.padding) {\n      wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);\n    }\n\n    if (col.border) {\n      wrapWidth -= 4;\n    }\n\n    return wrapWidth;\n  }\n\n  columnWidths(row) {\n    if (!this.wrap) {\n      return row.map(col => {\n        return col.width || mixin.stringWidth(col.text);\n      });\n    }\n\n    let unset = row.length;\n    let remainingWidth = this.width; // column widths can be set in config.\n\n    const widths = row.map(col => {\n      if (col.width) {\n        unset--;\n        remainingWidth -= col.width;\n        return col.width;\n      }\n\n      return undefined;\n    }); // any unset widths should be calculated.\n\n    const unsetWidth = unset ? Math.floor(remainingWidth / unset) : 0;\n    return widths.map((w, i) => {\n      if (w === undefined) {\n        return Math.max(unsetWidth, _minWidth(row[i]));\n      }\n\n      return w;\n    });\n  }\n\n}\n\nfunction addBorder(col, ts, style) {\n  if (col.border) {\n    if (/[.']-+[.']/.test(ts)) {\n      return '';\n    }\n\n    if (ts.trim().length !== 0) {\n      return style;\n    }\n\n    return '  ';\n  }\n\n  return '';\n} // calculates the minimum width of\n// a column, based on padding preferences.\n\n\nfunction _minWidth(col) {\n  const padding = col.padding || [];\n  const minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);\n\n  if (col.border) {\n    return minWidth + 4;\n  }\n\n  return minWidth;\n}\n\nfunction getWindowWidth() {\n  /* istanbul ignore next: depends on terminal */\n  if (typeof process === 'object' && process.stdout && process.stdout.columns) {\n    return process.stdout.columns;\n  }\n\n  return 80;\n}\n\nfunction alignRight(str, width) {\n  str = str.trim();\n  const strWidth = mixin.stringWidth(str);\n\n  if (strWidth < width) {\n    return ' '.repeat(width - strWidth) + str;\n  }\n\n  return str;\n}\n\nfunction alignCenter(str, width) {\n  str = str.trim();\n  const strWidth = mixin.stringWidth(str);\n  /* istanbul ignore next */\n\n  if (strWidth >= width) {\n    return str;\n  }\n\n  return ' '.repeat(width - strWidth >> 1) + str;\n}\n\nlet mixin;\n\nfunction cliui(opts, _mixin) {\n  mixin = _mixin;\n  return new UI({\n    width: (opts === null || opts === void 0 ? void 0 : opts.width) || getWindowWidth(),\n    wrap: opts === null || opts === void 0 ? void 0 : opts.wrap\n  });\n} // Bootstrap cliui with CommonJS dependencies:\n\n\nconst stringWidth = require('string-width');\n\nconst stripAnsi = require('strip-ansi');\n\nconst wrap = require('wrap-ansi');\n\nfunction ui(opts) {\n  return cliui(opts, {\n    stringWidth,\n    stripAnsi,\n    wrap\n  });\n}\n\nmodule.exports = ui;","map":null,"metadata":{},"sourceType":"script"}