{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleSinkBase = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst exception_1 = require(\"../exception/exception\");\n\nconst action_1 = require(\"../tree/action\");\n\nconst Noop = function () {};\n\nclass SimpleSinkBase {\n  constructor() {\n    this.preCommitAction = Noop;\n    this.postCommitAction = Noop;\n    this.preCommit = Noop;\n    this.postCommit = Noop;\n  }\n\n  _fileAlreadyExistException(path) {\n    throw new exception_1.FileAlreadyExistException(path);\n  }\n\n  _fileDoesNotExistException(path) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n\n  _validateOverwriteAction(action) {\n    return this._validateFileExists(action.path).pipe((0, operators_1.map)(b => {\n      if (!b) {\n        this._fileDoesNotExistException(action.path);\n      }\n    }));\n  }\n\n  _validateCreateAction(action) {\n    return this._validateFileExists(action.path).pipe((0, operators_1.map)(b => {\n      if (b) {\n        this._fileAlreadyExistException(action.path);\n      }\n    }));\n  }\n\n  _validateRenameAction(action) {\n    return this._validateFileExists(action.path).pipe((0, operators_1.map)(b => {\n      if (!b) {\n        this._fileDoesNotExistException(action.path);\n      }\n    }), (0, operators_1.mergeMap)(() => this._validateFileExists(action.to)), (0, operators_1.map)(b => {\n      if (b) {\n        this._fileAlreadyExistException(action.to);\n      }\n    }));\n  }\n\n  _validateDeleteAction(action) {\n    return this._validateFileExists(action.path).pipe((0, operators_1.map)(b => {\n      if (!b) {\n        this._fileDoesNotExistException(action.path);\n      }\n    }));\n  }\n\n  validateSingleAction(action) {\n    switch (action.kind) {\n      case 'o':\n        return this._validateOverwriteAction(action);\n\n      case 'c':\n        return this._validateCreateAction(action);\n\n      case 'r':\n        return this._validateRenameAction(action);\n\n      case 'd':\n        return this._validateDeleteAction(action);\n\n      default:\n        throw new action_1.UnknownActionException(action);\n    }\n  }\n\n  commitSingleAction(action) {\n    return (0, rxjs_1.concat)(this.validateSingleAction(action), new rxjs_1.Observable(observer => {\n      let committed = null;\n\n      switch (action.kind) {\n        case 'o':\n          committed = this._overwriteFile(action.path, action.content);\n          break;\n\n        case 'c':\n          committed = this._createFile(action.path, action.content);\n          break;\n\n        case 'r':\n          committed = this._renameFile(action.path, action.to);\n          break;\n\n        case 'd':\n          committed = this._deleteFile(action.path);\n          break;\n      }\n\n      if (committed) {\n        committed.subscribe(observer);\n      } else {\n        observer.complete();\n      }\n    })).pipe((0, operators_1.ignoreElements)());\n  }\n\n  commit(tree) {\n    const actions = (0, rxjs_1.from)(tree.actions);\n    return (0, rxjs_1.concat)(this.preCommit() || (0, rxjs_1.of)(null), (0, rxjs_1.defer)(() => actions).pipe((0, operators_1.concatMap)(action => {\n      const maybeAction = this.preCommitAction(action);\n\n      if ((0, rxjs_1.isObservable)(maybeAction) || isPromiseLike(maybeAction)) {\n        return maybeAction;\n      }\n\n      return (0, rxjs_1.of)(maybeAction || action);\n    }), (0, operators_1.concatMap)(action => {\n      return (0, rxjs_1.concat)(this.commitSingleAction(action).pipe((0, operators_1.ignoreElements)()), (0, rxjs_1.of)(action));\n    }), (0, operators_1.concatMap)(action => this.postCommitAction(action) || (0, rxjs_1.of)(null))), (0, rxjs_1.defer)(() => this._done()), (0, rxjs_1.defer)(() => this.postCommit() || (0, rxjs_1.of)(null))).pipe((0, operators_1.ignoreElements)());\n  }\n\n}\n\nexports.SimpleSinkBase = SimpleSinkBase;\n\nfunction isPromiseLike(value) {\n  return !!value && typeof value.then === 'function';\n}","map":null,"metadata":{},"sourceType":"script"}