{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnimplementedException = exports.UnsuccessfulWorkflowExecution = exports.MergeConflictException = exports.InvalidUpdateRecordException = exports.ContentHasMutatedException = exports.FileAlreadyExistException = exports.FileDoesNotExistException = exports.SchematicsException = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\"); // Used by schematics to throw exceptions.\n\n\nclass SchematicsException extends core_1.BaseException {}\n\nexports.SchematicsException = SchematicsException; // Exceptions\n\nclass FileDoesNotExistException extends core_1.BaseException {\n  constructor(path) {\n    super(`Path \"${path}\" does not exist.`);\n  }\n\n}\n\nexports.FileDoesNotExistException = FileDoesNotExistException;\n\nclass FileAlreadyExistException extends core_1.BaseException {\n  constructor(path) {\n    super(`Path \"${path}\" already exist.`);\n  }\n\n}\n\nexports.FileAlreadyExistException = FileAlreadyExistException;\n\nclass ContentHasMutatedException extends core_1.BaseException {\n  constructor(path) {\n    super(`Content at path \"${path}\" has changed between the start and the end of an update.`);\n  }\n\n}\n\nexports.ContentHasMutatedException = ContentHasMutatedException;\n\nclass InvalidUpdateRecordException extends core_1.BaseException {\n  constructor() {\n    super(`Invalid record instance.`);\n  }\n\n}\n\nexports.InvalidUpdateRecordException = InvalidUpdateRecordException;\n\nclass MergeConflictException extends core_1.BaseException {\n  constructor(path) {\n    super(`A merge conflicted on path \"${path}\".`);\n  }\n\n}\n\nexports.MergeConflictException = MergeConflictException;\n\nclass UnsuccessfulWorkflowExecution extends core_1.BaseException {\n  constructor() {\n    super('Workflow did not execute successfully.');\n  }\n\n}\n\nexports.UnsuccessfulWorkflowExecution = UnsuccessfulWorkflowExecution;\n\nclass UnimplementedException extends core_1.BaseException {\n  constructor() {\n    super('This function is unimplemented.');\n  }\n\n}\n\nexports.UnimplementedException = UnimplementedException;","map":null,"metadata":{},"sourceType":"script"}