{"ast":null,"code":"const validateOptions = options => {\n  if (typeof options !== 'object' || !options) {\n    throw new TypeError('invalid options object provided to runScript');\n  }\n\n  const {\n    event,\n    path,\n    scriptShell,\n    env = {},\n    stdio = 'pipe',\n    args = [],\n    cmd\n  } = options;\n\n  if (!event || typeof event !== 'string') {\n    throw new TypeError('valid event not provided to runScript');\n  }\n\n  if (!path || typeof path !== 'string') {\n    throw new TypeError('valid path not provided to runScript');\n  }\n\n  if (scriptShell !== undefined && typeof scriptShell !== 'string') {\n    throw new TypeError('invalid scriptShell option provided to runScript');\n  }\n\n  if (typeof env !== 'object' || !env) {\n    throw new TypeError('invalid env option provided to runScript');\n  }\n\n  if (typeof stdio !== 'string' && !Array.isArray(stdio)) {\n    throw new TypeError('invalid stdio option provided to runScript');\n  }\n\n  if (!Array.isArray(args) || args.some(a => typeof a !== 'string')) {\n    throw new TypeError('invalid args option provided to runScript');\n  }\n\n  if (cmd !== undefined && typeof cmd !== 'string') {\n    throw new TypeError('invalid cmd option provided to runScript');\n  }\n};\n\nmodule.exports = validateOptions;","map":null,"metadata":{},"sourceType":"script"}