{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nclass Logger extends rxjs_1.Observable {\n  constructor(name, parent = null) {\n    super();\n    this.name = name;\n    this.parent = parent;\n    this._subject = new rxjs_1.Subject();\n    this._obs = rxjs_1.EMPTY;\n    this._subscription = null;\n    const path = [];\n    let p = parent;\n\n    while (p) {\n      path.push(p.name);\n      p = p.parent;\n    }\n\n    this._metadata = {\n      name,\n      path\n    };\n    this._observable = this._subject.asObservable();\n\n    if (this.parent && this.parent._subject) {\n      // When the parent completes, complete us as well.\n      this.parent._subject.subscribe(undefined, undefined, () => this.complete());\n    }\n  }\n\n  get _observable() {\n    return this._obs;\n  }\n\n  set _observable(v) {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n\n    this._obs = v;\n\n    if (this.parent) {\n      this._subscription = this.subscribe(value => {\n        if (this.parent) {\n          this.parent._subject.next(value);\n        }\n      }, error => {\n        if (this.parent) {\n          this.parent._subject.error(error);\n        }\n      }, () => {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n        }\n\n        this._subscription = null;\n      });\n    }\n  }\n\n  asApi() {\n    return {\n      createChild: name => this.createChild(name),\n      log: (level, message, metadata) => {\n        return this.log(level, message, metadata);\n      },\n      debug: (message, metadata) => this.debug(message, metadata),\n      info: (message, metadata) => this.info(message, metadata),\n      warn: (message, metadata) => this.warn(message, metadata),\n      error: (message, metadata) => this.error(message, metadata),\n      fatal: (message, metadata) => this.fatal(message, metadata)\n    };\n  }\n\n  createChild(name) {\n    return new this.constructor(name, this);\n  }\n\n  complete() {\n    this._subject.complete();\n  }\n\n  log(level, message, metadata = {}) {\n    const entry = Object.assign({}, metadata, this._metadata, {\n      level,\n      message,\n      timestamp: +Date.now()\n    });\n\n    this._subject.next(entry);\n  }\n\n  next(entry) {\n    this._subject.next(entry);\n  }\n\n  debug(message, metadata = {}) {\n    return this.log('debug', message, metadata);\n  }\n\n  info(message, metadata = {}) {\n    return this.log('info', message, metadata);\n  }\n\n  warn(message, metadata = {}) {\n    return this.log('warn', message, metadata);\n  }\n\n  error(message, metadata = {}) {\n    return this.log('error', message, metadata);\n  }\n\n  fatal(message, metadata = {}) {\n    return this.log('fatal', message, metadata);\n  }\n\n  toString() {\n    return `<Logger(${this.name})>`;\n  }\n\n  lift(operator) {\n    return this._observable.lift(operator);\n  }\n\n  subscribe(_observerOrNext, _error, _complete) {\n    // eslint-disable-next-line prefer-spread\n    return this._observable.subscribe.apply(this._observable, // eslint-disable-next-line prefer-rest-params\n    arguments);\n  }\n\n  forEach(next, PromiseCtor) {\n    return this._observable.forEach(next, PromiseCtor);\n  }\n\n}\n\nexports.Logger = Logger;","map":null,"metadata":{},"sourceType":"script"}