{"ast":null,"code":"'use strict';\n\nconst log = require('npmlog');\n\nconst execFile = require('child_process').execFile;\n\nconst path = require('path');\n\nfunction logWithPrefix(log, prefix) {\n  function setPrefix(logFunction) {\n    return (...args) => logFunction.apply(null, [prefix, ...args]); // eslint-disable-line\n  }\n\n  return {\n    silly: setPrefix(log.silly),\n    verbose: setPrefix(log.verbose),\n    info: setPrefix(log.info),\n    warn: setPrefix(log.warn),\n    error: setPrefix(log.error)\n  };\n}\n\nfunction regGetValue(key, value, addOpts, cb) {\n  const outReValue = value.replace(/\\W/g, '.');\n  const outRe = new RegExp(`^\\\\s+${outReValue}\\\\s+REG_\\\\w+\\\\s+(\\\\S.*)$`, 'im');\n  const reg = path.join(process.env.SystemRoot, 'System32', 'reg.exe');\n  const regArgs = ['query', key, '/v', value].concat(addOpts);\n  log.silly('reg', 'running', reg, regArgs);\n  const child = execFile(reg, regArgs, {\n    encoding: 'utf8'\n  }, function (err, stdout, stderr) {\n    log.silly('reg', 'reg.exe stdout = %j', stdout);\n\n    if (err || stderr.trim() !== '') {\n      log.silly('reg', 'reg.exe err = %j', err && (err.stack || err));\n      log.silly('reg', 'reg.exe stderr = %j', stderr);\n      return cb(err, stderr);\n    }\n\n    const result = outRe.exec(stdout);\n\n    if (!result) {\n      log.silly('reg', 'error parsing stdout');\n      return cb(new Error('Could not parse output of reg.exe'));\n    }\n\n    log.silly('reg', 'found: %j', result[1]);\n    cb(null, result[1]);\n  });\n  child.stdin.end();\n}\n\nfunction regSearchKeys(keys, value, addOpts, cb) {\n  var i = 0;\n\n  const search = () => {\n    log.silly('reg-search', 'looking for %j in %j', value, keys[i]);\n    regGetValue(keys[i], value, addOpts, (err, res) => {\n      ++i;\n\n      if (err && i < keys.length) {\n        return search();\n      }\n\n      cb(err, res);\n    });\n  };\n\n  search();\n}\n\nmodule.exports = {\n  logWithPrefix: logWithPrefix,\n  regGetValue: regGetValue,\n  regSearchKeys: regSearchKeys\n};","map":null,"metadata":{},"sourceType":"script"}