{"ast":null,"code":"'use strict';\n\nconst ansiEscapes = module.exports; // TODO: remove this in the next major version\n\nmodule.exports.default = ansiEscapes;\nconst ESC = '\\u001B[';\nconst OSC = '\\u001B]';\nconst BEL = '\\u0007';\nconst SEP = ';';\nconst isTerminalApp = process.env.TERM_PROGRAM === 'Apple_Terminal';\n\nansiEscapes.cursorTo = (x, y) => {\n  if (typeof x !== 'number') {\n    throw new TypeError('The `x` argument is required');\n  }\n\n  if (typeof y !== 'number') {\n    return ESC + (x + 1) + 'G';\n  }\n\n  return ESC + (y + 1) + ';' + (x + 1) + 'H';\n};\n\nansiEscapes.cursorMove = (x, y) => {\n  if (typeof x !== 'number') {\n    throw new TypeError('The `x` argument is required');\n  }\n\n  let ret = '';\n\n  if (x < 0) {\n    ret += ESC + -x + 'D';\n  } else if (x > 0) {\n    ret += ESC + x + 'C';\n  }\n\n  if (y < 0) {\n    ret += ESC + -y + 'A';\n  } else if (y > 0) {\n    ret += ESC + y + 'B';\n  }\n\n  return ret;\n};\n\nansiEscapes.cursorUp = (count = 1) => ESC + count + 'A';\n\nansiEscapes.cursorDown = (count = 1) => ESC + count + 'B';\n\nansiEscapes.cursorForward = (count = 1) => ESC + count + 'C';\n\nansiEscapes.cursorBackward = (count = 1) => ESC + count + 'D';\n\nansiEscapes.cursorLeft = ESC + 'G';\nansiEscapes.cursorSavePosition = isTerminalApp ? '\\u001B7' : ESC + 's';\nansiEscapes.cursorRestorePosition = isTerminalApp ? '\\u001B8' : ESC + 'u';\nansiEscapes.cursorGetPosition = ESC + '6n';\nansiEscapes.cursorNextLine = ESC + 'E';\nansiEscapes.cursorPrevLine = ESC + 'F';\nansiEscapes.cursorHide = ESC + '?25l';\nansiEscapes.cursorShow = ESC + '?25h';\n\nansiEscapes.eraseLines = count => {\n  let clear = '';\n\n  for (let i = 0; i < count; i++) {\n    clear += ansiEscapes.eraseLine + (i < count - 1 ? ansiEscapes.cursorUp() : '');\n  }\n\n  if (count) {\n    clear += ansiEscapes.cursorLeft;\n  }\n\n  return clear;\n};\n\nansiEscapes.eraseEndLine = ESC + 'K';\nansiEscapes.eraseStartLine = ESC + '1K';\nansiEscapes.eraseLine = ESC + '2K';\nansiEscapes.eraseDown = ESC + 'J';\nansiEscapes.eraseUp = ESC + '1J';\nansiEscapes.eraseScreen = ESC + '2J';\nansiEscapes.scrollUp = ESC + 'S';\nansiEscapes.scrollDown = ESC + 'T';\nansiEscapes.clearScreen = '\\u001Bc';\nansiEscapes.clearTerminal = process.platform === 'win32' ? `${ansiEscapes.eraseScreen}${ESC}0f` : // 1. Erases the screen (Only done in case `2` is not supported)\n// 2. Erases the whole screen including scrollback buffer\n// 3. Moves cursor to the top-left position\n// More info: https://www.real-world-systems.com/docs/ANSIcode.html\n`${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;\nansiEscapes.beep = BEL;\n\nansiEscapes.link = (text, url) => {\n  return [OSC, '8', SEP, SEP, url, BEL, text, OSC, '8', SEP, SEP, BEL].join('');\n};\n\nansiEscapes.image = (buffer, options = {}) => {\n  let ret = `${OSC}1337;File=inline=1`;\n\n  if (options.width) {\n    ret += `;width=${options.width}`;\n  }\n\n  if (options.height) {\n    ret += `;height=${options.height}`;\n  }\n\n  if (options.preserveAspectRatio === false) {\n    ret += ';preserveAspectRatio=0';\n  }\n\n  return ret + ':' + buffer.toString('base64') + BEL;\n};\n\nansiEscapes.iTerm = {\n  setCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`,\n  annotation: (message, options = {}) => {\n    let ret = `${OSC}1337;`;\n    const hasX = typeof options.x !== 'undefined';\n    const hasY = typeof options.y !== 'undefined';\n\n    if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== 'undefined')) {\n      throw new Error('`x`, `y` and `length` must be defined when `x` or `y` is defined');\n    }\n\n    message = message.replace(/\\|/g, '');\n    ret += options.isHidden ? 'AddHiddenAnnotation=' : 'AddAnnotation=';\n\n    if (options.length > 0) {\n      ret += (hasX ? [message, options.length, options.x, options.y] : [options.length, message]).join('|');\n    } else {\n      ret += message;\n    }\n\n    return ret + BEL;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}