{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { createScanner } from './scanner';\nexport function format(documentText, range, options) {\n  var initialIndentLevel;\n  var formatText;\n  var formatTextStart;\n  var rangeStart;\n  var rangeEnd;\n\n  if (range) {\n    rangeStart = range.offset;\n    rangeEnd = rangeStart + range.length;\n    formatTextStart = rangeStart;\n\n    while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n      formatTextStart--;\n    }\n\n    var endOffset = rangeEnd;\n\n    while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n      endOffset++;\n    }\n\n    formatText = documentText.substring(formatTextStart, endOffset);\n    initialIndentLevel = computeIndentLevel(formatText, options);\n  } else {\n    formatText = documentText;\n    initialIndentLevel = 0;\n    formatTextStart = 0;\n    rangeStart = 0;\n    rangeEnd = documentText.length;\n  }\n\n  var eol = getEOL(options, documentText);\n  var numberLineBreaks = 0;\n  var indentLevel = 0;\n  var indentValue;\n\n  if (options.insertSpaces) {\n    indentValue = repeat(' ', options.tabSize || 4);\n  } else {\n    indentValue = '\\t';\n  }\n\n  var scanner = createScanner(formatText, false);\n  var hasError = false;\n\n  function newLinesAndIndent() {\n    if (numberLineBreaks > 1) {\n      return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);\n    } else {\n      return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n  }\n\n  function scanNext() {\n    var token = scanner.scan();\n    numberLineBreaks = 0;\n\n    while (token === 15\n    /* SyntaxKind.Trivia */\n    || token === 14\n    /* SyntaxKind.LineBreakTrivia */\n    ) {\n      if (token === 14\n      /* SyntaxKind.LineBreakTrivia */\n      && options.keepLines) {\n        numberLineBreaks += 1;\n      } else if (token === 14\n      /* SyntaxKind.LineBreakTrivia */\n      ) {\n        numberLineBreaks = 1;\n      }\n\n      token = scanner.scan();\n    }\n\n    hasError = token === 16\n    /* SyntaxKind.Unknown */\n    || scanner.getTokenError() !== 0\n    /* ScanError.None */\n    ;\n    return token;\n  }\n\n  var editOperations = [];\n\n  function addEdit(text, startOffset, endOffset) {\n    if (!hasError && (!range || startOffset < rangeEnd && endOffset > rangeStart) && documentText.substring(startOffset, endOffset) !== text) {\n      editOperations.push({\n        offset: startOffset,\n        length: endOffset - startOffset,\n        content: text\n      });\n    }\n  }\n\n  var firstToken = scanNext();\n\n  if (options.keepLines && numberLineBreaks > 0) {\n    addEdit(repeat(eol, numberLineBreaks), 0, 0);\n  }\n\n  if (firstToken !== 17\n  /* SyntaxKind.EOF */\n  ) {\n    var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n    var initialIndent = repeat(indentValue, initialIndentLevel);\n    addEdit(initialIndent, formatTextStart, firstTokenStart);\n  }\n\n  while (firstToken !== 17\n  /* SyntaxKind.EOF */\n  ) {\n    var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n    var secondToken = scanNext();\n    var replaceContent = '';\n    var needsLineBreak = false;\n\n    while (numberLineBreaks === 0 && (secondToken === 12\n    /* SyntaxKind.LineCommentTrivia */\n    || secondToken === 13\n    /* SyntaxKind.BlockCommentTrivia */\n    )) {\n      var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n      addEdit(' ', firstTokenEnd, commentTokenStart);\n      firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n      needsLineBreak = secondToken === 12\n      /* SyntaxKind.LineCommentTrivia */\n      ;\n      replaceContent = needsLineBreak ? newLinesAndIndent() : '';\n      secondToken = scanNext();\n    }\n\n    if (secondToken === 2\n    /* SyntaxKind.CloseBraceToken */\n    ) {\n      if (firstToken !== 1\n      /* SyntaxKind.OpenBraceToken */\n      ) {\n        indentLevel--;\n      }\n\n      ;\n\n      if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1\n      /* SyntaxKind.OpenBraceToken */\n      ) {\n        replaceContent = newLinesAndIndent();\n      } else if (options.keepLines) {\n        replaceContent = ' ';\n      }\n    } else if (secondToken === 4\n    /* SyntaxKind.CloseBracketToken */\n    ) {\n      if (firstToken !== 3\n      /* SyntaxKind.OpenBracketToken */\n      ) {\n        indentLevel--;\n      }\n\n      ;\n\n      if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3\n      /* SyntaxKind.OpenBracketToken */\n      ) {\n        replaceContent = newLinesAndIndent();\n      } else if (options.keepLines) {\n        replaceContent = ' ';\n      }\n    } else {\n      switch (firstToken) {\n        case 3\n        /* SyntaxKind.OpenBracketToken */\n        :\n        case 1\n        /* SyntaxKind.OpenBraceToken */\n        :\n          indentLevel++;\n\n          if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            replaceContent = ' ';\n          }\n\n          break;\n\n        case 5\n        /* SyntaxKind.CommaToken */\n        :\n          if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            replaceContent = ' ';\n          }\n\n          break;\n\n        case 12\n        /* SyntaxKind.LineCommentTrivia */\n        :\n          replaceContent = newLinesAndIndent();\n          break;\n\n        case 13\n        /* SyntaxKind.BlockCommentTrivia */\n        :\n          if (numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (!needsLineBreak) {\n            replaceContent = ' ';\n          }\n\n          break;\n\n        case 6\n        /* SyntaxKind.ColonToken */\n        :\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (!needsLineBreak) {\n            replaceContent = ' ';\n          }\n\n          break;\n\n        case 10\n        /* SyntaxKind.StringLiteral */\n        :\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (secondToken === 6\n          /* SyntaxKind.ColonToken */\n          && !needsLineBreak) {\n            replaceContent = '';\n          }\n\n          break;\n\n        case 7\n        /* SyntaxKind.NullKeyword */\n        :\n        case 8\n        /* SyntaxKind.TrueKeyword */\n        :\n        case 9\n        /* SyntaxKind.FalseKeyword */\n        :\n        case 11\n        /* SyntaxKind.NumericLiteral */\n        :\n        case 2\n        /* SyntaxKind.CloseBraceToken */\n        :\n        case 4\n        /* SyntaxKind.CloseBracketToken */\n        :\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            if ((secondToken === 12\n            /* SyntaxKind.LineCommentTrivia */\n            || secondToken === 13\n            /* SyntaxKind.BlockCommentTrivia */\n            ) && !needsLineBreak) {\n              replaceContent = ' ';\n            } else if (secondToken !== 5\n            /* SyntaxKind.CommaToken */\n            && secondToken !== 17\n            /* SyntaxKind.EOF */\n            ) {\n              hasError = true;\n            }\n          }\n\n          break;\n\n        case 16\n        /* SyntaxKind.Unknown */\n        :\n          hasError = true;\n          break;\n      }\n\n      if (numberLineBreaks > 0 && (secondToken === 12\n      /* SyntaxKind.LineCommentTrivia */\n      || secondToken === 13\n      /* SyntaxKind.BlockCommentTrivia */\n      )) {\n        replaceContent = newLinesAndIndent();\n      }\n    }\n\n    if (secondToken === 17\n    /* SyntaxKind.EOF */\n    ) {\n      if (options.keepLines && numberLineBreaks > 0) {\n        replaceContent = newLinesAndIndent();\n      } else {\n        replaceContent = options.insertFinalNewline ? eol : '';\n      }\n    }\n\n    var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n    addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n    firstToken = secondToken;\n  }\n\n  return editOperations;\n}\n\nfunction repeat(s, count) {\n  var result = '';\n\n  for (var i = 0; i < count; i++) {\n    result += s;\n  }\n\n  return result;\n}\n\nfunction computeIndentLevel(content, options) {\n  var i = 0;\n  var nChars = 0;\n  var tabSize = options.tabSize || 4;\n\n  while (i < content.length) {\n    var ch = content.charAt(i);\n\n    if (ch === ' ') {\n      nChars++;\n    } else if (ch === '\\t') {\n      nChars += tabSize;\n    } else {\n      break;\n    }\n\n    i++;\n  }\n\n  return Math.floor(nChars / tabSize);\n}\n\nfunction getEOL(options, text) {\n  for (var i = 0; i < text.length; i++) {\n    var ch = text.charAt(i);\n\n    if (ch === '\\r') {\n      if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n        return '\\r\\n';\n      }\n\n      return '\\r';\n    } else if (ch === '\\n') {\n      return '\\n';\n    }\n  }\n\n  return options && options.eol || '\\n';\n}\n\nexport function isEOL(text, offset) {\n  return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}","map":null,"metadata":{},"sourceType":"module"}