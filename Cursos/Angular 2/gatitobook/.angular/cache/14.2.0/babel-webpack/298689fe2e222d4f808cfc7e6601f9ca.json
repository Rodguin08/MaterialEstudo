{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonWorkspaceMetadata = exports.JsonWorkspaceSymbol = void 0;\n\nconst jsonc_parser_1 = require(\"jsonc-parser\");\n\nexports.JsonWorkspaceSymbol = Symbol.for('@angular/core:workspace-json');\n\nfunction escapeKey(key) {\n  return key.replace('~', '~0').replace('/', '~1');\n}\n\nclass JsonWorkspaceMetadata {\n  constructor(filePath, ast, raw) {\n    this.filePath = filePath;\n    this.ast = ast;\n    this.raw = raw;\n    this.changes = new Map();\n    this.hasLegacyTargetsName = true;\n  }\n\n  get hasChanges() {\n    return this.changes.size > 0;\n  }\n\n  get changeCount() {\n    return this.changes.size;\n  }\n\n  getNodeValueFromAst(path) {\n    const node = (0, jsonc_parser_1.findNodeAtLocation)(this.ast, path);\n    return node && (0, jsonc_parser_1.getNodeValue)(node);\n  }\n\n  findChangesForPath(path) {\n    return this.changes.get(path);\n  }\n\n  addChange(jsonPath, value, type) {\n    let currentPath = '';\n\n    for (let index = 0; index < jsonPath.length - 1; index++) {\n      currentPath = currentPath + '/' + escapeKey(jsonPath[index]);\n\n      if (this.changes.has(currentPath)) {\n        // Ignore changes on children as parent is updated.\n        return;\n      }\n    }\n\n    const pathKey = '/' + jsonPath.map(k => escapeKey(k)).join('/');\n\n    for (const key of this.changes.keys()) {\n      if (key.startsWith(pathKey + '/')) {\n        // changes on the same or child paths are redundant.\n        this.changes.delete(key);\n      }\n    }\n\n    this.changes.set(pathKey, {\n      jsonPath,\n      type,\n      value\n    });\n  }\n\n}\n\nexports.JsonWorkspaceMetadata = JsonWorkspaceMetadata;","map":null,"metadata":{},"sourceType":"script"}