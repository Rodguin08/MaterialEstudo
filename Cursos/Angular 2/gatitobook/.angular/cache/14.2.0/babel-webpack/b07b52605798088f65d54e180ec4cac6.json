{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeJsSyncHost = exports.NodeJsAsyncHost = void 0;\n\nconst fs_1 = __importStar(require(\"fs\"));\n\nconst path_1 = require(\"path\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst src_1 = require(\"../src\");\n\nfunction exists(_x) {\n  return _exists.apply(this, arguments);\n} // This will only be initialized if the watch() method is called.\n// Otherwise chokidar appears only in type positions, and shouldn't be referenced\n// in the JavaScript output.\n\n\nfunction _exists() {\n  _exists = _asyncToGenerator(function* (path) {\n    try {\n      yield fs_1.promises.access(path, fs_1.constants.F_OK);\n      return true;\n    } catch {\n      return false;\n    }\n  });\n  return _exists.apply(this, arguments);\n}\n\nlet FSWatcher;\n\nfunction loadFSWatcher() {\n  if (!FSWatcher) {\n    try {\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      FSWatcher = require('chokidar').FSWatcher;\n    } catch (e) {\n      if (e.code !== 'MODULE_NOT_FOUND') {\n        throw new Error('As of angular-devkit version 8.0, the \"chokidar\" package ' + 'must be installed in order to use watch() features.');\n      }\n\n      throw e;\n    }\n  }\n}\n/**\n * An implementation of the Virtual FS using Node as the background. There are two versions; one\n * synchronous and one asynchronous.\n */\n\n\nclass NodeJsAsyncHost {\n  get capabilities() {\n    return {\n      synchronous: false\n    };\n  }\n\n  write(path, content) {\n    return (0, rxjs_1.from)(fs_1.promises.mkdir((0, src_1.getSystemPath)((0, src_1.dirname)(path)), {\n      recursive: true\n    })).pipe((0, operators_1.mergeMap)(() => fs_1.promises.writeFile((0, src_1.getSystemPath)(path), new Uint8Array(content))));\n  }\n\n  read(path) {\n    return (0, rxjs_1.from)(fs_1.promises.readFile((0, src_1.getSystemPath)(path))).pipe((0, operators_1.map)(buffer => new Uint8Array(buffer).buffer));\n  }\n\n  delete(path) {\n    return (0, rxjs_1.from)(fs_1.promises.rm((0, src_1.getSystemPath)(path), {\n      force: true,\n      recursive: true,\n      maxRetries: 3\n    }));\n  }\n\n  rename(from, to) {\n    return (0, rxjs_1.from)(fs_1.promises.rename((0, src_1.getSystemPath)(from), (0, src_1.getSystemPath)(to)));\n  }\n\n  list(path) {\n    return (0, rxjs_1.from)(fs_1.promises.readdir((0, src_1.getSystemPath)(path))).pipe((0, operators_1.map)(names => names.map(name => (0, src_1.fragment)(name))));\n  }\n\n  exists(path) {\n    return (0, rxjs_1.from)(exists((0, src_1.getSystemPath)(path)));\n  }\n\n  isDirectory(path) {\n    return this.stat(path).pipe((0, operators_1.map)(stat => stat.isDirectory()));\n  }\n\n  isFile(path) {\n    return this.stat(path).pipe((0, operators_1.map)(stat => stat.isFile()));\n  } // Some hosts may not support stat.\n\n\n  stat(path) {\n    return (0, rxjs_1.from)(fs_1.promises.stat((0, src_1.getSystemPath)(path)));\n  } // Some hosts may not support watching.\n\n\n  watch(path, _options) {\n    return new rxjs_1.Observable(obs => {\n      loadFSWatcher();\n      const watcher = new FSWatcher({\n        persistent: true\n      });\n      watcher.add((0, src_1.getSystemPath)(path));\n      watcher.on('change', path => {\n        obs.next({\n          path: (0, src_1.normalize)(path),\n          time: new Date(),\n          type: 0\n          /* virtualFs.HostWatchEventType.Changed */\n\n        });\n      }).on('add', path => {\n        obs.next({\n          path: (0, src_1.normalize)(path),\n          time: new Date(),\n          type: 1\n          /* virtualFs.HostWatchEventType.Created */\n\n        });\n      }).on('unlink', path => {\n        obs.next({\n          path: (0, src_1.normalize)(path),\n          time: new Date(),\n          type: 2\n          /* virtualFs.HostWatchEventType.Deleted */\n\n        });\n      });\n      return () => watcher.close();\n    }).pipe((0, operators_1.publish)(), (0, operators_1.refCount)());\n  }\n\n}\n\nexports.NodeJsAsyncHost = NodeJsAsyncHost;\n/**\n * An implementation of the Virtual FS using Node as the backend, synchronously.\n */\n\nclass NodeJsSyncHost {\n  get capabilities() {\n    return {\n      synchronous: true\n    };\n  }\n\n  write(path, content) {\n    return new rxjs_1.Observable(obs => {\n      (0, fs_1.mkdirSync)((0, src_1.getSystemPath)((0, src_1.dirname)(path)), {\n        recursive: true\n      });\n      (0, fs_1.writeFileSync)((0, src_1.getSystemPath)(path), new Uint8Array(content));\n      obs.next();\n      obs.complete();\n    });\n  }\n\n  read(path) {\n    return new rxjs_1.Observable(obs => {\n      const buffer = (0, fs_1.readFileSync)((0, src_1.getSystemPath)(path));\n      obs.next(new Uint8Array(buffer).buffer);\n      obs.complete();\n    });\n  }\n\n  delete(path) {\n    return new rxjs_1.Observable(obs => {\n      fs_1.default.rmSync((0, src_1.getSystemPath)(path), {\n        force: true,\n        recursive: true,\n        maxRetries: 3\n      });\n      obs.complete();\n    });\n  }\n\n  rename(from, to) {\n    return new rxjs_1.Observable(obs => {\n      const toSystemPath = (0, src_1.getSystemPath)(to);\n      (0, fs_1.mkdirSync)((0, path_1.dirname)(toSystemPath), {\n        recursive: true\n      });\n      (0, fs_1.renameSync)((0, src_1.getSystemPath)(from), toSystemPath);\n      obs.next();\n      obs.complete();\n    });\n  }\n\n  list(path) {\n    return new rxjs_1.Observable(obs => {\n      const names = (0, fs_1.readdirSync)((0, src_1.getSystemPath)(path));\n      obs.next(names.map(name => (0, src_1.fragment)(name)));\n      obs.complete();\n    });\n  }\n\n  exists(path) {\n    return new rxjs_1.Observable(obs => {\n      obs.next((0, fs_1.existsSync)((0, src_1.getSystemPath)(path)));\n      obs.complete();\n    });\n  }\n\n  isDirectory(path) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.stat(path).pipe((0, operators_1.map)(stat => stat.isDirectory()));\n  }\n\n  isFile(path) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.stat(path).pipe((0, operators_1.map)(stat => stat.isFile()));\n  } // Some hosts may not support stat.\n\n\n  stat(path) {\n    return new rxjs_1.Observable(obs => {\n      obs.next((0, fs_1.statSync)((0, src_1.getSystemPath)(path)));\n      obs.complete();\n    });\n  } // Some hosts may not support watching.\n\n\n  watch(path, _options) {\n    return new rxjs_1.Observable(obs => {\n      loadFSWatcher();\n      const watcher = new FSWatcher({\n        persistent: false\n      });\n      watcher.add((0, src_1.getSystemPath)(path));\n      watcher.on('change', path => {\n        obs.next({\n          path: (0, src_1.normalize)(path),\n          time: new Date(),\n          type: 0\n          /* virtualFs.HostWatchEventType.Changed */\n\n        });\n      }).on('add', path => {\n        obs.next({\n          path: (0, src_1.normalize)(path),\n          time: new Date(),\n          type: 1\n          /* virtualFs.HostWatchEventType.Created */\n\n        });\n      }).on('unlink', path => {\n        obs.next({\n          path: (0, src_1.normalize)(path),\n          time: new Date(),\n          type: 2\n          /* virtualFs.HostWatchEventType.Deleted */\n\n        });\n      });\n      return () => watcher.close();\n    }).pipe((0, operators_1.publish)(), (0, operators_1.refCount)());\n  }\n\n}\n\nexports.NodeJsSyncHost = NodeJsSyncHost;","map":null,"metadata":{},"sourceType":"script"}