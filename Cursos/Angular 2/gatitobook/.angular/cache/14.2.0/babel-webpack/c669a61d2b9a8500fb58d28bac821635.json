{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileSystemEngineHost = void 0;\n\nconst fs_1 = require(\"fs\");\n\nconst path_1 = require(\"path\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst src_1 = require(\"../src\");\n\nconst export_ref_1 = require(\"./export-ref\");\n\nconst file_system_engine_host_base_1 = require(\"./file-system-engine-host-base\");\n/**\n * A simple EngineHost that uses a root with one directory per collection inside of it. The\n * collection declaration follows the same rules as the regular FileSystemEngineHostBase.\n */\n\n\nclass FileSystemEngineHost extends file_system_engine_host_base_1.FileSystemEngineHostBase {\n  constructor(_root) {\n    super();\n    this._root = _root;\n  }\n\n  _resolveCollectionPath(name) {\n    try {\n      // Allow `${_root}/${name}.json` as a collection.\n      const maybePath = require.resolve((0, path_1.join)(this._root, name + '.json'));\n\n      if ((0, fs_1.existsSync)(maybePath)) {\n        return maybePath;\n      }\n    } catch (error) {}\n\n    try {\n      // Allow `${_root}/${name}/collection.json.\n      const maybePath = require.resolve((0, path_1.join)(this._root, name, 'collection.json'));\n\n      if ((0, fs_1.existsSync)(maybePath)) {\n        return maybePath;\n      }\n    } catch (error) {}\n\n    throw new file_system_engine_host_base_1.CollectionCannotBeResolvedException(name);\n  }\n\n  _resolveReferenceString(refString, parentPath) {\n    // Use the same kind of export strings as NodeModule.\n    const ref = new export_ref_1.ExportStringRef(refString, parentPath);\n\n    if (!ref.ref) {\n      return null;\n    }\n\n    return {\n      ref: ref.ref,\n      path: ref.module\n    };\n  }\n\n  _transformCollectionDescription(name, desc) {\n    if (!desc.schematics || typeof desc.schematics != 'object') {\n      throw new file_system_engine_host_base_1.CollectionMissingSchematicsMapException(name);\n    }\n\n    return { ...desc,\n      name\n    };\n  }\n\n  _transformSchematicDescription(name, _collection, desc) {\n    if (!desc.factoryFn || !desc.path || !desc.description) {\n      throw new file_system_engine_host_base_1.SchematicMissingFieldsException(name);\n    }\n\n    return desc;\n  }\n\n  hasTaskExecutor(name) {\n    if (super.hasTaskExecutor(name)) {\n      return true;\n    }\n\n    try {\n      const maybePath = require.resolve((0, path_1.join)(this._root, name));\n\n      if ((0, fs_1.existsSync)(maybePath)) {\n        return true;\n      }\n    } catch {}\n\n    return false;\n  }\n\n  createTaskExecutor(name) {\n    if (!super.hasTaskExecutor(name)) {\n      try {\n        const path = require.resolve((0, path_1.join)(this._root, name)); // Default handling code is for old tasks that incorrectly export `default` with non-ESM module\n\n\n        return (0, rxjs_1.from)(Promise.resolve().then(() => __importStar(require(path))).then(mod => {\n          var _a;\n\n          return (((_a = mod.default) === null || _a === void 0 ? void 0 : _a.default) || mod.default)();\n        })).pipe((0, operators_1.catchError)(() => (0, rxjs_1.throwError)(new src_1.UnregisteredTaskException(name))));\n      } catch {}\n    }\n\n    return super.createTaskExecutor(name);\n  }\n\n}\n\nexports.FileSystemEngineHost = FileSystemEngineHost;","map":null,"metadata":{},"sourceType":"script"}