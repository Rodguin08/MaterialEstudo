{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/Voluti/Desktop/Git/Cursos/Angular 2/gatitobook/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst {\n  NotCachedError\n} = require('./errors.js');\n\nconst CacheEntry = require('./entry.js');\n\nconst remote = require('../remote.js'); // do whatever is necessary to get a Response and return it\n\n\nconst cacheFetch = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (request, options) {\n    // try to find a cached entry that satisfies this request\n    const entry = yield CacheEntry.find(request, options);\n\n    if (!entry) {\n      // no cached result, if the cache mode is 'only-if-cached' that's a failure\n      if (options.cache === 'only-if-cached') {\n        throw new NotCachedError(request.url);\n      } // otherwise, we make a request, store it and return it\n\n\n      const response = yield remote(request, options);\n      const newEntry = new CacheEntry({\n        request,\n        response,\n        options\n      });\n      return newEntry.store('miss');\n    } // we have a cached response that satisfies this request, however if the cache\n    // mode is 'no-cache' then we send the revalidation request no matter what\n\n\n    if (options.cache === 'no-cache') {\n      return entry.revalidate(request, options);\n    } // if the cached entry is not stale, or if the cache mode is 'force-cache' or\n    // 'only-if-cached' we can respond with the cached entry. set the status\n    // based on the result of needsRevalidation and respond\n\n\n    const _needsRevalidation = entry.policy.needsRevalidation(request);\n\n    if (options.cache === 'force-cache' || options.cache === 'only-if-cached' || !_needsRevalidation) {\n      return entry.respond(request.method, options, _needsRevalidation ? 'stale' : 'hit');\n    } // if we got here, the cache entry is stale so revalidate it\n\n\n    return entry.revalidate(request, options);\n  });\n\n  return function cacheFetch(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\ncacheFetch.invalidate = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (request, options) {\n    if (!options.cachePath) {\n      return;\n    }\n\n    return CacheEntry.invalidate(request, options);\n  });\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = cacheFetch;","map":null,"metadata":{},"sourceType":"script"}