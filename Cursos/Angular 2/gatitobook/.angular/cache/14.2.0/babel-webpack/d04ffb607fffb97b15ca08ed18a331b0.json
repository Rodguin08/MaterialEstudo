{"ast":null,"code":"/* eslint-disable max-len */\n'use strict';\n\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : '';\n\nconst maybeEncode = arg => arg ? encodeURIComponent(arg) : '';\n\nconst defaults = {\n  sshtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    editpath,\n    path\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', editpath, '/', maybeEncode(committish || 'master'), '/', path)}`,\n  browsetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    fragment,\n    hashformat\n  }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({\n    domain,\n    user,\n    project,\n    treepath,\n    committish\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({\n    type,\n    user,\n    project,\n    committish\n  }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    user,\n    project,\n    committish\n  }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    user,\n    project\n  }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n};\nconst gitHosts = {};\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  editpath: 'edit',\n  filetemplate: ({\n    auth,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5);\n\n    if (type && type !== 'tree') {\n      return;\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1);\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish\n    };\n  }\n});\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  editpath: '?mode=edit',\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    editpath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish || 'master'), '/', path, editpath)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    if (['get'].includes(aux)) {\n      return;\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  editpath: '-/edit',\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    const path = url.pathname.slice(1);\n\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return;\n    }\n\n    const segments = path.split('/');\n    let project = segments.pop();\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    const user = segments.join('/');\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  editpath: 'edit',\n  sshtemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    editpath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', maybeEncode(committish))}/${editpath}`,\n  browsetemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({\n    domain,\n    project,\n    committish,\n    path,\n    hashformat\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    user,\n    project,\n    committish,\n    path\n  }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({\n    type,\n    project,\n    committish\n  }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    project,\n    committish\n  }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    project\n  }) => `https://${domain}/${project}`,\n  gittemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    project,\n    committish\n  }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    if (aux === 'raw') {\n      return;\n    }\n\n    if (!project) {\n      if (!user) {\n        return;\n      }\n\n      project = user;\n      user = null;\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment);\n  }\n});\ngitHosts.sourcehut = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  browsefiletemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    fragment,\n    hashformat\n  }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'main')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  filetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'main'}/${path}`,\n  httpstemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'main'}.tar.gz`,\n  bugstemplate: ({\n    domain,\n    user,\n    project\n  }) => `https://todo.sr.ht/${user}/${project}`,\n  docstemplate: ({\n    domain,\n    user,\n    project,\n    treepath,\n    committish\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4); // tarball url\n\n    if (['archive'].includes(aux)) {\n      return;\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\nconst names = Object.keys(gitHosts);\ngitHosts.byShortcut = {};\ngitHosts.byDomain = {};\n\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name;\n  gitHosts.byDomain[gitHosts[name].domain] = name;\n}\n\nfunction formatHashFragment(fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\n}\n\nmodule.exports = gitHosts;","map":null,"metadata":{},"sourceType":"script"}