{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addUndefinedDefaults = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst utility_1 = require(\"./utility\");\n\nfunction addUndefinedDefaults(value, _pointer, schema) {\n  if (typeof schema === 'boolean' || schema === undefined) {\n    return value;\n  }\n\n  value !== null && value !== void 0 ? value : value = schema.default;\n  const types = (0, utility_1.getTypesOfSchema)(schema);\n\n  if (types.size === 0) {\n    return value;\n  }\n\n  let type;\n\n  if (types.size === 1) {\n    // only one potential type\n    type = Array.from(types)[0];\n  } else if (types.size === 2 && types.has('array') && types.has('object')) {\n    // need to create one of them and array is simpler\n    type = 'array';\n  } else if (schema.properties && types.has('object')) {\n    // assume object\n    type = 'object';\n  } else if (schema.items && types.has('array')) {\n    // assume array\n    type = 'array';\n  } else {\n    // anything else needs to be checked by the consumer anyway\n    return value;\n  }\n\n  if (type === 'array') {\n    return value == undefined ? [] : value;\n  }\n\n  if (type === 'object') {\n    let newValue;\n\n    if (value == undefined) {\n      newValue = {};\n    } else if ((0, utils_1.isJsonObject)(value)) {\n      newValue = value;\n    } else {\n      return value;\n    }\n\n    if (!(0, utils_1.isJsonObject)(schema.properties)) {\n      return newValue;\n    }\n\n    for (const [propName, schemaObject] of Object.entries(schema.properties)) {\n      if (propName === '$schema' || !(0, utils_1.isJsonObject)(schemaObject)) {\n        continue;\n      }\n\n      const value = newValue[propName];\n\n      if (value === undefined) {\n        newValue[propName] = schemaObject.default;\n      } else if ((0, utils_1.isJsonObject)(value)) {\n        // Basic support for oneOf and anyOf.\n        const propertySchemas = schemaObject.oneOf || schemaObject.anyOf;\n        const allProperties = Object.keys(value); // Locate a schema which declares all the properties that the object contains.\n\n        const adjustedSchema = (0, utils_1.isJsonArray)(propertySchemas) && propertySchemas.find(s => {\n          if (!(0, utils_1.isJsonObject)(s)) {\n            return false;\n          }\n\n          const schemaType = (0, utility_1.getTypesOfSchema)(s);\n\n          if (schemaType.size === 1 && schemaType.has('object') && (0, utils_1.isJsonObject)(s.properties)) {\n            const properties = Object.keys(s.properties);\n            return allProperties.every(key => properties.includes(key));\n          }\n\n          return false;\n        });\n\n        if (adjustedSchema && (0, utils_1.isJsonObject)(adjustedSchema)) {\n          newValue[propName] = addUndefinedDefaults(value, _pointer, adjustedSchema);\n        }\n      }\n    }\n\n    return newValue;\n  }\n\n  return value;\n}\n\nexports.addUndefinedDefaults = addUndefinedDefaults;","map":null,"metadata":{},"sourceType":"script"}