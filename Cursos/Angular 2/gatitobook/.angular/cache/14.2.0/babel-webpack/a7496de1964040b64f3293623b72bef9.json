{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AliasHost = void 0;\n\nconst path_1 = require(\"../path\");\n\nconst resolver_1 = require(\"./resolver\");\n/**\n * A Virtual Host that allow to alias some paths to other paths.\n *\n * This does not verify, when setting an alias, that the target or source exist. Neither does it\n * check whether it's a file or a directory. Please not that directories are also renamed/replaced.\n *\n * No recursion is done on the resolution, which means the following is perfectly valid then:\n *\n * ```\n *     host.aliases.set(normalize('/file/a'), normalize('/file/b'));\n *     host.aliases.set(normalize('/file/b'), normalize('/file/a'));\n * ```\n *\n * This will result in a proper swap of two files for each others.\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some/file'), normalize('/other/path');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/folder/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some'), normalize('/other');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n *   // Create the file with new content and verify that this has the new content.\n *   aHost.write(normalize('/other/folder/file'), content2).subscribe();\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content2));\n */\n\n\nclass AliasHost extends resolver_1.ResolverHost {\n  constructor() {\n    super(...arguments);\n    this._aliases = new Map();\n  }\n\n  _resolve(path) {\n    let maybeAlias = this._aliases.get(path);\n\n    const sp = (0, path_1.split)(path);\n    const remaining = []; // Also resolve all parents of the requested files, only picking the first one that matches.\n    // This can have surprising behaviour when aliases are inside another alias. It will always\n    // use the closest one to the file.\n\n    while (!maybeAlias && sp.length > 0) {\n      const p = (0, path_1.join)(path_1.NormalizedRoot, ...sp);\n      maybeAlias = this._aliases.get(p);\n\n      if (maybeAlias) {\n        maybeAlias = (0, path_1.join)(maybeAlias, ...remaining);\n      } // Allow non-null-operator because we know sp.length > 0 (condition on while).\n\n\n      remaining.unshift(sp.pop()); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    }\n\n    return maybeAlias || path;\n  }\n\n  get aliases() {\n    return this._aliases;\n  }\n\n}\n\nexports.AliasHost = AliasHost;","map":null,"metadata":{},"sourceType":"script"}