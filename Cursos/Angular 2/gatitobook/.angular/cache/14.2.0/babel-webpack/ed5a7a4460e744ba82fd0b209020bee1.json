{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeWorkflow = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst node_1 = require(\"@angular-devkit/core/node\");\n\nconst schematics_1 = require(\"@angular-devkit/schematics\");\n\nconst node_2 = require(\"../../tasks/node\");\n\nconst node_module_engine_host_1 = require(\"../node-module-engine-host\");\n\nconst schema_option_transform_1 = require(\"../schema-option-transform\");\n/**\n * A workflow specifically for Node tools.\n */\n\n\nclass NodeWorkflow extends schematics_1.workflow.BaseWorkflow {\n  constructor(hostOrRoot, options) {\n    var _a;\n\n    let host;\n    let root;\n\n    if (typeof hostOrRoot === 'string') {\n      root = (0, core_1.normalize)(hostOrRoot);\n      host = new core_1.virtualFs.ScopedHost(new node_1.NodeJsSyncHost(), root);\n    } else {\n      host = hostOrRoot;\n      root = options.root;\n    }\n\n    const engineHost = ((_a = options.engineHostCreator) === null || _a === void 0 ? void 0 : _a.call(options, options)) || new node_module_engine_host_1.NodeModulesEngineHost(options.resolvePaths);\n    super({\n      host,\n      engineHost,\n      force: options.force,\n      dryRun: options.dryRun,\n      registry: options.registry\n    });\n    engineHost.registerTaskExecutor(node_2.BuiltinTaskExecutor.NodePackage, {\n      allowPackageManagerOverride: true,\n      packageManager: options.packageManager,\n      force: options.packageManagerForce,\n      rootDirectory: root && (0, core_1.getSystemPath)(root),\n      registry: options.packageRegistry\n    });\n    engineHost.registerTaskExecutor(node_2.BuiltinTaskExecutor.RepositoryInitializer, {\n      rootDirectory: root && (0, core_1.getSystemPath)(root)\n    });\n    engineHost.registerTaskExecutor(node_2.BuiltinTaskExecutor.RunSchematic);\n\n    if (options.optionTransforms) {\n      for (const transform of options.optionTransforms) {\n        engineHost.registerOptionsTransform(transform);\n      }\n    }\n\n    if (options.schemaValidation) {\n      engineHost.registerOptionsTransform((0, schema_option_transform_1.validateOptionsWithSchema)(this.registry));\n    }\n\n    this._context = [];\n  }\n\n  get engine() {\n    return this._engine;\n  }\n\n  get engineHost() {\n    return this._engineHost;\n  }\n\n}\n\nexports.NodeWorkflow = NodeWorkflow;","map":null,"metadata":{},"sourceType":"script"}