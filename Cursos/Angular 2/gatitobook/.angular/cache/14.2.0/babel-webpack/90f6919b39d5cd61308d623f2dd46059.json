{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateOptionsWithSchema = exports.InvalidInputOptions = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nclass InvalidInputOptions extends core_1.schema.SchemaValidationException {\n  constructor(options, errors) {\n    super(errors, `Schematic input does not validate against the Schema: ${JSON.stringify(options)}\\nErrors:\\n`);\n  }\n\n}\n\nexports.InvalidInputOptions = InvalidInputOptions; // This can only be used in NodeJS.\n\nfunction validateOptionsWithSchema(registry) {\n  return (schematic, options, context) => {\n    // Prevent a schematic from changing the options object by making a copy of it.\n    options = (0, core_1.deepCopy)(options);\n    const withPrompts = context ? context.interactive : true;\n\n    if (schematic.schema && schematic.schemaJson) {\n      // Make a deep copy of options.\n      return registry.compile(schematic.schemaJson).pipe((0, operators_1.mergeMap)(validator => validator(options, {\n        withPrompts\n      })), (0, operators_1.first)(), (0, operators_1.map)(result => {\n        if (!result.success) {\n          throw new InvalidInputOptions(options, result.errors || []);\n        }\n\n        return options;\n      }));\n    }\n\n    return (0, rxjs_1.of)(options);\n  };\n}\n\nexports.validateOptionsWithSchema = validateOptionsWithSchema;","map":null,"metadata":{},"sourceType":"script"}