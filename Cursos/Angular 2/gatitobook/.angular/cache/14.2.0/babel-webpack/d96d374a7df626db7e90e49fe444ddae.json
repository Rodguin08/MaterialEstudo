{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NullTree = exports.NullTreeDirEntry = exports.CannotCreateFileException = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst exception_1 = require(\"../exception/exception\");\n\nconst interface_1 = require(\"./interface\");\n\nconst recorder_1 = require(\"./recorder\");\n\nclass CannotCreateFileException extends core_1.BaseException {\n  constructor(path) {\n    super(`Cannot create file \"${path}\".`);\n  }\n\n}\n\nexports.CannotCreateFileException = CannotCreateFileException;\n\nclass NullTreeDirEntry {\n  constructor(path) {\n    this.path = path;\n    this.subdirs = [];\n    this.subfiles = [];\n  }\n\n  get parent() {\n    return this.path == '/' ? null : new NullTreeDirEntry((0, core_1.dirname)(this.path));\n  }\n\n  dir(name) {\n    return new NullTreeDirEntry((0, core_1.join)(this.path, name));\n  }\n\n  file(_name) {\n    return null;\n  }\n\n  visit() {}\n\n}\n\nexports.NullTreeDirEntry = NullTreeDirEntry;\n\nclass NullTree {\n  constructor() {\n    this.root = new NullTreeDirEntry((0, core_1.normalize)('/'));\n  }\n\n  [interface_1.TreeSymbol]() {\n    return this;\n  }\n\n  branch() {\n    return new NullTree();\n  }\n\n  merge(_other, _strategy) {} // Simple readonly file system operations.\n\n\n  exists(_path) {\n    return false;\n  }\n\n  read(_path) {\n    return null;\n  }\n\n  readText(path) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n\n  readJson(path) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n\n  get(_path) {\n    return null;\n  }\n\n  getDir(path) {\n    return new NullTreeDirEntry((0, core_1.normalize)('/' + path));\n  }\n\n  visit() {} // Change content of host files.\n\n\n  beginUpdate(path) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n\n  commitUpdate(record) {\n    throw new exception_1.FileDoesNotExistException(record instanceof recorder_1.UpdateRecorderBase ? record.path : '<unknown>');\n  } // Change structure of the host.\n\n\n  copy(path, _to) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n\n  delete(path) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n\n  create(path, _content) {\n    throw new CannotCreateFileException(path);\n  }\n\n  rename(path, _to) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n\n  overwrite(path, _content) {\n    throw new exception_1.FileDoesNotExistException(path);\n  }\n\n  apply(_action, _strategy) {}\n\n  get actions() {\n    return [];\n  }\n\n}\n\nexports.NullTree = NullTree;","map":null,"metadata":{},"sourceType":"script"}