{"ast":null,"code":"const semver = require('semver');\n\nconst checkEngine = (target, npmVer, nodeVer, force = false) => {\n  const nodev = force ? null : nodeVer;\n  const eng = target.engines;\n  const opt = {\n    includePrerelease: true\n  };\n\n  if (!eng) {\n    return;\n  }\n\n  const nodeFail = nodev && eng.node && !semver.satisfies(nodev, eng.node, opt);\n  const npmFail = npmVer && eng.npm && !semver.satisfies(npmVer, eng.npm, opt);\n\n  if (nodeFail || npmFail) {\n    throw Object.assign(new Error('Unsupported engine'), {\n      pkgid: target._id,\n      current: {\n        node: nodeVer,\n        npm: npmVer\n      },\n      required: eng,\n      code: 'EBADENGINE'\n    });\n  }\n};\n\nconst checkPlatform = (target, force = false) => {\n  if (force) {\n    return;\n  }\n\n  const platform = process.platform;\n  const arch = process.arch;\n  const osOk = target.os ? checkList(platform, target.os) : true;\n  const cpuOk = target.cpu ? checkList(arch, target.cpu) : true;\n\n  if (!osOk || !cpuOk) {\n    throw Object.assign(new Error('Unsupported platform'), {\n      pkgid: target._id,\n      current: {\n        os: platform,\n        cpu: arch\n      },\n      required: {\n        os: target.os,\n        cpu: target.cpu\n      },\n      code: 'EBADPLATFORM'\n    });\n  }\n};\n\nconst checkList = (value, list) => {\n  if (typeof list === 'string') {\n    list = [list];\n  }\n\n  if (list.length === 1 && list[0] === 'any') {\n    return true;\n  } // match none of the negated values, and at least one of the\n  // non-negated values, if any are present.\n\n\n  let negated = 0;\n  let match = false;\n\n  for (const entry of list) {\n    const negate = entry.charAt(0) === '!';\n    const test = negate ? entry.slice(1) : entry;\n\n    if (negate) {\n      negated++;\n\n      if (value === test) {\n        return false;\n      }\n    } else {\n      match = match || value === test;\n    }\n  }\n\n  return match || negated === list.length;\n};\n\nmodule.exports = {\n  checkEngine,\n  checkPlatform\n};","map":null,"metadata":{},"sourceType":"script"}