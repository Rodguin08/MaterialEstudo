{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HostSink = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst update_buffer_1 = require(\"../utility/update-buffer\");\n\nconst sink_1 = require(\"./sink\");\n\nclass HostSink extends sink_1.SimpleSinkBase {\n  constructor(_host, _force = false) {\n    super();\n    this._host = _host;\n    this._force = _force;\n    this._filesToDelete = new Set();\n    this._filesToRename = new Set();\n    this._filesToCreate = new Map();\n    this._filesToUpdate = new Map();\n  }\n\n  _validateCreateAction(action) {\n    return this._force ? rxjs_1.EMPTY : super._validateCreateAction(action);\n  }\n\n  _validateFileExists(p) {\n    if (this._filesToCreate.has(p) || this._filesToUpdate.has(p)) {\n      return (0, rxjs_1.of)(true);\n    }\n\n    if (this._filesToDelete.has(p)) {\n      return (0, rxjs_1.of)(false);\n    }\n\n    for (const [from, to] of this._filesToRename.values()) {\n      switch (p) {\n        case from:\n          return (0, rxjs_1.of)(false);\n\n        case to:\n          return (0, rxjs_1.of)(true);\n      }\n    }\n\n    return this._host.exists(p);\n  }\n\n  _overwriteFile(path, content) {\n    this._filesToUpdate.set(path, update_buffer_1.UpdateBufferBase.create(content));\n\n    return rxjs_1.EMPTY;\n  }\n\n  _createFile(path, content) {\n    this._filesToCreate.set(path, update_buffer_1.UpdateBufferBase.create(content));\n\n    return rxjs_1.EMPTY;\n  }\n\n  _renameFile(from, to) {\n    this._filesToRename.add([from, to]);\n\n    return rxjs_1.EMPTY;\n  }\n\n  _deleteFile(path) {\n    if (this._filesToCreate.has(path)) {\n      this._filesToCreate.delete(path);\n\n      this._filesToUpdate.delete(path);\n    } else {\n      this._filesToDelete.add(path);\n    }\n\n    return rxjs_1.EMPTY;\n  }\n\n  _done() {\n    // Really commit everything to the actual filesystem.\n    return (0, rxjs_1.concat)((0, rxjs_1.from)([...this._filesToDelete.values()]).pipe((0, operators_1.concatMap)(path => this._host.delete(path))), (0, rxjs_1.from)([...this._filesToRename.entries()]).pipe((0, operators_1.concatMap)(([_, [path, to]]) => this._host.rename(path, to))), (0, rxjs_1.from)([...this._filesToCreate.entries()]).pipe((0, operators_1.concatMap)(([path, buffer]) => {\n      return this._host.write(path, buffer.generate());\n    })), (0, rxjs_1.from)([...this._filesToUpdate.entries()]).pipe((0, operators_1.concatMap)(([path, buffer]) => {\n      return this._host.write(path, buffer.generate());\n    }))).pipe((0, operators_1.reduce)(() => {}));\n  }\n\n}\n\nexports.HostSink = HostSink;","map":null,"metadata":{},"sourceType":"script"}