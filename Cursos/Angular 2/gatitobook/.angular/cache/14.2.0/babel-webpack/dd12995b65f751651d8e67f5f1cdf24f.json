{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isContentAction = exports.ActionList = exports.UnknownActionException = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nclass UnknownActionException extends core_1.BaseException {\n  constructor(action) {\n    super(`Unknown action: \"${action.kind}\".`);\n  }\n\n}\n\nexports.UnknownActionException = UnknownActionException;\nlet _id = 1;\n\nclass ActionList {\n  constructor() {\n    this._actions = [];\n  }\n\n  _action(action) {\n    var _a, _b;\n\n    this._actions.push({ ...action,\n      id: _id++,\n      parent: (_b = (_a = this._actions[this._actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : 0\n    });\n  }\n\n  create(path, content) {\n    this._action({\n      kind: 'c',\n      path,\n      content\n    });\n  }\n\n  overwrite(path, content) {\n    this._action({\n      kind: 'o',\n      path,\n      content\n    });\n  }\n\n  rename(path, to) {\n    this._action({\n      kind: 'r',\n      path,\n      to\n    });\n  }\n\n  delete(path) {\n    this._action({\n      kind: 'd',\n      path\n    });\n  }\n\n  optimize() {\n    const toCreate = new Map();\n    const toRename = new Map();\n    const toOverwrite = new Map();\n    const toDelete = new Set();\n\n    for (const action of this._actions) {\n      switch (action.kind) {\n        case 'c':\n          toCreate.set(action.path, action.content);\n          break;\n\n        case 'o':\n          if (toCreate.has(action.path)) {\n            toCreate.set(action.path, action.content);\n          } else {\n            toOverwrite.set(action.path, action.content);\n          }\n\n          break;\n\n        case 'd':\n          toDelete.add(action.path);\n          break;\n\n        case 'r':\n          const maybeCreate = toCreate.get(action.path);\n          const maybeOverwrite = toOverwrite.get(action.path);\n\n          if (maybeCreate) {\n            toCreate.delete(action.path);\n            toCreate.set(action.to, maybeCreate);\n          }\n\n          if (maybeOverwrite) {\n            toOverwrite.delete(action.path);\n            toOverwrite.set(action.to, maybeOverwrite);\n          }\n\n          let maybeRename = undefined;\n\n          for (const [from, to] of toRename.entries()) {\n            if (to == action.path) {\n              maybeRename = from;\n              break;\n            }\n          }\n\n          if (maybeRename) {\n            toRename.set(maybeRename, action.to);\n          }\n\n          if (!maybeCreate && !maybeOverwrite && !maybeRename) {\n            toRename.set(action.path, action.to);\n          }\n\n          break;\n      }\n    }\n\n    this._actions = [];\n    toDelete.forEach(x => {\n      this.delete(x);\n    });\n    toRename.forEach((to, from) => {\n      this.rename(from, to);\n    });\n    toCreate.forEach((content, path) => {\n      this.create(path, content);\n    });\n    toOverwrite.forEach((content, path) => {\n      this.overwrite(path, content);\n    });\n  }\n\n  push(action) {\n    this._actions.push(action);\n  }\n\n  get(i) {\n    return this._actions[i];\n  }\n\n  has(action) {\n    for (let i = 0; i < this._actions.length; i++) {\n      const a = this._actions[i];\n\n      if (a.id == action.id) {\n        return true;\n      }\n\n      if (a.id > action.id) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  find(predicate) {\n    return this._actions.find(predicate) || null;\n  }\n\n  forEach(fn, thisArg) {\n    this._actions.forEach(fn, thisArg);\n  }\n\n  get length() {\n    return this._actions.length;\n  }\n\n  [Symbol.iterator]() {\n    return this._actions[Symbol.iterator]();\n  }\n\n}\n\nexports.ActionList = ActionList;\n\nfunction isContentAction(action) {\n  return action.kind == 'c' || action.kind == 'o';\n}\n\nexports.isContentAction = isContentAction;","map":null,"metadata":{},"sourceType":"script"}