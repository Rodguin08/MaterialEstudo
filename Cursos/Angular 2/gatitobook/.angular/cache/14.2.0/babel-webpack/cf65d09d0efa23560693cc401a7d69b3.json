{"ast":null,"code":"// A path exclusive reservation system\n// reserve([list, of, paths], fn)\n// When the fn is first in line for all its paths, it\n// is called with a cb that clears the reservation.\n//\n// Used by async unpack to avoid clobbering paths in use,\n// while still allowing maximal safe parallelization.\nconst assert = require('assert');\n\nconst normalize = require('./normalize-unicode.js');\n\nconst stripSlashes = require('./strip-trailing-slashes.js');\n\nconst {\n  join\n} = require('path');\n\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform;\nconst isWindows = platform === 'win32';\n\nmodule.exports = () => {\n  // path => [function or Set]\n  // A Set object means a directory reservation\n  // A fn is a direct reservation on that path\n  const queues = new Map(); // fn => {paths:[path,...], dirs:[path, ...]}\n\n  const reservations = new Map(); // return a set of parent dirs for a given path\n  // '/a/b/c/d' -> ['/', '/a', '/a/b', '/a/b/c', '/a/b/c/d']\n\n  const getDirs = path => {\n    const dirs = path.split('/').slice(0, -1).reduce((set, path) => {\n      if (set.length) path = join(set[set.length - 1], path);\n      set.push(path || '/');\n      return set;\n    }, []);\n    return dirs;\n  }; // functions currently running\n\n\n  const running = new Set(); // return the queues for each path the function cares about\n  // fn => {paths, dirs}\n\n  const getQueues = fn => {\n    const res = reservations.get(fn);\n    /* istanbul ignore if - unpossible */\n\n    if (!res) throw new Error('function does not have any path reservations');\n    return {\n      paths: res.paths.map(path => queues.get(path)),\n      dirs: [...res.dirs].map(path => queues.get(path))\n    };\n  }; // check if fn is first in line for all its paths, and is\n  // included in the first set for all its dir queues\n\n\n  const check = fn => {\n    const {\n      paths,\n      dirs\n    } = getQueues(fn);\n    return paths.every(q => q[0] === fn) && dirs.every(q => q[0] instanceof Set && q[0].has(fn));\n  }; // run the function if it's first in line and not already running\n\n\n  const run = fn => {\n    if (running.has(fn) || !check(fn)) return false;\n    running.add(fn);\n    fn(() => clear(fn));\n    return true;\n  };\n\n  const clear = fn => {\n    if (!running.has(fn)) return false;\n    const {\n      paths,\n      dirs\n    } = reservations.get(fn);\n    const next = new Set();\n    paths.forEach(path => {\n      const q = queues.get(path);\n      assert.equal(q[0], fn);\n      if (q.length === 1) queues.delete(path);else {\n        q.shift();\n        if (typeof q[0] === 'function') next.add(q[0]);else q[0].forEach(fn => next.add(fn));\n      }\n    });\n    dirs.forEach(dir => {\n      const q = queues.get(dir);\n      assert(q[0] instanceof Set);\n      if (q[0].size === 1 && q.length === 1) queues.delete(dir);else if (q[0].size === 1) {\n        q.shift(); // must be a function or else the Set would've been reused\n\n        next.add(q[0]);\n      } else q[0].delete(fn);\n    });\n    running.delete(fn);\n    next.forEach(fn => run(fn));\n    return true;\n  };\n\n  const reserve = (paths, fn) => {\n    // collide on matches across case and unicode normalization\n    // On windows, thanks to the magic of 8.3 shortnames, it is fundamentally\n    // impossible to determine whether two paths refer to the same thing on\n    // disk, without asking the kernel for a shortname.\n    // So, we just pretend that every path matches every other path here,\n    // effectively removing all parallelization on windows.\n    paths = isWindows ? ['win32 parallelization disabled'] : paths.map(p => {\n      // don't need normPath, because we skip this entirely for windows\n      return normalize(stripSlashes(join(p))).toLowerCase();\n    });\n    const dirs = new Set(paths.map(path => getDirs(path)).reduce((a, b) => a.concat(b)));\n    reservations.set(fn, {\n      dirs,\n      paths\n    });\n    paths.forEach(path => {\n      const q = queues.get(path);\n      if (!q) queues.set(path, [fn]);else q.push(fn);\n    });\n    dirs.forEach(dir => {\n      const q = queues.get(dir);\n      if (!q) queues.set(dir, [new Set([fn])]);else if (q[q.length - 1] instanceof Set) q[q.length - 1].add(fn);else q.push(new Set([fn]));\n    });\n    return run(fn);\n  };\n\n  return {\n    check,\n    reserve\n  };\n};","map":null,"metadata":{},"sourceType":"script"}