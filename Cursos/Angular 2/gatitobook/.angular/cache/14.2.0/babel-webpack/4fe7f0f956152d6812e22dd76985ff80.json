{"ast":null,"code":"'use strict';\n\nclass FetchError extends Error {\n  constructor(message, type, systemError) {\n    super(message);\n    this.code = 'FETCH_ERROR'; // pick up code, expected, path, ...\n\n    if (systemError) {\n      Object.assign(this, systemError);\n    }\n\n    this.errno = this.code; // override anything the system error might've clobbered\n\n    this.type = this.code === 'EBADSIZE' && this.found > this.expect ? 'max-size' : type;\n    this.message = message;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  get name() {\n    return 'FetchError';\n  } // don't allow name to be overwritten\n\n\n  set name(n) {}\n\n  get [Symbol.toStringTag]() {\n    return 'FetchError';\n  }\n\n}\n\nmodule.exports = FetchError;","map":null,"metadata":{},"sourceType":"script"}