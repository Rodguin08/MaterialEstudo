{"ast":null,"code":"'use strict';\n/**\n * `editor` type prompt\n */\n\nconst chalk = require('chalk');\n\nconst {\n  editAsync\n} = require('external-editor');\n\nconst Base = require('./base');\n\nconst observe = require('../utils/events');\n\nconst {\n  Subject\n} = require('rxjs');\n\nclass EditorPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n  _run(cb) {\n    this.done = cb;\n    this.editorResult = new Subject(); // Open Editor on \"line\" (Enter Key)\n\n    const events = observe(this.rl);\n    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this)); // Trigger Validation when editor closes\n\n    const validation = this.handleSubmitEvents(this.editorResult);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this)); // Prevents default from being printed on screen (can look weird with multiple lines)\n\n    this.currentText = this.opt.default;\n    this.opt.default = null; // Init\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {EditorPrompt} self\n   */\n\n\n  render(error) {\n    let bottomContent = '';\n    let message = this.getQuestion();\n\n    if (this.status === 'answered') {\n      message += chalk.dim('Received');\n    } else {\n      message += chalk.dim('Press <enter> to launch your preferred editor.');\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n  /**\n   * Launch $EDITOR on user press enter\n   */\n\n\n  startExternalEditor() {\n    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing\n    this.rl.pause();\n    editAsync(this.currentText, this.endExternalEditor.bind(this));\n  }\n\n  endExternalEditor(error, result) {\n    this.rl.resume();\n\n    if (error) {\n      this.editorResult.error(error);\n    } else {\n      this.editorResult.next(result);\n    }\n  }\n\n  onEnd(state) {\n    this.editorResult.unsubscribe();\n    this.lineSubscription.unsubscribe();\n    this.answer = state.value;\n    this.status = 'answered'; // Re-render prompt\n\n    this.render();\n    this.screen.done();\n    this.done(this.answer);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n}\n\nmodule.exports = EditorPrompt;","map":null,"metadata":{},"sourceType":"script"}